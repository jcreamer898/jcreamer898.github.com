{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","props","tag","pageContext","_props$data$allMarkdo","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_layouts__WEBPACK_IMPORTED_MODULE_9__","react_helmet__WEBPACK_IMPORTED_MODULE_11___default","a","lang","config","title","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","_components_Wrapper__WEBPACK_IMPORTED_MODULE_8__","className","image","css","_emotion_css__WEBPACK_IMPORTED_MODULE_0__","outer","SiteHeader","style","backgroundImage","childImageSharp","fluid","src","inner","_components_header_SiteNav__WEBPACK_IMPORTED_MODULE_6__","isHome","_styles_shared__WEBPACK_IMPORTED_MODULE_10__","react__WEBPACK_IMPORTED_MODULE_4___default","Fragment","SiteMain","PostFeed","PostFeedRaise","map","_ref","_components_PostCard__WEBPACK_IMPORTED_MODULE_7__","key","fields","post","_components_Footer__WEBPACK_IMPORTED_MODULE_5__","pageQuery"],"mappings":"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","file":"component---src-templates-tags-tsx-44942795a864462ea24d.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tags: React.FC<TagTemplateProps> = props => {\n  const tag = (props.pageContext.tag) ? props.pageContext.tag : '';\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta\n          name=\"description\"\n          content={tagData && tagData.node ? tagData.node.description : ''}\n        />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image ?\n                `url('${tagData.node.image.childImageSharp.fluid.src}')` :\n                '',\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}