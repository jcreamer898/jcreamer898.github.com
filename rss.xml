<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jonathan Creamer]]></title><description><![CDATA[Living, learning, developing. Write about what I do, what I love, and what I learn. Lonely Planet. JavaScript, React, Ruby, Node, Rails, C#, Microsoft MVP.]]></description><link>https://jonathancreamer.com</link><generator>RSS for Node</generator><lastBuildDate>Mon, 02 Sep 2019 16:41:09 GMT</lastBuildDate><item><title><![CDATA[How webpack decides what entry to load from a package]]></title><description><![CDATA[Today I was working on creating a node.js bundle using webpack 4, and came across a fun little doozie of an error which lead me to do a bit…]]></description><link>https://jonathancreamer.com/how-webpack-decides-what-entry-to-load-from-a-package-json/</link><guid isPermaLink="false">https://jonathancreamer.com/how-webpack-decides-what-entry-to-load-from-a-package-json/</guid><pubDate>Sun, 30 Sep 2018 07:03:47 GMT</pubDate><content:encoded>&lt;p&gt;Today I was working on creating a node.js bundle using webpack 4, and came across a fun little doozie of an error which lead me to do a bit of code spelunkery into how Webpack actually decides on what to load when you &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; something from &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; files have a &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; in them, because it tells the “requirer” of the package what the entry point of the package is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main field is a module ID that is the primary entry point to your program. &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;https://docs.npmjs.com/files/package.json#main&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, there’s also a spec for defining other targets, namely the “browser” field.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.npmjs.com/files/package.json#browser&quot;&gt;https://docs.npmjs.com/files/package.json#browser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is even a proposal to add a “module” field. &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&lt;/a&gt;, which some libraries are already taking advantage of, and Webpack can also understand it.&lt;/p&gt;
&lt;p&gt;In terms of Webpack, the 3 most important ones are &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;browser&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;browser&lt;/code&gt; should point to a browser compatible bundle&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; should point to a folder of ES modules&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; should point to whatever whatever you want the default entry to be&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt; of your app is &lt;code class=&quot;language-text&quot;&gt;web&lt;/code&gt; or a few others (which is default). It will look first at the &lt;code class=&quot;language-text&quot;&gt;browser&lt;/code&gt; field, and if it doesn’t exist, it’ll look for the &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt;, and lastly &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if (
    options.target === &amp;quot;web&amp;quot; ||
    options.target === &amp;quot;webworker&amp;quot; ||
    options.target === &amp;quot;electron-renderer&amp;quot;
) {
    return [&amp;quot;browser&amp;quot;, &amp;quot;module&amp;quot;, &amp;quot;main&amp;quot;];
} else {
    return [&amp;quot;module&amp;quot;, &amp;quot;main&amp;quot;];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336&quot;&gt;https://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If your package is simply only meant to work in the browser, you can get away with only using &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;, but if you’re looking to support both the web and node, then take advantage of the &lt;code class=&quot;language-text&quot;&gt;browser&lt;/code&gt; field by pointing it to your browser compatible bundle.&lt;/p&gt;
&lt;p&gt;For me what was happening was, there’s an import in one of our libraries for &lt;code class=&quot;language-text&quot;&gt;isomorphic-fetch&lt;/code&gt;. Well, since the target is &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; in the Webpack build I was working with, &lt;code class=&quot;language-text&quot;&gt;node-fetch&lt;/code&gt; actually got required. And &lt;code class=&quot;language-text&quot;&gt;node-fetch&lt;/code&gt; requires a library which can’t be lazily loaded by Webpack. Aka this issue. &lt;a href=&quot;https://github.com/andris9/encoding/issues/18&quot;&gt;https://github.com/andris9/encoding/issues/18&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tldr; if your Webpack target is &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt;, it looks at the &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; for entry. Otherwise, it goes to the &lt;code class=&quot;language-text&quot;&gt;browser&lt;/code&gt;, then &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt;, then &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WebPack production environment is NOT the NODE_ENV or BABEL_ENV environment variable]]></title><description><![CDATA[A revelation came to me the other day when I was reviewing some of our bundling processes at Eventbrite. We currently run production bundles…]]></description><link>https://jonathancreamer.com/webpack-production-environment-is-not-the-node_env-or-babel_env-environment-variable/</link><guid isPermaLink="false">https://jonathancreamer.com/webpack-production-environment-is-not-the-node_env-or-babel_env-environment-variable/</guid><pubDate>Sun, 30 Sep 2018 07:03:47 GMT</pubDate><content:encoded>&lt;p&gt;A revelation came to me the other day when I was reviewing some of our bundling processes at Eventbrite.&lt;/p&gt;
&lt;p&gt;We currently run production bundles like this…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node --max_old_space_size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
 ./node_modules/.bin/webpack &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
 --bail &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
 --config-name node &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
 --env.production &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
 --config ./config/webpack.production.config.js        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code class=&quot;language-text&quot;&gt;--env.production&lt;/code&gt; in there. &lt;/p&gt;
&lt;p&gt;We also use the &lt;code class=&quot;language-text&quot;&gt;babel-loader&lt;/code&gt; along with the &lt;code class=&quot;language-text&quot;&gt;babel-preset-env&lt;/code&gt; plugin as any good citizen would.&lt;/p&gt;
&lt;p&gt;Here’s what’s interesting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;--env.production&lt;/code&gt; does NOT set &lt;code class=&quot;language-text&quot;&gt;NODE_ENV=production&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I proceeded to hover over the &lt;code class=&quot;language-text&quot;&gt;environment&lt;/code&gt; key on my .babelrc in VSCode, and got this little nugget.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d.pr/i/VbEYd6+&quot;&gt;&lt;/p&gt;
&lt;p&gt;I then found the exact quote from the old &lt;a href=&quot;https://babeljs.io/docs/en/6.26.3/babelrc#env-option&quot;&gt;62.6 docs&lt;/a&gt; (we’re still on Babel 6 for now).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The env key will be taken from process.env.BABEL_ENV, when this is not available then it uses process.env.NODE_ENV if even that is not available then it defaults to “development”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alright so basically that means we’ve been running Babel as dev mode! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2019/04/doh.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;What does that &lt;code class=&quot;language-text&quot;&gt;--env.production&lt;/code&gt; thing even do?&lt;/p&gt;
&lt;p&gt;Well, according to &lt;a href=&quot;https://webpack.js.org/guides/environment-variables&quot;&gt;https://webpack.js.org/guides/environment-variables&lt;/a&gt;, all it does is make it so when you setup your webpack config, you actually export a function that gives you an &lt;code class=&quot;language-text&quot;&gt;env&lt;/code&gt;, and evidently you can also set your actual NODE_ENV like…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;webpack &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;local &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;production &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;progress&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you you can get that &lt;code class=&quot;language-text&quot;&gt;env&lt;/code&gt; in the config callback.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Use env.&amp;lt;YOUR VARIABLE&gt; here:&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;NODE_ENV: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;local&apos;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Production: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;production&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;DefinePlugin&lt;/h3&gt;
&lt;p&gt;Here’s the thing though, just running &lt;code class=&quot;language-text&quot;&gt;NODE_ENV=production webpack&lt;/code&gt; doesn’t necessarily give you production bundles either. &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NODE_ENV=production&lt;/code&gt; just tells node in what mode to actually run webpack. &lt;/p&gt;
&lt;p&gt;Meaning, if you have code in your app which does…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// do production things&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will simply leave those in place.&lt;/p&gt;
&lt;p&gt;In order to make your output code reflect the proper NODE_ENV you have to use either the EnvironmentPlugin or the DefinePlugin. (The EnvironmentPlugin uses Define under the covers).&lt;/p&gt;
&lt;p&gt;I personally prefer the explicitness of the DefinePlugin…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;webpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefinePlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;process.env.NODE_ENV&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;process.env.DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you had passed in the &lt;code class=&quot;language-text&quot;&gt;--env.production&lt;/code&gt; thing, you could do like…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;webpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefinePlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;process.env.NODE_ENV&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;production &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;process.env.DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p.s. You have to do the &lt;code class=&quot;language-text&quot;&gt;JSON.stringify&lt;/code&gt; thing so that in your code it’ll do…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Converts the above to&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;webpack 4&lt;/h3&gt;
&lt;p&gt;In webpack 4, what’s nice is, there is a webpack configuration setting called &lt;code class=&quot;language-text&quot;&gt;mode&lt;/code&gt;. And when you set &lt;code class=&quot;language-text&quot;&gt;mode: &amp;quot;production&amp;quot;&lt;/code&gt;, it goes ahead and sets up the DefinePlugin for you. &lt;/p&gt;
&lt;p&gt;However, you still may run into a scenario where you need to make sure that the &lt;code class=&quot;language-text&quot;&gt;babel-loader&lt;/code&gt; knows your &lt;code class=&quot;language-text&quot;&gt;NODE_ENV=production&lt;/code&gt;. So, just keep a close eye on it.&lt;/p&gt;
&lt;h1&gt;tldr;&lt;/h1&gt;
&lt;p&gt;Make sure when you’re doing production webpack builds involving babel, particularly in webpack 3 where you don’t have the &lt;code class=&quot;language-text&quot;&gt;mode&lt;/code&gt; option, make sure to set &lt;code class=&quot;language-text&quot;&gt;NODE_ENV=production&lt;/code&gt; when you run webpack.&lt;/p&gt;</content:encoded></item></channel></rss>