{"db":[{"meta":{"exported_on":1567088068873,"version":"2.30.2"},"data":{"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2019-08-29 13:45:47","released_at":"2019-08-29 13:45:49"}],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"2.30"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"2.30"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"2.30"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"2.30"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"2.30"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"2.30"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"2.30"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"2.30"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"2.30"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"2.30"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"2.30"},{"id":12,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"2.30"},{"id":13,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"2.30"},{"id":14,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"2.30"},{"id":15,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"2.30"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"2.30"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"2.30"},{"id":18,"name":"1-rename-amp-column.js","version":"2.0","currentVersion":"2.30"},{"id":19,"name":"2-update-posts.js","version":"2.0","currentVersion":"2.30"},{"id":20,"name":"3-remove-koenig-labs.js","version":"2.0","currentVersion":"2.30"},{"id":21,"name":"4-permalink-setting.js","version":"2.0","currentVersion":"2.30"},{"id":22,"name":"5-remove-demo-post.js","version":"2.0","currentVersion":"2.30"},{"id":23,"name":"6-replace-fixture-posts.js","version":"2.0","currentVersion":"2.30"},{"id":24,"name":"1-add-sessions-table.js","version":"2.2","currentVersion":"2.30"},{"id":25,"name":"2-add-integrations-and-api-key-tables.js","version":"2.2","currentVersion":"2.30"},{"id":26,"name":"3-insert-admin-integration-role.js","version":"2.2","currentVersion":"2.30"},{"id":27,"name":"4-insert-integration-and-api-key-permissions.js","version":"2.2","currentVersion":"2.30"},{"id":28,"name":"5-add-mobiledoc-revisions-table.js","version":"2.2","currentVersion":"2.30"},{"id":29,"name":"1-add-webhook-columns.js","version":"2.3","currentVersion":"2.30"},{"id":30,"name":"2-add-webhook-edit-permission.js","version":"2.3","currentVersion":"2.30"},{"id":31,"name":"1-add-webhook-permission-roles.js","version":"2.6","currentVersion":"2.30"},{"id":32,"name":"1-add-members-table.js","version":"2.8","currentVersion":"2.30"},{"id":33,"name":"1-remove-empty-strings.js","version":"2.13","currentVersion":"2.30"},{"id":34,"name":"1-add-actions-table.js","version":"2.14","currentVersion":"2.30"},{"id":35,"name":"2-add-actions-permissions.js","version":"2.14","currentVersion":"2.30"},{"id":36,"name":"1-add-type-column-to-integrations.js","version":"2.15","currentVersion":"2.30"},{"id":37,"name":"2-insert-zapier-integration.js","version":"2.15","currentVersion":"2.30"},{"id":38,"name":"1-add-members-perrmissions.js","version":"2.16","currentVersion":"2.30"},{"id":39,"name":"1-normalize-settings.js","version":"2.17","currentVersion":"2.30"},{"id":40,"name":"2-posts-add-canonical-url.js","version":"2.17","currentVersion":"2.30"},{"id":41,"name":"1-restore-settings-from-backup.js","version":"2.18","currentVersion":"2.30"},{"id":42,"name":"1-update-editor-permissions.js","version":"2.21","currentVersion":"2.30"},{"id":43,"name":"1-add-member-permissions-to-roles.js","version":"2.22","currentVersion":"2.30"},{"id":44,"name":"1-insert-ghost-db-backup-role.js","version":"2.27","currentVersion":"2.30"},{"id":45,"name":"2-insert-db-backup-integration.js","version":"2.27","currentVersion":"2.30"},{"id":46,"name":"3-add-subdirectory-to-relative-canonical-urls.js","version":"2.27","currentVersion":"2.30"},{"id":47,"name":"1-add-db-backup-content-permission.js","version":"2.28","currentVersion":"2.30"},{"id":48,"name":"2-add-db-backup-content-permission-to-roles.js","version":"2.28","currentVersion":"2.30"},{"id":49,"name":"3-insert-ghost-scheduler-role.js","version":"2.28","currentVersion":"2.30"},{"id":50,"name":"4-insert-scheduler-integration.js","version":"2.28","currentVersion":"2.30"},{"id":51,"name":"5-add-scheduler-permission-to-roles.js","version":"2.28","currentVersion":"2.30"},{"id":52,"name":"6-add-type-column.js","version":"2.28","currentVersion":"2.30"},{"id":53,"name":"7-populate-type-column.js","version":"2.28","currentVersion":"2.30"},{"id":54,"name":"8-remove-page-column.js","version":"2.28","currentVersion":"2.30"},{"id":55,"name":"1-add-post-page-column.js","version":"2.29","currentVersion":"2.30"},{"id":56,"name":"2-populate-post-page-column.js","version":"2.29","currentVersion":"2.30"},{"id":57,"name":"3-remove-page-type-column.js","version":"2.29","currentVersion":"2.30"}],"posts":[{"id":"5d67d70df39f3138839c4283","uuid":"b6370d6b-26f5-4f8e-86b2-b036b0eff769","title":"Creating a custom theme","slug":"themes","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v1.0.0/images/marketplace.jpg\",\"caption\":\"Anyone can write a completely custom Ghost theme with some solid knowledge of HTML and CSS\"}]],\"markups\":[[\"a\",[\"href\",\"https://ghost.org/marketplace/\"]],[\"code\"],[\"a\",[\"href\",\"https://github.com/TryGhost/Casper\"]],[\"a\",[\"href\",\"https://ghost.org/docs/api/handlebars-themes/\"]],[\"strong\"],[\"a\",[\"href\",\"https://forum.ghost.org/c/themes\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.\"]]],[1,\"p\",[[0,[],0,\"There are a huge range of both free and premium pre-built themes which you can get from the \"],[0,[0],1,\"Ghost Theme Marketplace\"],[0,[],0,\", or you can create your own from scratch.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Ghost themes are written with a templating language called handlebars, which has a set of dynamic helpers to insert your data into template files. For example: \"],[0,[1],1,\"{{author.name}}\"],[0,[],0,\" outputs the name of the current author.\"]]],[1,\"p\",[[0,[],0,\"The best way to learn how to write your own Ghost theme is to have a look at \"],[0,[2],1,\"the source code for Casper\"],[0,[],0,\", which is heavily commented and should give you a sense of how everything fits together.\"]]],[3,\"ul\",[[[0,[1],1,\"default.hbs\"],[0,[],0,\" is the main template file, all contexts will load inside this file unless specifically told to use a different template.\"]],[[0,[1],1,\"post.hbs\"],[0,[],0,\" is the file used in the context of viewing a post.\"]],[[0,[1],1,\"index.hbs\"],[0,[],0,\" is the file used in the context of viewing the home page.\"]],[[0,[],0,\"and so on\"]]]],[1,\"p\",[[0,[],0,\"We've got \"],[0,[3],1,\"full and extensive theme documentation\"],[0,[],0,\" which outlines every template file, context and helper that you can use.\"]]],[1,\"p\",[[0,[],0,\"If you want to chat with other people making Ghost themes to get any advice or help, there's also a \"],[0,[4],1,\"themes\"],[0,[],0,\" section on our \"],[0,[5],1,\"public Ghost forum\"],[0,[],0,\".\"]]]]}","html":"<p>Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.</p><p>There are a huge range of both free and premium pre-built themes which you can get from the <a href=\"https://ghost.org/marketplace/\">Ghost Theme Marketplace</a>, or you can create your own from scratch.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://static.ghost.org/v1.0.0/images/marketplace.jpg\" class=\"kg-image\"><figcaption>Anyone can write a completely custom Ghost theme with some solid knowledge of HTML and CSS</figcaption></figure><!--kg-card-end: image--><p>Ghost themes are written with a templating language called handlebars, which has a set of dynamic helpers to insert your data into template files. For example: <code>{{author.name}}</code> outputs the name of the current author.</p><p>The best way to learn how to write your own Ghost theme is to have a look at <a href=\"https://github.com/TryGhost/Casper\">the source code for Casper</a>, which is heavily commented and should give you a sense of how everything fits together.</p><ul><li><code>default.hbs</code> is the main template file, all contexts will load inside this file unless specifically told to use a different template.</li><li><code>post.hbs</code> is the file used in the context of viewing a post.</li><li><code>index.hbs</code> is the file used in the context of viewing the home page.</li><li>and so on</li></ul><p>We've got <a href=\"https://ghost.org/docs/api/handlebars-themes/\">full and extensive theme documentation</a> which outlines every template file, context and helper that you can use.</p><p>If you want to chat with other people making Ghost themes to get any advice or help, there's also a <strong>themes</strong> section on our <a href=\"https://forum.ghost.org/c/themes\">public Ghost forum</a>.</p>","comment_id":"5d67d70df39f3138839c4283","plaintext":"Ghost comes with a beautiful default theme called Casper, which is designed to\nbe a clean, readable publication layout and can be adapted for most purposes.\nHowever, Ghost can also be completely themed to suit your needs. Rather than\njust giving you a few basic settings which act as a poor proxy for code, we just\nlet you write code.\n\nThere are a huge range of both free and premium pre-built themes which you can\nget from the Ghost Theme Marketplace [https://ghost.org/marketplace/], or you\ncan create your own from scratch.\n\nAnyone can write a completely custom Ghost theme with some solid knowledge of\nHTML and CSSGhost themes are written with a templating language called\nhandlebars, which has a set of dynamic helpers to insert your data into template\nfiles. For example: {{author.name}} outputs the name of the current author.\n\nThe best way to learn how to write your own Ghost theme is to have a look at \nthe\nsource code for Casper [https://github.com/TryGhost/Casper], which is heavily\ncommented and should give you a sense of how everything fits together.\n\n * default.hbs is the main template file, all contexts will load inside this\n   file unless specifically told to use a different template.\n * post.hbs is the file used in the context of viewing a post.\n * index.hbs is the file used in the context of viewing the home page.\n * and so on\n\nWe've got full and extensive theme documentation\n[https://ghost.org/docs/api/handlebars-themes/] which outlines every template\nfile, context and helper that you can use.\n\nIf you want to chat with other people making Ghost themes to get any advice or\nhelp, there's also a themes section on our public Ghost forum\n[https://forum.ghost.org/c/themes].","feature_image":"https://static.ghost.org/v2.0.0/images/creating-a-custom-theme.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:49","custom_excerpt":"Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c4285","uuid":"6e0fd5f8-ea6c-43de-82c1-10bdbddce38a","title":"Apps & integrations","slug":"apps-integrations","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"<script src=\\\"https://zapier.com/apps/embed/widget.js?services=Ghost&container=true&limit=8\\\"></script>\\n\"}]],\"markups\":[[\"a\",[\"href\",\"https://zapier.com\"]],[\"strong\"],[\"a\",[\"href\",\"https://ghost.org/docs/api/handlebars-themes/\"]],[\"em\"],[\"a\",[\"href\",\"https://ghost.org/integrations/disqus/\"]],[\"a\",[\"href\",\"https://ghost.org/integrations/discourse/\"]],[\"a\",[\"href\",\"https://ghost.org/integrations/\"]],[\"a\",[\"href\",\"https://prismjs.com/\"]],[\"a\",[\"href\",\"https://www.google.com/forms/\"]],[\"a\",[\"href\",\"https://www.typeform.com/\"]],[\"a\",[\"href\",\"https://ghost.org/docs/api/\"]],[\"a\",[\"href\",\"/themes/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"There are three primary ways to work with third-party services in Ghost: using Zapier, editing your theme, or using the Ghost API.\"]]],[1,\"h1\",[[0,[],0,\"Zapier\"]]],[1,\"p\",[[0,[],0,\"You can connect your Ghost site to over 1,000 external services using the official integration with \"],[0,[0],1,\"Zapier\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Zapier sets up automations with Triggers and Actions, which allows you to create and customise a wide range of connected applications.\"]]],[1,\"blockquote\",[[0,[1],1,\"Example\"],[0,[],0,\": When someone new subscribes to a newsletter on a Ghost site (Trigger) then the contact information is automatically pushed into MailChimp (Action).\"]]],[1,\"p\",[[0,[1],1,\"Here are the most popular Ghost<>Zapier automation templates:\"],[0,[],0,\" \"]]],[10,0],[1,\"h1\",[[0,[],0,\"Editing your theme\"]]],[1,\"p\",[[0,[],0,\"One of the biggest advantages of using Ghost over centralised platforms is that you have total control over the front end of your site. Either customise your existing theme, or create a new theme from scratch with our \"],[0,[2],1,\"Theme SDK\"],[0,[],0,\". \"]]],[1,\"p\",[[0,[],0,\"You can integrate \"],[0,[3],1,\"any\"],[0,[],0,\" front end code into a Ghost theme without restriction, and it will work just fine. No restrictions!\"]]],[1,\"p\",[[0,[1],1,\"Here are some common examples\"],[0,[],0,\":\"]]],[3,\"ul\",[[[0,[],0,\"Include comments on a Ghost blog with \"],[0,[4],1,\"Disqus\"],[0,[],0,\" or \"],[0,[5],1,\"Discourse\"]],[[0,[],0,\"Implement \"],[0,[6],1,\"MathJAX\"],[0,[],0,\" with a little bit of JavaScript\"]],[[0,[],0,\"Add syntax highlighting to your code snippets using \"],[0,[7],1,\"Prism.js\"]],[[0,[],0,\"Integrate any dynamic forms from \"],[0,[8],1,\"Google\"],[0,[],0,\" or \"],[0,[9],1,\"Typeform\"],[0,[],0,\" to capture data\"]],[[0,[],0,\"Just about anything which uses JavaScript, APIs and Markup.\"]]]],[1,\"h1\",[[0,[],0,\"Using the Public API\"]]],[1,\"p\",[[0,[],0,\"Ghost itself is driven by a set of core APIs, and so you can access the Public Ghost JSON API from external webpages or applications in order to pull data and display it in other places.\"]]],[1,\"blockquote\",[[0,[],0,\"The Ghost API is \"],[0,[10],1,\"thoroughly documented\"],[0,[],0,\" and straightforward to work with for developers of almost any level. \"]]],[1,\"p\",[[0,[],0,\"Alright, the last post in our welcome-series! If you're curious about creating your own Ghost theme from scratch, here are \"],[0,[11],1,\"some more details\"],[0,[],0,\" on how that works.\"]]]]}","html":"<p>There are three primary ways to work with third-party services in Ghost: using Zapier, editing your theme, or using the Ghost API.</p><h1 id=\"zapier\">Zapier</h1><p>You can connect your Ghost site to over 1,000 external services using the official integration with <a href=\"https://zapier.com\">Zapier</a>.</p><p>Zapier sets up automations with Triggers and Actions, which allows you to create and customise a wide range of connected applications.</p><blockquote><strong>Example</strong>: When someone new subscribes to a newsletter on a Ghost site (Trigger) then the contact information is automatically pushed into MailChimp (Action).</blockquote><p><strong>Here are the most popular Ghost&lt;&gt;Zapier automation templates:</strong> </p><!--kg-card-begin: markdown--><script src=\"https://zapier.com/apps/embed/widget.js?services=Ghost&container=true&limit=8\"></script>\n<!--kg-card-end: markdown--><h1 id=\"editing-your-theme\">Editing your theme</h1><p>One of the biggest advantages of using Ghost over centralised platforms is that you have total control over the front end of your site. Either customise your existing theme, or create a new theme from scratch with our <a href=\"https://ghost.org/docs/api/handlebars-themes/\">Theme SDK</a>. </p><p>You can integrate <em>any</em> front end code into a Ghost theme without restriction, and it will work just fine. No restrictions!</p><p><strong>Here are some common examples</strong>:</p><ul><li>Include comments on a Ghost blog with <a href=\"https://ghost.org/integrations/disqus/\">Disqus</a> or <a href=\"https://ghost.org/integrations/discourse/\">Discourse</a></li><li>Implement <a href=\"https://ghost.org/integrations/\">MathJAX</a> with a little bit of JavaScript</li><li>Add syntax highlighting to your code snippets using <a href=\"https://prismjs.com/\">Prism.js</a></li><li>Integrate any dynamic forms from <a href=\"https://www.google.com/forms/\">Google</a> or <a href=\"https://www.typeform.com/\">Typeform</a> to capture data</li><li>Just about anything which uses JavaScript, APIs and Markup.</li></ul><h1 id=\"using-the-public-api\">Using the Public API</h1><p>Ghost itself is driven by a set of core APIs, and so you can access the Public Ghost JSON API from external webpages or applications in order to pull data and display it in other places.</p><blockquote>The Ghost API is <a href=\"https://ghost.org/docs/api/\">thoroughly documented</a> and straightforward to work with for developers of almost any level. </blockquote><p>Alright, the last post in our welcome-series! If you're curious about creating your own Ghost theme from scratch, here are <a href=\"/themes/\">some more details</a> on how that works.</p>","comment_id":"5d67d70df39f3138839c4285","plaintext":"There are three primary ways to work with third-party services in Ghost: using\nZapier, editing your theme, or using the Ghost API.\n\nZapier\nYou can connect your Ghost site to over 1,000 external services using the\nofficial integration with Zapier [https://zapier.com].\n\nZapier sets up automations with Triggers and Actions, which allows you to create\nand customise a wide range of connected applications.\n\n> Example: When someone new subscribes to a newsletter on a Ghost site (Trigger)\nthen the contact information is automatically pushed into MailChimp (Action).\nHere are the most popular Ghost<>Zapier automation templates: \n\nEditing your theme\nOne of the biggest advantages of using Ghost over centralised platforms is that\nyou have total control over the front end of your site. Either customise your\nexisting theme, or create a new theme from scratch with our Theme SDK\n[https://ghost.org/docs/api/handlebars-themes/]. \n\nYou can integrate any front end code into a Ghost theme without restriction, and\nit will work just fine. No restrictions!\n\nHere are some common examples:\n\n * Include comments on a Ghost blog with Disqus\n   [https://ghost.org/integrations/disqus/] or Discourse\n   [https://ghost.org/integrations/discourse/]\n * Implement MathJAX [https://ghost.org/integrations/] with a little bit of\n   JavaScript\n * Add syntax highlighting to your code snippets using Prism.js\n   [https://prismjs.com/]\n * Integrate any dynamic forms from Google [https://www.google.com/forms/] or \n   Typeform [https://www.typeform.com/] to capture data\n * Just about anything which uses JavaScript, APIs and Markup.\n\nUsing the Public API\nGhost itself is driven by a set of core APIs, and so you can access the Public\nGhost JSON API from external webpages or applications in order to pull data and\ndisplay it in other places.\n\n> The Ghost API is thoroughly documented [https://ghost.org/docs/api/] and\nstraightforward to work with for developers of almost any level. \nAlright, the last post in our welcome-series! If you're curious about creating\nyour own Ghost theme from scratch, here are some more details [/themes/] on how\nthat works.","feature_image":"https://static.ghost.org/v2.0.0/images/app-integrations.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:50","custom_excerpt":"There are three primary ways to work with third-party services in Ghost: using Zapier, editing your theme, or using the Ghost API.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c4287","uuid":"9a0553cc-4fa4-4692-ba60-a36245e4c4da","title":"Organising your content","slug":"organising-content","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[],\"markups\":[[\"strong\"],[\"code\"],[\"em\"],[\"a\",[\"href\",\"https://ghost.org/docs/api/handlebars-themes/\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html\",\"rel\",\"noreferrer nofollow noopener\"]],[\"a\",[\"href\",\"https://ghost.org/docs/api/handlebars-themes/routing/\"]],[\"a\",[\"href\",\"/apps-integrations/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Ghost has a flexible organisational taxonomy called\"],[0,[0],1,\" tags\"],[0,[],0,\" which can be used to configure your site structure using \"],[0,[0],1,\"dynamic routing\"],[0,[],0,\". \"]]],[1,\"h1\",[[0,[],0,\"Basic Tagging\"]]],[1,\"p\",[[0,[],0,\"You can think of tags like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.\"]]],[1,\"p\",[[0,[],0,\"When you create content for your publication you can assign tags to help differentiate between categories of content. \"]]],[1,\"p\",[[0,[],0,\"For example you may tag some content with  News and other content with Podcast, which would create two distinct categories of content listed on \"],[0,[1],1,\"/tag/news/\"],[0,[],0,\" and \"],[0,[1],1,\"/tag/weather/\"],[0,[],0,\", respectively.\"]]],[1,\"p\",[[0,[],0,\"If you tag a post with both \"],[0,[1],1,\"News\"],[0,[],0,\" \"],[0,[2],1,\"and\"],[0,[],0,\" \"],[0,[1],1,\"Weather\"],[0,[],0,\" - then it appears in both sections. Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.\"]]],[1,\"h1\",[[0,[],0,\"The primary tag\"]]],[1,\"p\",[[0,[],0,\"Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. \"]]],[1,\"blockquote\",[[0,[2,0],1,\"News\"],[0,[],1,\", Technology, Startup\"]]],[1,\"p\",[[0,[],0,\"So you can add the most important tag which you want to show up in your theme, but also add related tags which are less important.\"]]],[1,\"h1\",[[0,[],0,\"Private tags\"]]],[1,\"p\",[[0,[],0,\"Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.\"]]],[1,\"p\",[[0,[],0,\"For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.\"]]],[1,\"blockquote\",[[0,[2,0],1,\"News\"],[0,[],1,\", #video\"]]],[1,\"p\",[[0,[],0,\"Here, the theme would assign the post publicly displayed tags of News - but it would also keep a private record of the post being tagged with #video. In your theme, you could then look for private tags conditionally and give them special formatting. \"]]],[1,\"blockquote\",[[0,[2],0,\"You can find documentation for theme development techniques like this and many more over on Ghost's extensive \"],[0,[3],1,\"theme documentation\"],[0,[],1,\".\"]]],[1,\"h1\",[[0,[],0,\"Dynamic Routing\"]]],[1,\"p\",[[0,[],0,\"Dynamic routing gives you the ultimate freedom to build a custom publication to suit your needs. Routes are rules that map URL patterns to your content and templates. \"]]],[1,\"p\",[[0,[],0,\"For example, you may not want content tagged with \"],[0,[1],1,\"News\"],[0,[],0,\" to exist on: \"],[0,[1],1,\"example.com/tag/news\"],[0,[],0,\". Instead, you want it to exist on \"],[0,[1],1,\"example.com/news\"],[0,[],0,\" . \"]]],[1,\"p\",[[0,[],0,\"In this case you can use dynamic routes to create customised collections of content on your site. It's also possible to use multiple templates in your theme to render each content type differently.\"]]],[1,\"p\",[[0,[],0,\"There are lots of use cases for dynamic routing with Ghost, here are a few common examples: \"]]],[3,\"ul\",[[[0,[],0,\"Setting a custom home page with its own template\"]],[[0,[],0,\"Having separate content hubs for blog and podcast, that render differently, and have custom RSS feeds to support two types of content\"]],[[0,[],0,\"Creating a founders column as a unique view, by filtering content created by specific authors\"]],[[0,[],0,\"Including dates in permalinks for your posts\"]],[[0,[],0,\"Setting posts to have a URL relative to their primary tag like \"],[0,[1],1,\"example.com/europe/story-title/\"],[1,[],0,0]]]],[1,\"blockquote\",[[0,[2],0,\"Dynamic routing can be configured in Ghost using \"],[0,[4],1,\"YAML\"],[0,[],0,\" files. Read our dynamic routing \"],[0,[5],1,\"documentation\"],[0,[],1,\" for further details.\"]]],[1,\"p\",[[0,[],0,\"You can further customise your site using \"],[0,[6],1,\"Apps & Integrations\"],[0,[],0,\".\"]]]]}","html":"<p>Ghost has a flexible organisational taxonomy called<strong> tags</strong> which can be used to configure your site structure using <strong>dynamic routing</strong>. </p><h1 id=\"basic-tagging\">Basic Tagging</h1><p>You can think of tags like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.</p><p>When you create content for your publication you can assign tags to help differentiate between categories of content. </p><p>For example you may tag some content with  News and other content with Podcast, which would create two distinct categories of content listed on <code>/tag/news/</code> and <code>/tag/weather/</code>, respectively.</p><p>If you tag a post with both <code>News</code> <em>and</em> <code>Weather</code> - then it appears in both sections. Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.</p><h1 id=\"the-primary-tag\">The primary tag</h1><p>Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. </p><blockquote><em><strong>News</strong>, Technology, Startup</em></blockquote><p>So you can add the most important tag which you want to show up in your theme, but also add related tags which are less important.</p><h1 id=\"private-tags\">Private tags</h1><p>Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.</p><p>For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.</p><blockquote><em><strong>News</strong>, #video</em></blockquote><p>Here, the theme would assign the post publicly displayed tags of News - but it would also keep a private record of the post being tagged with #video. In your theme, you could then look for private tags conditionally and give them special formatting. </p><blockquote><em>You can find documentation for theme development techniques like this and many more over on Ghost's extensive <a href=\"https://ghost.org/docs/api/handlebars-themes/\">theme documentation</a>.</em></blockquote><h1 id=\"dynamic-routing\">Dynamic Routing</h1><p>Dynamic routing gives you the ultimate freedom to build a custom publication to suit your needs. Routes are rules that map URL patterns to your content and templates. </p><p>For example, you may not want content tagged with <code>News</code> to exist on: <code>example.com/tag/news</code>. Instead, you want it to exist on <code>example.com/news</code> . </p><p>In this case you can use dynamic routes to create customised collections of content on your site. It's also possible to use multiple templates in your theme to render each content type differently.</p><p>There are lots of use cases for dynamic routing with Ghost, here are a few common examples: </p><ul><li>Setting a custom home page with its own template</li><li>Having separate content hubs for blog and podcast, that render differently, and have custom RSS feeds to support two types of content</li><li>Creating a founders column as a unique view, by filtering content created by specific authors</li><li>Including dates in permalinks for your posts</li><li>Setting posts to have a URL relative to their primary tag like <code>example.com/europe/story-title/</code><br></li></ul><blockquote><em>Dynamic routing can be configured in Ghost using <a href=\"http://yaml.org/spec/1.2/spec.html\" rel=\"noreferrer nofollow noopener\">YAML</a> files. Read our dynamic routing <a href=\"https://ghost.org/docs/api/handlebars-themes/routing/\">documentation</a> for further details.</em></blockquote><p>You can further customise your site using <a href=\"/apps-integrations/\">Apps &amp; Integrations</a>.</p>","comment_id":"5d67d70df39f3138839c4287","plaintext":"Ghost has a flexible organisational taxonomy called tags which can be used to\nconfigure your site structure using dynamic routing. \n\nBasic Tagging\nYou can think of tags like Gmail labels. By tagging posts with one or more\nkeyword, you can organise articles into buckets of related content.\n\nWhen you create content for your publication you can assign tags to help\ndifferentiate between categories of content. \n\nFor example you may tag some content with  News and other content with Podcast,\nwhich would create two distinct categories of content listed on /tag/news/ and \n/tag/weather/, respectively.\n\nIf you tag a post with both News and Weather - then it appears in both sections.\nTag archives are like dedicated home-pages for each category of content that you\nhave. They have their own pages, their own RSS feeds, and can support their own\ncover images and meta data.\n\nThe primary tag\nInside the Ghost editor, you can drag and drop tags into a specific order. The\nfirst tag in the list is always given the most importance, and some themes will\nonly display the primary tag (the first tag in the list) by default. \n\n> News, Technology, Startup\nSo you can add the most important tag which you want to show up in your theme,\nbut also add related tags which are less important.\n\nPrivate tags\nSometimes you may want to assign a post a specific tag, but you don't\nnecessarily want that tag appearing in the theme or creating an archive page. In\nGhost, hashtags are private and can be used for special styling.\n\nFor example, if you sometimes publish posts with video content - you might want\nyour theme to adapt and get rid of the sidebar for these posts, to give more\nspace for an embedded video to fill the screen. In this case, you could use\nprivate tags to tell your theme what to do.\n\n> News, #video\nHere, the theme would assign the post publicly displayed tags of News - but it\nwould also keep a private record of the post being tagged with #video. In your\ntheme, you could then look for private tags conditionally and give them special\nformatting. \n\n> You can find documentation for theme development techniques like this and many\nmore over on Ghost's extensive theme documentation\n[https://ghost.org/docs/api/handlebars-themes/].\nDynamic Routing\nDynamic routing gives you the ultimate freedom to build a custom publication to\nsuit your needs. Routes are rules that map URL patterns to your content and\ntemplates. \n\nFor example, you may not want content tagged with News to exist on: \nexample.com/tag/news. Instead, you want it to exist on example.com/news . \n\nIn this case you can use dynamic routes to create customised collections of\ncontent on your site. It's also possible to use multiple templates in your theme\nto render each content type differently.\n\nThere are lots of use cases for dynamic routing with Ghost, here are a few\ncommon examples: \n\n * Setting a custom home page with its own template\n * Having separate content hubs for blog and podcast, that render differently,\n   and have custom RSS feeds to support two types of content\n * Creating a founders column as a unique view, by filtering content created by\n   specific authors\n * Including dates in permalinks for your posts\n * Setting posts to have a URL relative to their primary tag like \n   example.com/europe/story-title/\n   \n\n> Dynamic routing can be configured in Ghost using YAML\n[http://yaml.org/spec/1.2/spec.html] files. Read our dynamic routing \ndocumentation [https://ghost.org/docs/api/handlebars-themes/routing/] for\nfurther details.\nYou can further customise your site using Apps & Integrations\n[/apps-integrations/].","feature_image":"https://static.ghost.org/v2.0.0/images/organising-your-content.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:51","custom_excerpt":"Ghost has a flexible organisational taxonomy called tags which can be used to configure your site structure using dynamic routing.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c4289","uuid":"7c2d8ae4-45b7-4072-b8ce-3d902ab35b62","title":"Managing admin settings","slug":"admin-settings","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v1.0.0/images/private.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"/ghost/settings/general/\"]],[\"em\"],[\"strong\"],[\"a\",[\"href\",\"https://ghost.org/pricing/\"]],[\"a\",[\"href\",\"/organising-content/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"There are a couple of things to do next while you're getting set up:\"]]],[1,\"h1\",[[0,[],0,\"Make your site private\"]]],[1,\"p\",[[0,[],0,\"If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a basic shared pass-phrase.\"]]],[1,\"p\",[[0,[],0,\"You can toggle this preference on at the bottom of Ghost's \"],[0,[0],1,\"General Settings\"],[0,[],0,\":\"]]],[10,0],[1,\"p\",[[0,[],0,\"Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep your site under the radar.\"]]],[1,\"p\",[[0,[],0,\"Do remember though, this is \"],[0,[1],1,\"not\"],[0,[],0,\" secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for some very basic privacy.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"Invite your team \"]]],[1,\"p\",[[0,[],0,\"Ghost has a number of different user roles for your team:\"]]],[1,\"p\",[[0,[2],1,\"Contributors\"],[1,[],0,0],[0,[],0,\"This is the base user level in Ghost. Contributors can create and edit their own draft posts, but they are unable to edit drafts of others or publish posts. Contributors are \"],[0,[2],1,\"untrusted\"],[0,[],0,\" users with the most basic access to your publication.\"]]],[1,\"p\",[[0,[2],1,\"Authors\"],[1,[],0,1],[0,[],0,\"Authors are the 2nd user level in Ghost. Authors can write, edit  and publish their own posts. Authors are \"],[0,[2],1,\"trusted\"],[0,[],0,\" users. If you don't trust users to be allowed to publish their own posts, they should be set as Contributors.\"]]],[1,\"p\",[[0,[2],1,\"Editors\"],[1,[],0,2],[0,[],0,\"Editors are the 3rd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new Contributors+Authors to the site.\"]]],[1,\"p\",[[0,[2],1,\"Administrators\"],[1,[],0,3],[0,[],0,\"The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.\"],[1,[],0,4],[1,[],0,5],[0,[2],1,\"The Owner\"],[1,[],0,6],[0,[],0,\"There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable. For example: billing details, if using \"],[0,[3,2],2,\"Ghost(Pro)\"],[0,[],0,\".\"]]],[1,\"blockquote\",[[0,[1],1,\"It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.\"]]],[1,\"p\",[[0,[],0,\"Next up: \"],[0,[4],1,\"Organising your content\"],[0,[],0,\" \"]]]]}","html":"<p>There are a couple of things to do next while you're getting set up:</p><h1 id=\"make-your-site-private\">Make your site private</h1><p>If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a basic shared pass-phrase.</p><p>You can toggle this preference on at the bottom of Ghost's <a href=\"/ghost/settings/general/\">General Settings</a>:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://static.ghost.org/v1.0.0/images/private.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep your site under the radar.</p><p>Do remember though, this is <em>not</em> secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for some very basic privacy.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><h1 id=\"invite-your-team\">Invite your team </h1><p>Ghost has a number of different user roles for your team:</p><p><strong>Contributors</strong><br>This is the base user level in Ghost. Contributors can create and edit their own draft posts, but they are unable to edit drafts of others or publish posts. Contributors are <strong>untrusted</strong> users with the most basic access to your publication.</p><p><strong>Authors</strong><br>Authors are the 2nd user level in Ghost. Authors can write, edit  and publish their own posts. Authors are <strong>trusted</strong> users. If you don't trust users to be allowed to publish their own posts, they should be set as Contributors.</p><p><strong>Editors</strong><br>Editors are the 3rd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new Contributors+Authors to the site.</p><p><strong>Administrators</strong><br>The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.<br><br><strong>The Owner</strong><br>There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable. For example: billing details, if using <a href=\"https://ghost.org/pricing/\"><strong>Ghost(Pro)</strong></a>.</p><blockquote><em>It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.</em></blockquote><p>Next up: <a href=\"/organising-content/\">Organising your content</a> </p>","comment_id":"5d67d70df39f3138839c4289","plaintext":"There are a couple of things to do next while you're getting set up:\n\nMake your site private\nIf you've got a publication that you don't want the world to see yet because\nit's not ready to launch, you can hide your Ghost site behind a basic shared\npass-phrase.\n\nYou can toggle this preference on at the bottom of Ghost's General Settings\n[/ghost/settings/general/]:\n\nGhost will give you a short, randomly generated pass-phrase which you can share\nwith anyone who needs access to the site while you're working on it. While this\nsetting is enabled, all search engine optimisation features will be switched off\nto help keep your site under the radar.\n\nDo remember though, this is not secure authentication. You shouldn't rely on\nthis feature for protecting important private data. It's just a simple, shared\npass-phrase for some very basic privacy.\n\n\n--------------------------------------------------------------------------------\n\nInvite your team \nGhost has a number of different user roles for your team:\n\nContributors\nThis is the base user level in Ghost. Contributors can create and edit their own\ndraft posts, but they are unable to edit drafts of others or publish posts.\nContributors are untrusted users with the most basic access to your publication.\n\nAuthors\nAuthors are the 2nd user level in Ghost. Authors can write, edit  and publish\ntheir own posts. Authors are trusted users. If you don't trust users to be\nallowed to publish their own posts, they should be set as Contributors.\n\nEditors\nEditors are the 3rd user level in Ghost. Editors can do everything that an\nAuthor can do, but they can also edit and publish the posts of others - as well\nas their own. Editors can also invite new Contributors+Authors to the site.\n\nAdministrators\nThe top user level in Ghost is Administrator. Again, administrators can do\neverything that Authors and Editors can do, but they can also edit all site\nsettings and data, not just content. Additionally, administrators have full\naccess to invite, manage or remove any other user of the site.\n\nThe Owner\nThere is only ever one owner of a Ghost site. The owner is a special user which\nhas all the same permissions as an Administrator, but with two exceptions: The\nOwner can never be deleted. And in some circumstances the owner will have access\nto additional special settings if applicable. For example: billing details, if\nusing Ghost(Pro) [https://ghost.org/pricing/].\n\n> It's a good idea to ask all of your users to fill out their user profiles,\nincluding bio and social links. These will populate rich structured data for\nposts and generally create more opportunities for themes to fully populate their\ndesign.\nNext up: Organising your content [/organising-content/]","feature_image":"https://static.ghost.org/v2.0.0/images/admin-settings.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:52","custom_excerpt":"There are a couple of things to do next while you're getting set up: making your site private and inviting your team.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c428b","uuid":"e57d9e82-776d-475a-8fcb-5af60569ae2e","title":"Publishing options","slug":"publishing-options","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"{\\n    \\\"@context\\\": \\\"https://schema.org\\\",\\n    \\\"@type\\\": \\\"Article\\\",\\n    \\\"publisher\\\": {\\n        \\\"@type\\\": \\\"Organization\\\",\\n        \\\"name\\\": \\\"Publishing options\\\",\\n        \\\"logo\\\": \\\"https://static.ghost.org/ghost-logo.svg\\\"\\n    },\\n    \\\"author\\\": {\\n        \\\"@type\\\": \\\"Person\\\",\\n        \\\"name\\\": \\\"Ghost\\\",\\n        \\\"url\\\": \\\"http://demo.ghost.io/author/ghost/\\\",\\n        \\\"sameAs\\\": []\\n    },\\n    \\\"headline\\\": \\\"Publishing options\\\",\\n    \\\"url\\\": \\\"http://demo.ghost.io/publishing-options\\\",\\n    \\\"datePublished\\\": \\\"2018-08-08T11:44:00.000Z\\\",\\n    \\\"dateModified\\\": \\\"2018-08-09T12:06:21.000Z\\\",\\n    \\\"keywords\\\": \\\"Getting Started\\\",\\n    \\\"description\\\": \\\"The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.\\\",\\n    }\\n}\\n    \"}]],\"markups\":[[\"a\",[\"href\",\"https://schema.org/\"]],[\"a\",[\"href\",\"https://search.google.com/structured-data/testing-tool\",\"rel\",\"noreferrer nofollow noopener\"]],[\"strong\"],[\"a\",[\"href\",\"/ghost/settings/code-injection/\"]],[\"a\",[\"href\",\"/admin-settings/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page. \"]]],[1,\"blockquote\",[[0,[],0,\"Access the post settings menu in the top right hand corner of the editor. \"]]],[1,\"h2\",[[0,[],0,\"Post feature image\"]]],[1,\"p\",[[0,[],0,\"Insert your post feature image from the very top of the post settings menu. Consider resizing or optimising your image first to ensure it's an appropriate size.\"]]],[1,\"h2\",[[0,[],0,\"Structured data & SEO\"]]],[1,\"p\",[[0,[],0,\"Customise your social media sharing cards for Facebook and Twitter, enabling you to add custom images, titles and descriptions for social media.\"]]],[1,\"p\",[[0,[],0,\"There’s no need to hard code your meta data. You can set your meta title and description using the post settings tool, which has a handy character guide and SERP preview. \"]]],[1,\"p\",[[0,[],0,\"Ghost will automatically implement structured data for your publication using JSON-LD to further optimise your content.\"]]],[10,0],[1,\"p\",[[0,[],0,\"You can test that the structured data \"],[0,[0],1,\"schema\"],[0,[],0,\" on your site is working as it should using \"],[0,[1],1,\"Google’s structured data tool\"],[0,[],0,\". \"]]],[1,\"h2\",[[0,[],0,\"Code Injection\"]]],[1,\"p\",[[0,[],0,\"This tool allows you to inject code on a per post or page basis, or across your entire site. This means you can modify CSS, add unique tracking codes, or add other scripts to the head or foot of your publication without making edits to your theme files. \"]]],[1,\"p\",[[0,[2],1,\"To add code site-wide\"],[0,[],0,\", use the code injection tool \"],[0,[3],1,\"in the main admin menu\"],[0,[],0,\". This is useful for adding a Facebook Pixel, a Google Analytics tracking code, or to start tracking with any other analytics tool.\"]]],[1,\"p\",[[0,[2],1,\"To add code to a post or page\"],[0,[],0,\", use the code injection tool within the post settings menu. This is useful if you want to add art direction, scripts or styles that are only applicable to one post or page. \"]]],[1,\"p\",[[0,[],0,\"From here, you might be interested in managing some more specific \"],[0,[4],1,\"admin settings\"],[0,[],0,\"!\"]]]]}","html":"<p>The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page. </p><blockquote>Access the post settings menu in the top right hand corner of the editor. </blockquote><h2 id=\"post-feature-image\">Post feature image</h2><p>Insert your post feature image from the very top of the post settings menu. Consider resizing or optimising your image first to ensure it's an appropriate size.</p><h2 id=\"structured-data-seo\">Structured data &amp; SEO</h2><p>Customise your social media sharing cards for Facebook and Twitter, enabling you to add custom images, titles and descriptions for social media.</p><p>There’s no need to hard code your meta data. You can set your meta title and description using the post settings tool, which has a handy character guide and SERP preview. </p><p>Ghost will automatically implement structured data for your publication using JSON-LD to further optimise your content.</p><!--kg-card-begin: code--><pre><code>{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Article\",\n    \"publisher\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Publishing options\",\n        \"logo\": \"https://static.ghost.org/ghost-logo.svg\"\n    },\n    \"author\": {\n        \"@type\": \"Person\",\n        \"name\": \"Ghost\",\n        \"url\": \"http://demo.ghost.io/author/ghost/\",\n        \"sameAs\": []\n    },\n    \"headline\": \"Publishing options\",\n    \"url\": \"http://demo.ghost.io/publishing-options\",\n    \"datePublished\": \"2018-08-08T11:44:00.000Z\",\n    \"dateModified\": \"2018-08-09T12:06:21.000Z\",\n    \"keywords\": \"Getting Started\",\n    \"description\": \"The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.\",\n    }\n}\n    </code></pre><!--kg-card-end: code--><p>You can test that the structured data <a href=\"https://schema.org/\">schema</a> on your site is working as it should using <a href=\"https://search.google.com/structured-data/testing-tool\" rel=\"noreferrer nofollow noopener\">Google’s structured data tool</a>. </p><h2 id=\"code-injection\">Code Injection</h2><p>This tool allows you to inject code on a per post or page basis, or across your entire site. This means you can modify CSS, add unique tracking codes, or add other scripts to the head or foot of your publication without making edits to your theme files. </p><p><strong>To add code site-wide</strong>, use the code injection tool <a href=\"/ghost/settings/code-injection/\">in the main admin menu</a>. This is useful for adding a Facebook Pixel, a Google Analytics tracking code, or to start tracking with any other analytics tool.</p><p><strong>To add code to a post or page</strong>, use the code injection tool within the post settings menu. This is useful if you want to add art direction, scripts or styles that are only applicable to one post or page. </p><p>From here, you might be interested in managing some more specific <a href=\"/admin-settings/\">admin settings</a>!</p>","comment_id":"5d67d70df39f3138839c428b","plaintext":"The Ghost editor has everything you need to fully optimise your content. This is\nwhere you can add tags and authors, feature a post, or turn a post into a page. \n\n> Access the post settings menu in the top right hand corner of the editor. \nPost feature image\nInsert your post feature image from the very top of the post settings menu.\nConsider resizing or optimising your image first to ensure it's an appropriate\nsize.\n\nStructured data & SEO\nCustomise your social media sharing cards for Facebook and Twitter, enabling you\nto add custom images, titles and descriptions for social media.\n\nThere’s no need to hard code your meta data. You can set your meta title and\ndescription using the post settings tool, which has a handy character guide and\nSERP preview. \n\nGhost will automatically implement structured data for your publication using\nJSON-LD to further optimise your content.\n\n{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Article\",\n    \"publisher\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Publishing options\",\n        \"logo\": \"https://static.ghost.org/ghost-logo.svg\"\n    },\n    \"author\": {\n        \"@type\": \"Person\",\n        \"name\": \"Ghost\",\n        \"url\": \"http://demo.ghost.io/author/ghost/\",\n        \"sameAs\": []\n    },\n    \"headline\": \"Publishing options\",\n    \"url\": \"http://demo.ghost.io/publishing-options\",\n    \"datePublished\": \"2018-08-08T11:44:00.000Z\",\n    \"dateModified\": \"2018-08-09T12:06:21.000Z\",\n    \"keywords\": \"Getting Started\",\n    \"description\": \"The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.\",\n    }\n}\n    \n\nYou can test that the structured data schema [https://schema.org/] on your site\nis working as it should using Google’s structured data tool\n[https://search.google.com/structured-data/testing-tool]. \n\nCode Injection\nThis tool allows you to inject code on a per post or page basis, or across your\nentire site. This means you can modify CSS, add unique tracking codes, or add\nother scripts to the head or foot of your publication without making edits to\nyour theme files. \n\nTo add code site-wide, use the code injection tool in the main admin menu\n[/ghost/settings/code-injection/]. This is useful for adding a Facebook Pixel, a\nGoogle Analytics tracking code, or to start tracking with any other analytics\ntool.\n\nTo add code to a post or page, use the code injection tool within the post\nsettings menu. This is useful if you want to add art direction, scripts or\nstyles that are only applicable to one post or page. \n\nFrom here, you might be interested in managing some more specific admin settings\n[/admin-settings/]!","feature_image":"https://static.ghost.org/v2.0.0/images/publishing-options.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:53","custom_excerpt":"The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c428d","uuid":"2aee7a78-aa88-4488-99be-2c0ccd499b49","title":"Writing posts with Ghost ✍️","slug":"the-editor","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v2.0.0/images/formatting-editor-demo.gif\"}],[\"code\",{\"code\":\"<header class=\\\"site-header outer\\\">\\n    <div class=\\\"inner\\\">\\n        {{> \\\"site-nav\\\"}}\\n    </div>\\n</header>\"}],[\"image\",{\"src\":\"https://static.ghost.org/v2.0.0/images/using-images-demo.gif\"}]],\"markups\":[[\"strong\"],[\"code\"],[\"a\",[\"href\",\"/publishing-options/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Ghost has a powerful visual editor with familiar formatting options, as well as the ability to seamlessly add dynamic content. \"]]],[1,\"p\",[[0,[],0,\"Select the text to add formatting, headers or create links, or use Markdown shortcuts to do the work for you - if that's your thing. \"]]],[10,0],[1,\"h2\",[[0,[],0,\"Rich editing at your fingertips\"]]],[1,\"p\",[[0,[],0,\"The editor can also handle rich media objects, called \"],[0,[0],1,\"cards\"],[0,[],0,\". \"]]],[1,\"p\",[[0,[],0,\"You can insert a card either by clicking the  \"],[0,[1],1,\"+\"],[0,[],0,\"  button on a new line, or typing  \"],[0,[1],1,\"/\"],[0,[],0,\"  on a new line to search for a particular card. This allows you to efficiently insert\"],[0,[0],1,\" images\"],[0,[],0,\", \"],[0,[0],1,\"markdown\"],[0,[],0,\", \"],[0,[0],1,\"html\"],[0,[],0,\" and \"],[0,[0],1,\"embeds\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[0],1,\"For Example\"],[0,[],0,\":\"]]],[3,\"ul\",[[[0,[],0,\"Insert a video from YouTube directly into your content by pasting the URL \"]],[[0,[],0,\"Create unique content like a button or content opt-in using the HTML card\"]],[[0,[],0,\"Need to share some code? Embed code blocks directly \"]]]],[10,1],[1,\"h1\",[[0,[],0,\"Working with images in posts\"]]],[1,\"p\",[[0,[],0,\"You can add images to your posts in many ways:\"]]],[3,\"ul\",[[[0,[],0,\"Upload from your computer\"]],[[0,[],0,\"Click and drag an image into the browser\"]],[[0,[],0,\"Paste directly into the editor from your clipboard\"]],[[0,[],0,\"Insert using a URL\"]]]],[1,\"p\",[[0,[],0,\"Once inserted you can blend images beautifully into your content at different sizes and add captions wherever needed.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The post settings menu and publishing options can be found in the top right hand corner. For more advanced tips on post settings check out the \"],[0,[2],1,\"publishing options\"],[0,[],0,\" post!\"]]],[1,\"p\",[]]]}","html":"<p>Ghost has a powerful visual editor with familiar formatting options, as well as the ability to seamlessly add dynamic content. </p><p>Select the text to add formatting, headers or create links, or use Markdown shortcuts to do the work for you - if that's your thing. </p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://static.ghost.org/v2.0.0/images/formatting-editor-demo.gif\" class=\"kg-image\"></figure><!--kg-card-end: image--><h2 id=\"rich-editing-at-your-fingertips\">Rich editing at your fingertips</h2><p>The editor can also handle rich media objects, called <strong>cards</strong>. </p><p>You can insert a card either by clicking the  <code>+</code>  button on a new line, or typing  <code>/</code>  on a new line to search for a particular card. This allows you to efficiently insert<strong> images</strong>, <strong>markdown</strong>, <strong>html</strong> and <strong>embeds</strong>.</p><p><strong>For Example</strong>:</p><ul><li>Insert a video from YouTube directly into your content by pasting the URL </li><li>Create unique content like a button or content opt-in using the HTML card</li><li>Need to share some code? Embed code blocks directly </li></ul><!--kg-card-begin: code--><pre><code>&lt;header class=\"site-header outer\"&gt;\n    &lt;div class=\"inner\"&gt;\n        {{&gt; \"site-nav\"}}\n    &lt;/div&gt;\n&lt;/header&gt;</code></pre><!--kg-card-end: code--><h1 id=\"working-with-images-in-posts\">Working with images in posts</h1><p>You can add images to your posts in many ways:</p><ul><li>Upload from your computer</li><li>Click and drag an image into the browser</li><li>Paste directly into the editor from your clipboard</li><li>Insert using a URL</li></ul><p>Once inserted you can blend images beautifully into your content at different sizes and add captions wherever needed.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://static.ghost.org/v2.0.0/images/using-images-demo.gif\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>The post settings menu and publishing options can be found in the top right hand corner. For more advanced tips on post settings check out the <a href=\"/publishing-options/\">publishing options</a> post!</p>","comment_id":"5d67d70df39f3138839c428d","plaintext":"Ghost has a powerful visual editor with familiar formatting options, as well as\nthe ability to seamlessly add dynamic content. \n\nSelect the text to add formatting, headers or create links, or use Markdown\nshortcuts to do the work for you - if that's your thing. \n\nRich editing at your fingertips\nThe editor can also handle rich media objects, called cards. \n\nYou can insert a card either by clicking the+ button on a new line, or typing/ \non a new line to search for a particular card. This allows you to efficiently\ninsert images, markdown, html and embeds.\n\nFor Example:\n\n * Insert a video from YouTube directly into your content by pasting the URL \n * Create unique content like a button or content opt-in using the HTML card\n * Need to share some code? Embed code blocks directly \n\n<header class=\"site-header outer\">\n    <div class=\"inner\">\n        {{> \"site-nav\"}}\n    </div>\n</header>\n\nWorking with images in posts\nYou can add images to your posts in many ways:\n\n * Upload from your computer\n * Click and drag an image into the browser\n * Paste directly into the editor from your clipboard\n * Insert using a URL\n\nOnce inserted you can blend images beautifully into your content at different\nsizes and add captions wherever needed.\n\nThe post settings menu and publishing options can be found in the top right hand\ncorner. For more advanced tips on post settings check out the publishing options\n[/publishing-options/] post!","feature_image":"https://static.ghost.org/v2.0.0/images/writing-posts-with-ghost.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:54","custom_excerpt":"Getting started with the editor is simple, with familiar formatting options in a functional toolbar and the ability to add dynamic content seamlessly.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d70df39f3138839c428f","uuid":"fef84a76-76b5-4500-b009-0632a7d5de75","title":"Welcome to Ghost","slug":"welcome","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://ghost.org/downloads/\"]],[\"a\",[\"href\",\"https://ghost.org/pricing\"]],[\"a\",[\"href\",\"https://github.com/TryGhost\"]],[\"a\",[\"href\",\"/the-editor/\"]],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"👋 Welcome, it's great to have you here.\"]]],[1,\"p\",[[0,[],0,\"We know that first impressions are important, so we've populated your new site with some initial \"],[0,[0],1,\"getting started\"],[0,[],0,\" posts that will help you get familiar with everything in no time. This is the first one!\"]]],[1,\"p\",[[0,[0],1,\"A few things you should know upfront\"],[0,[],0,\":\"]]],[3,\"ol\",[[[0,[],0,\"Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. \"]],[[0,[],0,\"The entire platform can be modified and customised to suit your needs. It's very powerful, but does require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog. \"]],[[0,[],0,\"For the best experience we recommend downloading the \"],[0,[1],1,\"Ghost Desktop App\"],[0,[],0,\" for your computer, which is the best way to access your Ghost site on a desktop device. \"]]]],[1,\"p\",[[0,[],0,\"Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our \"],[0,[2],1,\"Ghost(Pro)\"],[0,[],0,\" service, and every penny we make is re-invested into funding further development of free, open source technology for modern publishing.\"]]],[1,\"p\",[[0,[],0,\"The version of Ghost you are looking at right now would not have been made possible without generous contributions from the open source \"],[0,[3],1,\"community\"],[0,[],0,\".\"]]],[1,\"h2\",[[0,[],0,\"Next up, the editor\"]]],[1,\"p\",[[0,[],0,\"The main thing you'll want to read about next is probably: \"],[0,[4],1,\"the Ghost editor\"],[0,[],0,\". This is where the good stuff happens.\"]]],[1,\"blockquote\",[[0,[5],0,\"By the way, once you're done reading, you can simply delete the default \"],[0,[0],1,\"Ghost\"],[0,[],1,\" user from your team to remove all of these introductory posts! \"]]]]}","html":"<p>👋 Welcome, it's great to have you here.</p><p>We know that first impressions are important, so we've populated your new site with some initial <strong>getting started</strong> posts that will help you get familiar with everything in no time. This is the first one!</p><p><strong>A few things you should know upfront</strong>:</p><ol><li>Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. </li><li>The entire platform can be modified and customised to suit your needs. It's very powerful, but does require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog. </li><li>For the best experience we recommend downloading the <a href=\"https://ghost.org/downloads/\">Ghost Desktop App</a> for your computer, which is the best way to access your Ghost site on a desktop device. </li></ol><p>Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our <a href=\"https://ghost.org/pricing\">Ghost(Pro)</a> service, and every penny we make is re-invested into funding further development of free, open source technology for modern publishing.</p><p>The version of Ghost you are looking at right now would not have been made possible without generous contributions from the open source <a href=\"https://github.com/TryGhost\">community</a>.</p><h2 id=\"next-up-the-editor\">Next up, the editor</h2><p>The main thing you'll want to read about next is probably: <a href=\"/the-editor/\">the Ghost editor</a>. This is where the good stuff happens.</p><blockquote><em>By the way, once you're done reading, you can simply delete the default <strong>Ghost</strong> user from your team to remove all of these introductory posts! </em></blockquote>","comment_id":"5d67d70df39f3138839c428f","plaintext":"👋 Welcome, it's great to have you here.\n\nWe know that first impressions are important, so we've populated your new site\nwith some initial getting started posts that will help you get familiar with\neverything in no time. This is the first one!\n\nA few things you should know upfront:\n\n 1. Ghost is designed for ambitious, professional publishers who want to\n    actively build a business around their content. That's who it works best\n    for. \n 2. The entire platform can be modified and customised to suit your needs. It's\n    very powerful, but does require some knowledge of code. Ghost is not\n    necessarily a good platform for beginners or people who just want a simple\n    personal blog. \n 3. For the best experience we recommend downloading the Ghost Desktop App\n    [https://ghost.org/downloads/] for your computer, which is the best way to\n    access your Ghost site on a desktop device. \n\nGhost is made by an independent non-profit organisation called the Ghost\nFoundation. We are 100% self funded by revenue from our Ghost(Pro)\n[https://ghost.org/pricing] service, and every penny we make is re-invested into\nfunding further development of free, open source technology for modern\npublishing.\n\nThe version of Ghost you are looking at right now would not have been made\npossible without generous contributions from the open source community\n[https://github.com/TryGhost].\n\nNext up, the editor\nThe main thing you'll want to read about next is probably: the Ghost editor\n[/the-editor/]. This is where the good stuff happens.\n\n> By the way, once you're done reading, you can simply delete the default Ghost \nuser from your team to remove all of these introductory posts!","feature_image":"https://static.ghost.org/v2.0.0/images/welcome-to-ghost.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49","published_at":"2019-08-29 13:45:55","custom_excerpt":"Welcome, it's great to have you here.\nWe know that first impressions are important, so we've populated your new site with some initial getting started posts that will help you get familiar with everything in no time.","codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053a","uuid":"1066b928-d201-4192-a86c-b43ad7617e75","title":"Koenig Demo Post","slug":"v2-demo-post","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"embed\",{\"url\":\"https://twitter.com/TryGhost/status/761119175192420352\",\"html\":\"<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\\\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\\\">August 4, 2016</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\",\"type\":\"rich\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\",\"alt\":\"\",\"caption\":\"A regular size image\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\",\"alt\":\"\",\"cardWidth\":\"full\",\"caption\":\"It's wide\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\",\"alt\":\"\",\"cardWidth\":\"wide\",\"caption\":\"It's wider, but not widest\"}],[\"markdown\",{\"markdown\":\"Markdown content works just the way it always did, **simply** and *beautifully*.\"}],[\"code\",{\"code\":\".new-editor {\\n\\tdisplay: bock;\\n}\"}],[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=CfeQTuGyiqU\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen></iframe>\",\"type\":\"video\"}],[\"html\",{\"html\":\"<div style=\\\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\\\">\\n    <blink>hello world</blink>\\n</div>\"}]],\"markups\":[[\"strong\"],[\"code\"],[\"em\"],[\"a\",[\"href\",\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Hey there! Welcome to the new Ghost editor - affectionately known as \"],[0,[0],1,\"Koenig\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.\"]]],[1,\"p\",[[0,[],0,\"Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"What's new\"]]],[1,\"p\",[[0,[],0,\"The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the \"],[0,[1],1,\"+\"],[0,[],0,\" button on a new line, or typing \"],[0,[1],1,\"/\"],[0,[],0,\" on a new line to search for a particular card. \"]]],[1,\"p\",[[0,[],0,\"Here's one now:\"]]],[10,1],[1,\"p\",[[0,[],0,\"Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!\"]]],[1,\"h2\",[[0,[],0,\"Some examples of possible future cards\"]]],[3,\"ul\",[[[0,[],0,\"A chart card to display dynamic data visualisations\"]],[[0,[],0,\"A recipe card to show a pre-formatted list of ingredients and instructions\"]],[[0,[],0,\"A Mailchimp card to capture new subscribers with a web form\"]],[[0,[],0,\"A recommended reading card to display a dynamic suggested story based on the current user's reading history\"]]]],[1,\"p\",[[0,[],0,\"For now, though, we're just getting started with the basics.\"]]],[1,\"h1\",[[0,[],0,\"New ways to work with images\"]]],[1,\"p\",[[0,[],0,\"Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.\"]]],[1,\"p\",[[0,[],0,\"For instance, here's your plain ol' regular image:\"]]],[10,2],[1,\"p\",[[0,[],0,\"But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:\"]]],[10,3],[1,\"p\",[[0,[],0,\"Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:\"]]],[10,4],[1,\"p\",[[0,[],0,\"Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. \"]]],[1,\"p\",[[0,[],0,\"Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.\"]]],[1,\"p\",[[0,[],0,\"Oh, we have some nice new image captions, too :)\"]]],[1,\"h1\",[[0,[],0,\"What else?\"]]],[1,\"p\",[[0,[],0,\"Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor \"],[0,[2],1,\"inside\"],[0,[],0,\" this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:\"]]],[10,5],[1,\"p\",[[0,[],0,\"of course you can embed code blocks\"]]],[10,6],[1,\"p\",[[0,[],0,\"or embed things from external services like YouTube...\"]]],[10,7],[1,\"p\",[[0,[],0,\"and yeah you can do full HTML if you need to, as well!\"]]],[10,8],[1,\"p\",[[0,[],0,\"So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.\"]]],[1,\"h1\",[[0,[],0,\"What do I do with this information?\"]]],[1,\"p\",[[0,[],0,\"Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '\"],[0,[0],1,\"Preview\"],[0,[],0,\"' next to the 'Post URL' input.\"]]],[1,\"p\",[[0,[],0,\"If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.\"]]],[1,\"p\",[[0,[],0,\"Head over to the \"],[0,[3],1,\"Ghost 2.0 Theme Compatibility\"],[0,[],0,\" forum topic to discuss any changes and get help if needed.\"]]],[1,\"p\",[[0,[],0,\"That's it!\"]]],[1,\"p\",[[0,[],0,\"We're looking forward to sharing more about the new editor soon\"]]]]}","html":"<p>Hey there! Welcome to the new Ghost editor - affectionately known as <strong>Koenig</strong>.</p><p>Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.</p><p>Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><h1 id=\"what-s-new\">What's new</h1><p>The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the <code>+</code> button on a new line, or typing <code>/</code> on a new line to search for a particular card. </p><p>Here's one now:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\">August 4, 2016</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><!--kg-card-end: embed--><p>Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!</p><h2 id=\"some-examples-of-possible-future-cards\">Some examples of possible future cards</h2><ul><li>A chart card to display dynamic data visualisations</li><li>A recipe card to show a pre-formatted list of ingredients and instructions</li><li>A Mailchimp card to capture new subscribers with a web form</li><li>A recommended reading card to display a dynamic suggested story based on the current user's reading history</li></ul><p>For now, though, we're just getting started with the basics.</p><h1 id=\"new-ways-to-work-with-images\">New ways to work with images</h1><p>Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.</p><p>For instance, here's your plain ol' regular image:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\" class=\"kg-image\"><figcaption>A regular size image</figcaption></figure><!--kg-card-end: image--><p>But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\" class=\"kg-image\"><figcaption>It's wide</figcaption></figure><!--kg-card-end: image--><p>Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\" class=\"kg-image\"><figcaption>It's wider, but not widest</figcaption></figure><!--kg-card-end: image--><p>Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. </p><p>Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.</p><p>Oh, we have some nice new image captions, too :)</p><h1 id=\"what-else\">What else?</h1><p>Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor <em>inside</em> this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:</p><!--kg-card-begin: markdown--><p>Markdown content works just the way it always did, <strong>simply</strong> and <em>beautifully</em>.</p>\n<!--kg-card-end: markdown--><p>of course you can embed code blocks</p><!--kg-card-begin: code--><pre><code>.new-editor {\n\tdisplay: bock;\n}</code></pre><!--kg-card-end: code--><p>or embed things from external services like YouTube...</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><!--kg-card-end: embed--><p>and yeah you can do full HTML if you need to, as well!</p><!--kg-card-begin: html--><div style=\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\">\n    <blink>hello world</blink>\n</div><!--kg-card-end: html--><p>So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.</p><h1 id=\"what-do-i-do-with-this-information\">What do I do with this information?</h1><p>Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '<strong>Preview</strong>' next to the 'Post URL' input.</p><p>If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.</p><p>Head over to the <a href=\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\">Ghost 2.0 Theme Compatibility</a> forum topic to discuss any changes and get help if needed.</p><p>That's it!</p><p>We're looking forward to sharing more about the new editor soon</p>","comment_id":"5d3330a97a7c55f9a5dea3cd","plaintext":"Hey there! Welcome to the new Ghost editor - affectionately known as Koenig.\n\nKoenig is a brand new writing experience within Ghost, and follows more of a\nrich writing experience which you've come to expect from the best publishing\nplatforms. Don't worry though! You can still use Markdown too, if that's what\nyou prefer.\n\nBecause there are some changes to how Ghost outputs content using its new\neditor, we dropped this draft post into your latest update to tell you a bit\nabout it – and simultaneously give you a chance to preview how well your theme\nhandles these changes. So after reading this post you should both understand how\neverything works, and also be able to see if there are any changes you need to\nmake to your theme in order to upgrade to Ghost 2.0.\n\n\n--------------------------------------------------------------------------------\n\nWhat's new\nThe new editor is designed to allow you have a more rich editing experience, so\nit's no longer limited to just text and formatting options – but it can also\nhandle rich media objects, called cards. You can insert a card either by\nclicking on the + button on a new line, or typing / on a new line to search for\na particular card. \n\nHere's one now:\n\n> Fun announcement coming this afternoon 🙈 what could it be?\n\n— Ghost (@TryGhost) August 4, 2016\n[https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw]\nCards are rich objects which contain content which is more than just text. To\nstart with there are cards for things like images, markdown, html and embeds —\nbut over time we'll introduce more cards and integrations, as well as allowing\nyou to create your own!\n\nSome examples of possible future cards\n * A chart card to display dynamic data visualisations\n * A recipe card to show a pre-formatted list of ingredients and instructions\n * A Mailchimp card to capture new subscribers with a web form\n * A recommended reading card to display a dynamic suggested story based on the\n   current user's reading history\n\nFor now, though, we're just getting started with the basics.\n\nNew ways to work with images\nPerhaps the most notable change to how you're used to interacting with Ghost is\nin the images. In Koenig, they're both more powerful and easier to work with in\nthe editor itself - and in the theme, they're output slightly differently with\ndifferent size options.\n\nFor instance, here's your plain ol' regular image:\n\nA regular size imageBut perhaps you've got a striking panorama that you really\nwant to stand out as your readers scroll down the page. In that case, you could\nuse the new full-bleed image size which stretches right out to the edges of the\nscreen:\n\nIt's wideOr maybe you're looking for something in between, which will give you\njust a little more size to break up the vertical rhythm of the post without\ndominating the entire screen. If that's the case, you might like the breakout\nsize:\n\nIt's wider, but not widestEach of these sizes can be selected from within the\neditor, and each will output a number of HTML classes for the theme to do\nstyling with. \n\nChances are your theme will need a few small updates to take advantage of the\nnew editor functionality. Some people might also find they need to tweak their\ntheme layout, as the editor canvas previously output a wrapper div around its\ncontent – but no longer does. If you rely on that div for styling, you can\nalways add it back again in your theme.\n\nOh, we have some nice new image captions, too :)\n\nWhat else?\nWell, you can still write Markdown, as mentioned. In fact you'll find the entire\nprevious Ghost editor inside this editor. If you want to use it then just go\nahead and add a Markdown card and start writing like nothing changed at all:\n\nMarkdown content works just the way it always did, simply and beautifully.\n\nof course you can embed code blocks\n\n.new-editor {\n\tdisplay: bock;\n}\n\nor embed things from external services like YouTube...\n\nand yeah you can do full HTML if you need to, as well!\n\nhello worldSo everything works, hopefully, just about how you would expect. It's\nlike the old editor, but faster, cleaner, prettier, and a whole lot more\npowerful.\n\nWhat do I do with this information?\nPreview this post on your site to see if it causes any issues with your theme.\nClick on the settings cog in the top right 👉🏼 corner of the editor, then click\non 'Preview' next to the 'Post URL' input.\n\nIf everything looks good to you then there's nothing you need to do, you're all\nset! If you spot any issues with your design, or there are some funky display\nissues, then you might need to make some updates to your theme based on the new\neditor classes being output.\n\nHead over to the Ghost 2.0 Theme Compatibility\n[https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103] \nforum topic to discuss any changes and get help if needed.\n\nThat's it!\n\nWe're looking forward to sharing more about the new editor soon","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:01","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053b","uuid":"5879f391-8233-46ef-a498-c940a8175980","title":"Setting up your own Ghost theme","slug":"themes-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Creating a totally custom design for your publication\\n\\nGhost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.\\n\\nThere are a huge range of both free and premium pre-built themes which you can get from the [Ghost Theme Marketplace](http://marketplace.ghost.org), or you can simply create your own from scratch.\\n\\n[![marketplace](https://casper.ghost.org/v1.0.0/images/marketplace.jpg)](http://marketplace.ghost.org)\\n\\n> Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS\\n\\nGhost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like `{{author.name}}`, for example, outputs the name of the current author.\\n\\nThe best way to learn how to write your own Ghost theme is to have a look at [the source code for Casper](https://github.com/TryGhost/Casper), which is heavily commented and should give you a sense of how everything fits together.\\n\\n- `default.hbs` is the main template file, all contexts will load inside this file unless specifically told to use a different template.\\n- `post.hbs` is the file used in the context of viewing a post.\\n- `index.hbs` is the file used in the context of viewing the home page.\\n- and so on\\n\\nWe've got [full and extensive theme documentation](http://themes.ghost.org/v1.23.0/docs/about) which outlines every template file, context and helper that you can use.\\n\\nIf you want to chat with other people making Ghost themes to get any advice or help, there's also a **themes** section on our [public Ghost forum](https://forum.ghost.org/c/themes).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Creating a totally custom design for your publication</p>\n<p>Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.</p>\n<p>There are a huge range of both free and premium pre-built themes which you can get from the <a href=\"http://marketplace.ghost.org\">Ghost Theme Marketplace</a>, or you can simply create your own from scratch.</p>\n<p><a href=\"http://marketplace.ghost.org\"><img src=\"https://casper.ghost.org/v1.0.0/images/marketplace.jpg\" alt=\"marketplace\"></a></p>\n<blockquote>\n<p>Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS</p>\n</blockquote>\n<p>Ghost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like <code>{{author.name}}</code>, for example, outputs the name of the current author.</p>\n<p>The best way to learn how to write your own Ghost theme is to have a look at <a href=\"https://github.com/TryGhost/Casper\">the source code for Casper</a>, which is heavily commented and should give you a sense of how everything fits together.</p>\n<ul>\n<li><code>default.hbs</code> is the main template file, all contexts will load inside this file unless specifically told to use a different template.</li>\n<li><code>post.hbs</code> is the file used in the context of viewing a post.</li>\n<li><code>index.hbs</code> is the file used in the context of viewing the home page.</li>\n<li>and so on</li>\n</ul>\n<p>We've got <a href=\"http://themes.ghost.org/v1.23.0/docs/about\">full and extensive theme documentation</a> which outlines every template file, context and helper that you can use.</p>\n<p>If you want to chat with other people making Ghost themes to get any advice or help, there's also a <strong>themes</strong> section on our <a href=\"https://forum.ghost.org/c/themes\">public Ghost forum</a>.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3cf","plaintext":"Creating a totally custom design for your publication\n\nGhost comes with a beautiful default theme called Casper, which is designed to\nbe a clean, readable publication layout and can be easily adapted for most\npurposes. However, Ghost can also be completely themed to suit your needs.\nRather than just giving you a few basic settings which act as a poor proxy for\ncode, we just let you write code.\n\nThere are a huge range of both free and premium pre-built themes which you can\nget from the Ghost Theme Marketplace [http://marketplace.ghost.org], or you can\nsimply create your own from scratch.\n\n [http://marketplace.ghost.org]\n\n> Anyone can write a completely custom Ghost theme, with just some solid knowledge\nof HTML and CSS\n\n\nGhost themes are written with a templating language called handlebars, which has\na bunch of dynamic helpers to insert your data into template files. Like \n{{author.name}}, for example, outputs the name of the current author.\n\nThe best way to learn how to write your own Ghost theme is to have a look at \nthe\nsource code for Casper [https://github.com/TryGhost/Casper], which is heavily\ncommented and should give you a sense of how everything fits together.\n\n * default.hbs is the main template file, all contexts will load inside this\n   file unless specifically told to use a different template.\n * post.hbs is the file used in the context of viewing a post.\n * index.hbs is the file used in the context of viewing the home page.\n * and so on\n\nWe've got full and extensive theme documentation\n[http://themes.ghost.org/v1.23.0/docs/about] which outlines every template file,\ncontext and helper that you can use.\n\nIf you want to chat with other people making Ghost themes to get any advice or\nhelp, there's also a themes section on our public Ghost forum\n[https://forum.ghost.org/c/themes].","feature_image":"https://casper.ghost.org/v1.0.0/images/design.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:02","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053c","uuid":"6f6b9481-40f0-4dde-a253-30a2fbf86b80","title":"Advanced Markdown tips","slug":"advanced-markdown","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There are lots of powerful things you can do with the Ghost editor\\n\\nIf you've gotten pretty comfortable with [all the basics](/the-editor/) of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!\\n\\nAs with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.\\n\\n\\n## Special formatting\\n\\nAs well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:\\n\\n+ ~~strike through~~\\n+ ==highlight==\\n+ \\\\*escaped characters\\\\*\\n\\n\\n## Writing code blocks\\n\\nThere are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, `like this`. Larger snippets of code can be displayed across multiple lines using triple back ticks:\\n\\n```\\n.my-link {\\n    text-decoration: underline;\\n}\\n```\\n\\nIf you want to get really fancy, you can even add syntax highlighting using [Prism.js](http://prismjs.com/).\\n\\n\\n## Full bleed images\\n\\nOne neat trick which you can use in Markdown to distinguish between different types of images is to add a `#hash` value to the end of the source URL, and then target images containing the hash with special styling. For example:\\n\\n![walking](https://casper.ghost.org/v1.0.0/images/walking.jpg#full)\\n\\nwhich is styled with...\\n\\n```\\nimg[src$=\\\"#full\\\"] {\\n    max-width: 100vw;\\n}\\n```\\n\\nThis creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.\\n\\n\\n## Reference lists\\n\\n**The quick brown [fox][1], jumped over the lazy [dog][2].**\\n\\n[1]: https://en.wikipedia.org/wiki/Fox \\\"Wikipedia: Fox\\\"\\n[2]: https://en.wikipedia.org/wiki/Dog \\\"Wikipedia: Dog\\\"\\n\\nAnother way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.\\n\\n\\n## Creating footnotes\\n\\nThe quick brown fox[^1] jumped over the lazy dog[^2].\\n\\n[^1]: Foxes are red\\n[^2]: Dogs are usually not red\\n\\nFootnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.\\n\\n\\n## Full HTML\\n\\nPerhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>There are lots of powerful things you can do with the Ghost editor</p>\n<p>If you've gotten pretty comfortable with <a href=\"/the-editor/\">all the basics</a> of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!</p>\n<p>As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.</p>\n<h2 id=\"specialformatting\">Special formatting</h2>\n<p>As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:</p>\n<ul>\n<li><s>strike through</s></li>\n<li><mark>highlight</mark></li>\n<li>*escaped characters*</li>\n</ul>\n<h2 id=\"writingcodeblocks\">Writing code blocks</h2>\n<p>There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, <code>like this</code>. Larger snippets of code can be displayed across multiple lines using triple back ticks:</p>\n<pre><code>.my-link {\n    text-decoration: underline;\n}\n</code></pre>\n<p>If you want to get really fancy, you can even add syntax highlighting using <a href=\"http://prismjs.com/\">Prism.js</a>.</p>\n<h2 id=\"fullbleedimages\">Full bleed images</h2>\n<p>One neat trick which you can use in Markdown to distinguish between different types of images is to add a <code>#hash</code> value to the end of the source URL, and then target images containing the hash with special styling. For example:</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/walking.jpg#full\" alt=\"walking\"></p>\n<p>which is styled with...</p>\n<pre><code>img[src$=&quot;#full&quot;] {\n    max-width: 100vw;\n}\n</code></pre>\n<p>This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.</p>\n<h2 id=\"referencelists\">Reference lists</h2>\n<p><strong>The quick brown <a href=\"https://en.wikipedia.org/wiki/Fox\" title=\"Wikipedia: Fox\">fox</a>, jumped over the lazy <a href=\"https://en.wikipedia.org/wiki/Dog\" title=\"Wikipedia: Dog\">dog</a>.</strong></p>\n<p>Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.</p>\n<h2 id=\"creatingfootnotes\">Creating footnotes</h2>\n<p>The quick brown fox<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> jumped over the lazy dog<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>.</p>\n<p>Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.</p>\n<h2 id=\"fullhtml\">Full HTML</h2>\n<p>Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Foxes are red <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Dogs are usually not red <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3d1","plaintext":"There are lots of powerful things you can do with the Ghost editor\n\nIf you've gotten pretty comfortable with all the basics [/the-editor/] of\nwriting in Ghost, then you may enjoy some more advanced tips about the types of\nthings you can do with Markdown!\n\nAs with the last post about the editor, you'll want to be actually editing this\npost as you read it so that you can see all the Markdown code we're using.\n\nSpecial formatting\nAs well as bold and italics, you can also use some other special formatting in\nMarkdown when the need arises, for example:\n\n * strike through\n * highlight\n * *escaped characters*\n\nWriting code blocks\nThere are two types of code elements which can be inserted in Markdown, the\nfirst is inline, and the other is block. Inline code is formatted by wrapping\nany word or words in back-ticks, like this. Larger snippets of code can be\ndisplayed across multiple lines using triple back ticks:\n\n.my-link {\n    text-decoration: underline;\n}\n\n\nIf you want to get really fancy, you can even add syntax highlighting using \nPrism.js [http://prismjs.com/].\n\nFull bleed images\nOne neat trick which you can use in Markdown to distinguish between different\ntypes of images is to add a #hash value to the end of the source URL, and then\ntarget images containing the hash with special styling. For example:\n\n\n\nwhich is styled with...\n\nimg[src$=\"#full\"] {\n    max-width: 100vw;\n}\n\n\nThis creates full-bleed images in the Casper theme, which stretch beyond their\nusual boundaries right up to the edge of the window. Every theme handles these\ntypes of things slightly differently, but it's a great trick to play with if you\nwant to have a variety of image sizes and styles.\n\nReference lists\nThe quick brown fox [https://en.wikipedia.org/wiki/Fox], jumped over the lazy \ndog [https://en.wikipedia.org/wiki/Dog].\n\nAnother way to insert links in markdown is using reference lists. You might want\nto use this style of linking to cite reference material in a Wikipedia-style.\nAll of the links are listed at the end of the document, so you can maintain full\nseparation between content and its source or reference.\n\nCreating footnotes\nThe quick brown fox[1] jumped over the lazy dog[2].\n\nFootnotes are a great way to add additional contextual details when appropriate.\nGhost will automatically add footnote content to the very end of your post.\n\nFull HTML\nPerhaps the best part of Markdown is that you're never limited to just Markdown.\nYou can write HTML directly in the Ghost editor and it will just work as HTML\nusually does. No limits! Here's a standard YouTube embed code as an example:\n\n\n--------------------------------------------------------------------------------\n\n 1. Foxes are red ↩︎\n    \n    \n 2. Dogs are usually not red ↩︎","feature_image":"https://casper.ghost.org/v1.0.0/images/advanced.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:03","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053d","uuid":"e7116d66-de8a-4403-adbb-7c980561889e","title":"Making your site private","slug":"private-sites","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Sometimes you might want to put your site behind closed doors\\n\\nIf you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.\\n\\nYou can toggle this preference on at the bottom of Ghost's General Settings\\n\\n![private](https://casper.ghost.org/v1.0.0/images/private.png)\\n\\nGhost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.\\n\\nDo remember though, this is *not* secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Sometimes you might want to put your site behind closed doors</p>\n<p>If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.</p>\n<p>You can toggle this preference on at the bottom of Ghost's General Settings</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/private.png\" alt=\"private\"></p>\n<p>Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.</p>\n<p>Do remember though, this is <em>not</em> secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3d3","plaintext":"Sometimes you might want to put your site behind closed doors\n\nIf you've got a publication that you don't want the world to see yet because\nit's not ready to launch, you can hide your Ghost site behind a simple shared\npass-phrase.\n\nYou can toggle this preference on at the bottom of Ghost's General Settings\n\n\n\nGhost will give you a short, randomly generated pass-phrase which you can share\nwith anyone who needs access to the site while you're working on it. While this\nsetting is enabled, all search engine optimisation features will be switched off\nto help keep the site off the radar.\n\nDo remember though, this is not secure authentication. You shouldn't rely on\nthis feature for protecting important private data. It's just a simple, shared\npass-phrase for very basic privacy.","feature_image":"https://casper.ghost.org/v1.0.0/images/locked.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:04","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053e","uuid":"6f5b4fe3-fe08-4e78-8b84-51c9b4ea277d","title":"Managing Ghost users","slug":"managing-users","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a number of different user roles for your team\\n\\n\\n### Authors\\n\\nThe base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are **trusted** users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.\\n\\n\\n### Editors\\n\\nEditors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.\\n\\n\\n### Administrators\\n\\nThe top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.\\n\\n\\n### The Owner\\n\\nThere is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).\\n\\n---\\n\\nIt's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design. \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Ghost has a number of different user roles for your team</p>\n<h3 id=\"authors\">Authors</h3>\n<p>The base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are <strong>trusted</strong> users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.</p>\n<h3 id=\"editors\">Editors</h3>\n<p>Editors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.</p>\n<h3 id=\"administrators\">Administrators</h3>\n<p>The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.</p>\n<h3 id=\"theowner\">The Owner</h3>\n<p>There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).</p>\n<hr>\n<p>It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3d5","plaintext":"Ghost has a number of different user roles for your team\n\nAuthors\nThe base user level in Ghost is an author. Authors can write posts, edit their\nown posts, and publish their own posts. Authors are trusted users. If you don't\ntrust users to be allowed to publish their own posts, you shouldn't invite them\nto Ghost admin.\n\nEditors\nEditors are the 2nd user level in Ghost. Editors can do everything that an\nAuthor can do, but they can also edit and publish the posts of others - as well\nas their own. Editors can also invite new authors to the site.\n\nAdministrators\nThe top user level in Ghost is Administrator. Again, administrators can do\neverything that Authors and Editors can do, but they can also edit all site\nsettings and data, not just content. Additionally, administrators have full\naccess to invite, manage or remove any other user of the site.\n\nThe Owner\nThere is only ever one owner of a Ghost site. The owner is a special user which\nhas all the same permissions as an Administrator, but with two exceptions: The\nOwner can never be deleted. And in some circumstances the owner will have access\nto additional special settings if applicable — for example, billing details, if\nusing Ghost(Pro).\n\n\n--------------------------------------------------------------------------------\n\nIt's a good idea to ask all of your users to fill out their user profiles,\nincluding bio and social links. These will populate rich structured data for\nposts and generally create more opportunities for themes to fully populate their\ndesign.","feature_image":"https://casper.ghost.org/v1.0.0/images/team.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:05","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422053f","uuid":"3eb07b69-a015-4376-a62c-f58038d9bde4","title":"Organising your content with tags","slug":"using-tags","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a single, powerful organisational taxonomy, called tags.\\n\\nIt doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.\\n\\n\\n## Basic tagging\\n\\nWhen you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with `News` and other posts with `Cycling`, which would create two distinct categories of content listed on `/tag/news/` and `/tag/cycling/`, respectively.\\n\\nIf you tag a post with both `News` *and* `Cycling` - then it appears in both sections.\\n\\nTag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.\\n\\n\\n## The primary tag\\n\\nInside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.\\n\\n==**News**, Cycling, Bart Stevens, Extreme Sports==\\n\\nIn this example, **News** is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.\\n\\n\\n## Private tags\\n\\nSometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.\\n\\nFor example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.\\n\\n==**News**, Cycling, #video==\\n\\nHere, the theme would assign the post publicly displayed tags of `News`, and `Cycling` - but it would also keep a private record of the post being tagged with `#video`.\\n\\nIn your theme, you could then look for private tags conditionally and give them special formatting:\\n\\n```\\n{{#post}}\\n    {{#has tag=\\\"#video\\\"}}\\n        ...markup for a nice big video post layout...\\n    {{else}}\\n        ...regular markup for a post...\\n    {{/has}}\\n{{/post}}\\n```\\n\\nYou can find documentation for theme development techniques like this and many more over on Ghost's extensive [theme documentation](https://themes.ghost.org/v1.23.0/).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Ghost has a single, powerful organisational taxonomy, called tags.</p>\n<p>It doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.</p>\n<h2 id=\"basictagging\">Basic tagging</h2>\n<p>When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with <code>News</code> and other posts with <code>Cycling</code>, which would create two distinct categories of content listed on <code>/tag/news/</code> and <code>/tag/cycling/</code>, respectively.</p>\n<p>If you tag a post with both <code>News</code> <em>and</em> <code>Cycling</code> - then it appears in both sections.</p>\n<p>Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.</p>\n<h2 id=\"theprimarytag\">The primary tag</h2>\n<p>Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.</p>\n<p><mark><strong>News</strong>, Cycling, Bart Stevens, Extreme Sports</mark></p>\n<p>In this example, <strong>News</strong> is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.</p>\n<h2 id=\"privatetags\">Private tags</h2>\n<p>Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.</p>\n<p>For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.</p>\n<p><mark><strong>News</strong>, Cycling, #video</mark></p>\n<p>Here, the theme would assign the post publicly displayed tags of <code>News</code>, and <code>Cycling</code> - but it would also keep a private record of the post being tagged with <code>#video</code>.</p>\n<p>In your theme, you could then look for private tags conditionally and give them special formatting:</p>\n<pre><code>{{#post}}\n    {{#has tag=&quot;#video&quot;}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n</code></pre>\n<p>You can find documentation for theme development techniques like this and many more over on Ghost's extensive <a href=\"https://themes.ghost.org/v1.23.0/\">theme documentation</a>.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3d7","plaintext":"Ghost has a single, powerful organisational taxonomy, called tags.\n\nIt doesn't matter whether you want to call them categories, tags, boxes, or\nanything else. You can think of Ghost tags a lot like Gmail labels. By tagging\nposts with one or more keyword, you can organise articles into buckets of\nrelated content.\n\nBasic tagging\nWhen you write a post, you can assign tags to help differentiate between\ncategories of content. For example, you might tag some posts with News and other\nposts with Cycling, which would create two distinct categories of content listed\non /tag/news/ and /tag/cycling/, respectively.\n\nIf you tag a post with both News and Cycling - then it appears in both sections.\n\nTag archives are like dedicated home-pages for each category of content that you\nhave. They have their own pages, their own RSS feeds, and can support their own\ncover images and meta data.\n\nThe primary tag\nInside the Ghost editor, you can drag and drop tags into a specific order. The\nfirst tag in the list is always given the most importance, and some themes will\nonly display the primary tag (the first tag in the list) by default. So you can\nadd the most important tag which you want to show up in your theme, but also add\na bunch of related tags which are less important.\n\nNews, Cycling, Bart Stevens, Extreme Sports\n\nIn this example, News is the primary tag which will be displayed by the theme,\nbut the post will also still receive all the other tags, and show up in their\nrespective archives.\n\nPrivate tags\nSometimes you may want to assign a post a specific tag, but you don't\nnecessarily want that tag appearing in the theme or creating an archive page. In\nGhost, hashtags are private and can be used for special styling.\n\nFor example, if you sometimes publish posts with video content - you might want\nyour theme to adapt and get rid of the sidebar for these posts, to give more\nspace for an embedded video to fill the screen. In this case, you could use\nprivate tags to tell your theme what to do.\n\nNews, Cycling, #video\n\nHere, the theme would assign the post publicly displayed tags of News, and \nCycling - but it would also keep a private record of the post being tagged with \n#video.\n\nIn your theme, you could then look for private tags conditionally and give them\nspecial formatting:\n\n{{#post}}\n    {{#has tag=\"#video\"}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n\n\nYou can find documentation for theme development techniques like this and many\nmore over on Ghost's extensive theme documentation\n[https://themes.ghost.org/v1.23.0/].","feature_image":"https://casper.ghost.org/v1.0.0/images/tags.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:06","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220540","uuid":"4a12cf9c-0a5e-43ee-9887-ea2910be6d74","title":"Using the Ghost editor","slug":"the-editor-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost uses a language called **Markdown** to format text.\\n\\nWhen you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.\\n\\nAt the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a **?** icon, which contains more advanced shortcuts.\\n\\nFor now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.\\n\\n\\n## Formatting text\\n\\nThe most common shortcuts are of course, **bold** text, _italic_ text, and [hyperlinks](https://example.com). These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.\\n\\n* `CMD/Ctrl + B` for Bold\\n* `CMD/Ctrl + I` for Italic\\n* `CMD/Ctrl + K` for a Link\\n* `CMD/Ctrl + H` for a Heading (Press multiple times for h2/h3/h4/etc)\\n\\nWith just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.\\n\\n\\n## Inserting images\\n\\nImages in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:\\n\\n`![Image description](/path/to/image.jpg)`\\n\\n![Computer](https://casper.ghost.org/v1.0.0/images/computer.jpg)\\n\\nMost Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.\\n\\n_**Important Note:** Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files **before** uploading them to Ghost._\\n\\n\\n## Making lists\\n\\nLists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use `*` or `-` or `+`. Like this:\\n\\n1. Crack the eggs over a bowl\\n2. Whisk them together\\n3. Make an omelette\\n\\nor\\n\\n- Remember to buy milk\\n- Feed the cat\\n- Come up with idea for next story\\n\\n\\n## Adding quotes\\n\\nWhen you want to pull out a particularly good excerpt in the middle of a piece, you can use `>` at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.\\n\\n> A well placed quote guides a reader through a story, helping them to understand the most important points being made\\n\\nAll themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.\\n\\n\\n## Dividing things up\\n\\nIf you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping `---` on a new line will create a sleek divider, anywhere you want it.\\n\\n---\\n\\nThis should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the [Advanced Markdown Guide](/advanced-markdown/) - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of [how to use Ghost tags](/using-tags/).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Ghost uses a language called <strong>Markdown</strong> to format text.</p>\n<p>When you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.</p>\n<p>At the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a <strong>?</strong> icon, which contains more advanced shortcuts.</p>\n<p>For now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.</p>\n<h2 id=\"formattingtext\">Formatting text</h2>\n<p>The most common shortcuts are of course, <strong>bold</strong> text, <em>italic</em> text, and <a href=\"https://example.com\">hyperlinks</a>. These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.</p>\n<ul>\n<li><code>CMD/Ctrl + B</code> for Bold</li>\n<li><code>CMD/Ctrl + I</code> for Italic</li>\n<li><code>CMD/Ctrl + K</code> for a Link</li>\n<li><code>CMD/Ctrl + H</code> for a Heading (Press multiple times for h2/h3/h4/etc)</li>\n</ul>\n<p>With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.</p>\n<h2 id=\"insertingimages\">Inserting images</h2>\n<p>Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:</p>\n<p><code>![Image description](/path/to/image.jpg)</code></p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/computer.jpg\" alt=\"Computer\"></p>\n<p>Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.</p>\n<p><em><strong>Important Note:</strong> Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files <strong>before</strong> uploading them to Ghost.</em></p>\n<h2 id=\"makinglists\">Making lists</h2>\n<p>Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use <code>*</code> or <code>-</code> or <code>+</code>. Like this:</p>\n<ol>\n<li>Crack the eggs over a bowl</li>\n<li>Whisk them together</li>\n<li>Make an omelette</li>\n</ol>\n<p>or</p>\n<ul>\n<li>Remember to buy milk</li>\n<li>Feed the cat</li>\n<li>Come up with idea for next story</li>\n</ul>\n<h2 id=\"addingquotes\">Adding quotes</h2>\n<p>When you want to pull out a particularly good excerpt in the middle of a piece, you can use <code>&gt;</code> at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.</p>\n<blockquote>\n<p>A well placed quote guides a reader through a story, helping them to understand the most important points being made</p>\n</blockquote>\n<p>All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.</p>\n<h2 id=\"dividingthingsup\">Dividing things up</h2>\n<p>If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping <code>---</code> on a new line will create a sleek divider, anywhere you want it.</p>\n<hr>\n<p>This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the <a href=\"/advanced-markdown/\">Advanced Markdown Guide</a> - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of <a href=\"/using-tags/\">how to use Ghost tags</a>.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3d9","plaintext":"Ghost uses a language called Markdown to format text.\n\nWhen you go to edit a post and see special characters and colours intertwined\nbetween the words, those are Markdown shortcuts which tell Ghost what to do with\nthe words in your document. The biggest benefit of Markdown is that you can\nquickly apply formatting as you type, without needing to pause.\n\nAt the bottom of the editor, you'll find a toolbar with basic formatting options\nto help you get started as easily as possible. You'll also notice that there's a \n? icon, which contains more advanced shortcuts.\n\nFor now, though, let's run you through some of the basics. You'll want to make\nsure you're editing this post in order to see all the Markdown we've used.\n\nFormatting text\nThe most common shortcuts are of course, bold text, italic text, and hyperlinks\n[https://example.com]. These generally make up the bulk of any document. You can\ntype the characters out, but you can also use keyboard shortcuts.\n\n * CMD/Ctrl + B for Bold\n * CMD/Ctrl + I for Italic\n * CMD/Ctrl + K for a Link\n * CMD/Ctrl + H for a Heading (Press multiple times for h2/h3/h4/etc)\n\nWith just a couple of extra characters here and there, you're well on your way\nto creating a beautifully formatted story.\n\nInserting images\nImages in Markdown look just the same as links, except they're prefixed with an\nexclamation mark, like this:\n\n![Image description](/path/to/image.jpg)\n\n\n\nMost Markdown editors don't make you type this out, though. In Ghost you can\nclick on the image icon in the toolbar at the bottom of the editor, or you can\njust click and drag an image from your desktop directly into the editor. Both\nwill upload the image for you and generate the appropriate Markdown.\n\nImportant Note: Ghost does not currently have automatic image resizing, so it's\nalways a good idea to make sure your images aren't gigantic files before \nuploading them to Ghost.\n\nMaking lists\nLists in HTML are a formatting nightmare, but in Markdown they become an\nabsolute breeze with just a couple of characters and a bit of smart automation.\nFor numbered lists, just write out the numbers. For bullet lists, just use * or \n- or +. Like this:\n\n 1. Crack the eggs over a bowl\n 2. Whisk them together\n 3. Make an omelette\n\nor\n\n * Remember to buy milk\n * Feed the cat\n * Come up with idea for next story\n\nAdding quotes\nWhen you want to pull out a particularly good excerpt in the middle of a piece,\nyou can use > at the beginning of a paragraph to turn it into a Blockquote. You\nmight've seen this formatting before in email clients.\n\n> A well placed quote guides a reader through a story, helping them to understand\nthe most important points being made\n\n\nAll themes handles blockquotes slightly differently. Sometimes they'll look\nbetter kept shorter, while other times you can quote fairly hefty amounts of\ntext and get away with it. Generally, the safest option is to use blockquotes\nsparingly.\n\nDividing things up\nIf you're writing a piece in parts and you just feel like you need to divide a\ncouple of sections distinctly from each other, a horizontal rule might be just\nwhat you need. Dropping --- on a new line will create a sleek divider, anywhere\nyou want it.\n\n\n--------------------------------------------------------------------------------\n\nThis should get you going with the vast majority of what you need to do in the\neditor, but if you're still curious about more advanced tips then check out the \nAdvanced Markdown Guide [/advanced-markdown/] - or if you'd rather learn about\nhow Ghost taxononomies work, we've got a overview of how to use Ghost tags\n[/using-tags/].","feature_image":"https://casper.ghost.org/v1.0.0/images/writing.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:07","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220541","uuid":"ecbc7ba8-3c91-4872-8b3e-44aba05e4848","title":"Welcome to Ghost","slug":"welcome-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hey! Welcome to Ghost, it's great to have you :)\\n\\nWe know that first impressions are important, so we've populated your new site with some initial **Getting Started** posts that will help you get familiar with everything in no time. This is the first one!\\n\\n\\n### There are a few things that you should know up-front:\\n\\n1. Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.\\n\\n2. The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so **does** require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.\\n\\n3. For the best experience we recommend downloading the [Ghost Desktop App](https://ghost.org/downloads/) for your computer, which is the best way to access your Ghost site on a desktop device.\\n\\nGhost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our [Ghost(Pro)](https://ghost.org/pricing) service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.\\n\\nThe main thing you'll want to read about next is probably: [the Ghost editor](/the-editor/).\\n\\nOnce you're done reading, you can simply delete the default **Ghost** user from your team to remove all of these introductory posts!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Hey! Welcome to Ghost, it's great to have you :)</p>\n<p>We know that first impressions are important, so we've populated your new site with some initial <strong>Getting Started</strong> posts that will help you get familiar with everything in no time. This is the first one!</p>\n<h3 id=\"thereareafewthingsthatyoushouldknowupfront\">There are a few things that you should know up-front:</h3>\n<ol>\n<li>\n<p>Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.</p>\n</li>\n<li>\n<p>The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so <strong>does</strong> require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.</p>\n</li>\n<li>\n<p>For the best experience we recommend downloading the <a href=\"https://ghost.org/downloads/\">Ghost Desktop App</a> for your computer, which is the best way to access your Ghost site on a desktop device.</p>\n</li>\n</ol>\n<p>Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our <a href=\"https://ghost.org/pricing\">Ghost(Pro)</a> service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.</p>\n<p>The main thing you'll want to read about next is probably: <a href=\"/the-editor/\">the Ghost editor</a>.</p>\n<p>Once you're done reading, you can simply delete the default <strong>Ghost</strong> user from your team to remove all of these introductory posts!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5d3330a97a7c55f9a5dea3db","plaintext":"Hey! Welcome to Ghost, it's great to have you :)\n\nWe know that first impressions are important, so we've populated your new site\nwith some initial Getting Started posts that will help you get familiar with\neverything in no time. This is the first one!\n\nThere are a few things that you should know up-front:\n 1. Ghost is designed for ambitious, professional publishers who want to\n    actively build a business around their content. That's who it works best\n    for. If you're using Ghost for some other purpose, that's fine too - but it\n    might not be the best choice for you.\n    \n    \n 2. The entire platform can be modified and customized to suit your needs, which\n    is very powerful, but doing so does require some knowledge of code. Ghost is\n    not necessarily a good platform for beginners or people who just want a\n    simple personal blog.\n    \n    \n 3. For the best experience we recommend downloading the Ghost Desktop App\n    [https://ghost.org/downloads/] for your computer, which is the best way to\n    access your Ghost site on a desktop device.\n    \n    \n\nGhost is made by an independent non-profit organisation called the Ghost\nFoundation. We are 100% self funded by revenue from our Ghost(Pro)\n[https://ghost.org/pricing] service, and every penny we make is re-invested into\nfunding further development of free, open source technology for modern\njournalism.\n\nThe main thing you'll want to read about next is probably: the Ghost editor\n[/the-editor/].\n\nOnce you're done reading, you can simply delete the default Ghost user from your\nteam to remove all of these introductory posts!","feature_image":"https://casper.ghost.org/v1.0.0/images/welcome.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2019-07-20 15:18:01","updated_at":"2019-07-20 15:18:01","published_at":"2019-07-20 15:18:08","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220542","uuid":"6581ba95-475f-4798-bc37-c83b90ccda7b","title":"A new blog, and a new adventure","slug":"a-new-blog-and-a-new-adventure","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"### A new blog\\nI'm happy to finally have launched a new website for myself. Thanks to the new Ghost blogging platform! I gotta say this is a great platform. Super easy, clean, and extremely easy to modify and plug in to.\\n\\nI'd been using Wordpress for a longtime, but I accidentally got myself got up in a redirect loop updating a MySql database and never got around to fixing it. Then I migrated to Blogger just to have something up in the mean time.\\n\\nWhen Ghost came out, I tried it out and loved it. Writing blogs in Markdown is so full of win it's ridiculous.\\n\\n### A new adventure\\nI've spent the last ~1.5 years working for [appendTo](http://appendto.com), and I'm announcing bittersweetly that I'll be departing on November 5, 2013 and beginning a new adventure with http://tech.pro. \\n\\nWorking for appendTo has been one of the greatest experiences of my life and I've been honored and humbled by my time there. [Mike Hostetler](http://twitter.com/mikehostetler) is an incredible CEO and runs one of the best companies a developer could possibly work for. So much great stuff comes out of appendTo and it was an incredibly difficult decision to leave, but I felt like this was an opportunity that I just HAD to be a part of! AppendTo has become a family to me and I'll be sad to depart.\\n\\n[Tech.pro](http://tech.pro) will provide me with an entirely new set of problems to solve. I'll be back in the ASP.NET MVC world for the first time in a while so I'm extremely excited about that. Working entirely with JavaScript for the past couple years has been a real pleasure, but I'm also ready to work in the server side world again.\\n\\n### Thanks\\nGod has blessed me with incredible opportunites and amazing influencers in my life. I've been extremely fortunate in my short progamming career to work with some of the best in the business! [Elijah Manor](http://twitter.com/elijahmanor) and [Jim Cowart](http://tiwtter.com/jimcowart) reached out and helped me get my position at appendTo and I'm forever greatful to them for that as well as for just being great dudes and great friends! Guys like [Doug Neiner](http://twitter.com/dougneiner), [Ryan Niemeyer](http://twitter.com/rpniemeyer), [Eli Perelman](http://twitter.com/eliperelman), [Jonathan Sampson](http://twitter.com/jonathansampson), and [Alex Robson](http://twitter.com/a_robson) are amazingly smart minds and have taught me a lot during my time working with them, and of course there's many more too! You don't get to work for bosses much better than [John Kellar](http://twitter.com/johnkellar) and Mike. Thanks to all of appendTo for making me feel apart of a special company. \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><h3 id=\"anewblog\">A new blog</h3>\n<p>I'm happy to finally have launched a new website for myself. Thanks to the new Ghost blogging platform! I gotta say this is a great platform. Super easy, clean, and extremely easy to modify and plug in to.</p>\n<p>I'd been using Wordpress for a longtime, but I accidentally got myself got up in a redirect loop updating a MySql database and never got around to fixing it. Then I migrated to Blogger just to have something up in the mean time.</p>\n<p>When Ghost came out, I tried it out and loved it. Writing blogs in Markdown is so full of win it's ridiculous.</p>\n<h3 id=\"anewadventure\">A new adventure</h3>\n<p>I've spent the last ~1.5 years working for <a href=\"http://appendto.com\">appendTo</a>, and I'm announcing bittersweetly that I'll be departing on November 5, 2013 and beginning a new adventure with <a href=\"http://tech.pro\">http://tech.pro</a>.</p>\n<p>Working for appendTo has been one of the greatest experiences of my life and I've been honored and humbled by my time there. <a href=\"http://twitter.com/mikehostetler\">Mike Hostetler</a> is an incredible CEO and runs one of the best companies a developer could possibly work for. So much great stuff comes out of appendTo and it was an incredibly difficult decision to leave, but I felt like this was an opportunity that I just HAD to be a part of! AppendTo has become a family to me and I'll be sad to depart.</p>\n<p><a href=\"http://tech.pro\">Tech.pro</a> will provide me with an entirely new set of problems to solve. I'll be back in the ASP.NET MVC world for the first time in a while so I'm extremely excited about that. Working entirely with JavaScript for the past couple years has been a real pleasure, but I'm also ready to work in the server side world again.</p>\n<h3 id=\"thanks\">Thanks</h3>\n<p>God has blessed me with incredible opportunites and amazing influencers in my life. I've been extremely fortunate in my short progamming career to work with some of the best in the business! <a href=\"http://twitter.com/elijahmanor\">Elijah Manor</a> and <a href=\"http://tiwtter.com/jimcowart\">Jim Cowart</a> reached out and helped me get my position at appendTo and I'm forever greatful to them for that as well as for just being great dudes and great friends! Guys like <a href=\"http://twitter.com/dougneiner\">Doug Neiner</a>, <a href=\"http://twitter.com/rpniemeyer\">Ryan Niemeyer</a>, <a href=\"http://twitter.com/eliperelman\">Eli Perelman</a>, <a href=\"http://twitter.com/jonathansampson\">Jonathan Sampson</a>, and <a href=\"http://twitter.com/a_robson\">Alex Robson</a> are amazingly smart minds and have taught me a lot during my time working with them, and of course there's many more too! You don't get to work for bosses much better than <a href=\"http://twitter.com/johnkellar\">John Kellar</a> and Mike. Thanks to all of appendTo for making me feel apart of a special company.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"2","plaintext":"A new blog\nI'm happy to finally have launched a new website for myself. Thanks to the new\nGhost blogging platform! I gotta say this is a great platform. Super easy,\nclean, and extremely easy to modify and plug in to.\n\nI'd been using Wordpress for a longtime, but I accidentally got myself got up in\na redirect loop updating a MySql database and never got around to fixing it.\nThen I migrated to Blogger just to have something up in the mean time.\n\nWhen Ghost came out, I tried it out and loved it. Writing blogs in Markdown is\nso full of win it's ridiculous.\n\nA new adventure\nI've spent the last ~1.5 years working for appendTo [http://appendto.com], and\nI'm announcing bittersweetly that I'll be departing on November 5, 2013 and\nbeginning a new adventure with http://tech.pro.\n\nWorking for appendTo has been one of the greatest experiences of my life and\nI've been honored and humbled by my time there. Mike Hostetler\n[http://twitter.com/mikehostetler] is an incredible CEO and runs one of the best\ncompanies a developer could possibly work for. So much great stuff comes out of\nappendTo and it was an incredibly difficult decision to leave, but I felt like\nthis was an opportunity that I just HAD to be a part of! AppendTo has become a\nfamily to me and I'll be sad to depart.\n\nTech.pro [http://tech.pro] will provide me with an entirely new set of problems\nto solve. I'll be back in the ASP.NET MVC world for the first time in a while so\nI'm extremely excited about that. Working entirely with JavaScript for the past\ncouple years has been a real pleasure, but I'm also ready to work in the server\nside world again.\n\nThanks\nGod has blessed me with incredible opportunites and amazing influencers in my\nlife. I've been extremely fortunate in my short progamming career to work with\nsome of the best in the business! Elijah Manor [http://twitter.com/elijahmanor] \nand Jim Cowart [http://tiwtter.com/jimcowart] reached out and helped me get my\nposition at appendTo and I'm forever greatful to them for that as well as for\njust being great dudes and great friends! Guys like Doug Neiner\n[http://twitter.com/dougneiner], Ryan Niemeyer [http://twitter.com/rpniemeyer], \nEli Perelman [http://twitter.com/eliperelman], Jonathan Sampson\n[http://twitter.com/jonathansampson], and Alex Robson\n[http://twitter.com/a_robson] are amazingly smart minds and have taught me a lot\nduring my time working with them, and of course there's many more too! You don't\nget to work for bosses much better than John Kellar\n[http://twitter.com/johnkellar] and Mike. Thanks to all of appendTo for making\nme feel apart of a special company.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-11-01 20:37:13","updated_at":"2013-11-01 21:43:29","published_at":"2013-11-01 20:37:30","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220543","uuid":"02693da0-4eda-4f0f-a858-d0c9de439234","title":"Javascript Patterns Mediator vs Observer","slug":"javascript-patterns-mediator-vs-observer","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"An approach to separating your Ajax requests from your DOM is to use **messaging**. Messaging allows different parts of an application to communicate with each other without knowing that the others even exist. This means that various pieces of the application are hot swapable! So, if you have an Ajax request class that is separate from your DOM logic, all you have to do to change the Ajax logic is, change the Ajax logic. You don't have to go fishing through all the places that your Ajax piece was used. Instead just change it in one place and it's done.  \\n  \\nThere are different types of messaging patterns such as observer, and mediator. In either pattern there would be some object emitting messages (or events). In observer based messaging, it might look like...  \\n  \\n```prettyprint lang-js\\nvar user = new User();\\n\\nvar app = {\\n    init: function() {\\n        user.on( \\\"login\\\", this.userLoggedIn );\\n    },\\n    userLoggedIn: function() {\\n        // user is now logged in.\\n    }\\n};\\napp.init();\\n\\n// somewhere else in the app\\nuser.trigger( \\\"login\\\" );\\n```\\n\\n  \\n  \\nSo, in this example, the app has a direct reference to the user so you can say, \\\"the app is observing the events on the user\\\".  \\n  \\nUsing the mediator pattern would look like...  \\n\\n```prettyprint lang-js\\n// the user is some kind of an emitter\\nvar user = new User();\\n\\nvar app = {\\n    events: new SomeKindOfEmitter(),\\n    init: function() {\\n        app.events.on( \\\"login\\\", this.userLoggedIn );\\n    },\\n    userLoggedIn: function() {\\n        // user is now logged in.\\n    }\\n};\\napp.init();\\n\\n// somewhere else in the app\\napp.events.trigger( \\\"login\\\" );\\n```\\n\\n  \\n  \\nUsing a mediator allows the app logic to be separated from the user logic. This could also allow any other object in the application to listen for the login event by just listening for events triggered from app.events.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>An approach to separating your Ajax requests from your DOM is to use <strong>messaging</strong>. Messaging allows different parts of an application to communicate with each other without knowing that the others even exist. This means that various pieces of the application are hot swapable! So, if you have an Ajax request class that is separate from your DOM logic, all you have to do to change the Ajax logic is, change the Ajax logic. You don't have to go fishing through all the places that your Ajax piece was used. Instead just change it in one place and it's done.</p>\n<p>There are different types of messaging patterns such as observer, and mediator. In either pattern there would be some object emitting messages (or events). In observer based messaging, it might look like...</p>\n<pre><code class=\"language-prettyprint\">var user = new User();\n\nvar app = {\n    init: function() {\n        user.on( &quot;login&quot;, this.userLoggedIn );\n    },\n    userLoggedIn: function() {\n        // user is now logged in.\n    }\n};\napp.init();\n\n// somewhere else in the app\nuser.trigger( &quot;login&quot; );\n</code></pre>\n<p>So, in this example, the app has a direct reference to the user so you can say, &quot;the app is observing the events on the user&quot;.</p>\n<p>Using the mediator pattern would look like...</p>\n<pre><code class=\"language-prettyprint\">// the user is some kind of an emitter\nvar user = new User();\n\nvar app = {\n    events: new SomeKindOfEmitter(),\n    init: function() {\n        app.events.on( &quot;login&quot;, this.userLoggedIn );\n    },\n    userLoggedIn: function() {\n        // user is now logged in.\n    }\n};\napp.init();\n\n// somewhere else in the app\napp.events.trigger( &quot;login&quot; );\n</code></pre>\n<p>Using a mediator allows the app logic to be separated from the user logic. This could also allow any other object in the application to listen for the login event by just listening for events triggered from app.events.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"3","plaintext":"An approach to separating your Ajax requests from your DOM is to use messaging.\nMessaging allows different parts of an application to communicate with each\nother without knowing that the others even exist. This means that various pieces\nof the application are hot swapable! So, if you have an Ajax request class that\nis separate from your DOM logic, all you have to do to change the Ajax logic is,\nchange the Ajax logic. You don't have to go fishing through all the places that\nyour Ajax piece was used. Instead just change it in one place and it's done.\n\nThere are different types of messaging patterns such as observer, and mediator.\nIn either pattern there would be some object emitting messages (or events). In\nobserver based messaging, it might look like...\n\nvar user = new User();\n\nvar app = {\n    init: function() {\n        user.on( \"login\", this.userLoggedIn );\n    },\n    userLoggedIn: function() {\n        // user is now logged in.\n    }\n};\napp.init();\n\n// somewhere else in the app\nuser.trigger( \"login\" );\n\n\nSo, in this example, the app has a direct reference to the user so you can say,\n\"the app is observing the events on the user\".\n\nUsing the mediator pattern would look like...\n\n// the user is some kind of an emitter\nvar user = new User();\n\nvar app = {\n    events: new SomeKindOfEmitter(),\n    init: function() {\n        app.events.on( \"login\", this.userLoggedIn );\n    },\n    userLoggedIn: function() {\n        // user is now logged in.\n    }\n};\napp.init();\n\n// somewhere else in the app\napp.events.trigger( \"login\" );\n\n\nUsing a mediator allows the app logic to be separated from the user logic. This\ncould also allow any other object in the application to listen for the login\nevent by just listening for events triggered from app.events.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-11-04 19:08:47","updated_at":"2013-11-04 23:04:14","published_at":"2013-11-04 19:08:47","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220544","uuid":"1ec04cb8-fb72-46d6-a912-c43db58e558d","title":"Building Decoupled JavaScript Applications with Postal.js","slug":"building-decoupled-javascrip-applications-with-postal-js","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Working with asynchronous code is one of the best features of JavaScript. With Ajax, it's very simple to request some JSON API, add a callback and update the UI with the result of that request very easily. Especially when using jQuery.\\n\\nHowever, writing an application that is testable, decoupled, and manageable, is a whole other beast. The typical approach to making Ajax requests in an application is to use jQuery's Ajax, pass a success callback and update the DOM with the response. That's great if you have some small application that doesn't need a lot of updates and manageability. \\n\\nWhat happens in an enterprise environment when someone writes that kind of shortcut Ajax code, makes a mess of the DOM in the success callback? You've just coupled your DOM directly to your request. What if the new boss comes in and says, \\\"I HATE TEH JQUERY!\\\"? Well, at that point you have to find the code in the success callback that messed with the DOM, rip it out, rewrite your Ajax logic, etc... It's a mess.\\n\\nA great way to solve this problem is through messaging. A great open-source JavaScript messaging library is postal. Take a look at how 3 objects having separate responsibilities can use postal and not know that each other exist, thereby decoupling the application, and making it testable as well!\\n\\nThe weather is from http://openweathermap.org\\n\\n```prettyprint lang-js\\nvar Weather = function() {\\n    this.channel = postal.channel( \\\"weather\\\" );\\n    this.channel.subscribe( \\\"fetch\\\", this.fetch ).withContext( this );\\n};\\n \\n_.extend(Weather.prototype, {\\n    fetch: function( city ) {\\n        $.ajax({\\n            url: \\\"http://openweathermap.org/data/2.1/find/name?q=\\\" + city + \\\"&units=imperial\\\",\\n            dataType: \\\"jsonp\\\",\\n            success: _.bind(function( data ) {\\n                this.channel.publish( \\\"fetched\\\", data.list[ 0 ] );\\n            }, this )\\n        });\\n    }\\n});\\n\\n \\nvar weather = new Weather();\\n```\\n\\n\\nThe Weather class listens on a channel called \\\"weather\\\". When a  \\\"fetch\\\" topic comes across, it preforms an ajax call to retrieve the weather. When the request comes back, the data is published back onto the weather channel with a topic of \\\"fetched\\\".\\n\\nHere's the app object.\\n\\n```prettyprint lang-js\\nvar App = function() {\\n    this.channel = postal.channel( \\\"weather\\\" );\\n    this.channel.subscribe( \\\"fetched\\\", this.gotWeather ).withContext( this );\\n};\\n \\n_.extend(App.prototype, {\\n    getWeather: function( city ) {\\n        this.channel.publish( \\\"fetch\\\", city );\\n    },\\n    gotWeather: function( data ) {\\n        console.log( \\\"weather retrieved\\\" );\\n    }\\n});\\nvar app = new App();\\n \\nUI.init();\\n \\napp.getWeather( \\\"Thompsons station, tn\\\" );\\n```\\n\\nThe app channel is listening on the \\\"weather\\\" channel for the \\\"fetched\\\" topic. When the \\\"fetched\\\" topic comes across, the gotWeather method is fired.\\n\\nThe UI code looks like...\\n\\n```prettyprint lang-js\\nvar UI = {\\n    init: function() {\\n        postal.channel( \\\"weather\\\" ).subscribe( \\\"fetched\\\", UI.showWeather );\\n    },\\n    showWeather: function( data ) {\\n        var weather = data.weather[0],\\n            displayWeather = \\\"\\\";\\n        displayWeather += \\\"The weather in \\\" + data.name + \\\" is \\\" + weather.description + \\\".\\\";\\n        displayWeather += \\\"The wind is \\\" + data.wind.speed + \\\"mpg, with gusts of \\\" + data.wind.gust + \\\".\\\";\\n         \\n        $( \\\"#weather\\\" ).html( displayWeather );\\n    }\\n};\\n```\\n\\nThe UI  sets up a subscription in the init method to also listen on the \\\"weather\\\" channel for the \\\"fetched\\\" topic.\\n\\nBy having postal in the app, the UI and the app are able to both receive information from the Weather object, yet none of the three objects know that each other exist! This means if ever there was a new portion of the application that needed the same weather information, another subscription could be created and have no effect on any other parts of the application.\\n\\nThe three different pieces could easily be unit tested completely separate from one another.\\n\\nHere's the fiddle of the working sample.\\n\\nhttp://jsfiddle.net/jcreamer898/xfRWt/\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Working with asynchronous code is one of the best features of JavaScript. With Ajax, it's very simple to request some JSON API, add a callback and update the UI with the result of that request very easily. Especially when using jQuery.</p>\n<p>However, writing an application that is testable, decoupled, and manageable, is a whole other beast. The typical approach to making Ajax requests in an application is to use jQuery's Ajax, pass a success callback and update the DOM with the response. That's great if you have some small application that doesn't need a lot of updates and manageability.</p>\n<p>What happens in an enterprise environment when someone writes that kind of shortcut Ajax code, makes a mess of the DOM in the success callback? You've just coupled your DOM directly to your request. What if the new boss comes in and says, &quot;I HATE TEH JQUERY!&quot;? Well, at that point you have to find the code in the success callback that messed with the DOM, rip it out, rewrite your Ajax logic, etc... It's a mess.</p>\n<p>A great way to solve this problem is through messaging. A great open-source JavaScript messaging library is postal. Take a look at how 3 objects having separate responsibilities can use postal and not know that each other exist, thereby decoupling the application, and making it testable as well!</p>\n<p>The weather is from <a href=\"http://openweathermap.org\">http://openweathermap.org</a></p>\n<pre><code class=\"language-prettyprint\">var Weather = function() {\n    this.channel = postal.channel( &quot;weather&quot; );\n    this.channel.subscribe( &quot;fetch&quot;, this.fetch ).withContext( this );\n};\n \n_.extend(Weather.prototype, {\n    fetch: function( city ) {\n        $.ajax({\n            url: &quot;http://openweathermap.org/data/2.1/find/name?q=&quot; + city + &quot;&amp;units=imperial&quot;,\n            dataType: &quot;jsonp&quot;,\n            success: _.bind(function( data ) {\n                this.channel.publish( &quot;fetched&quot;, data.list[ 0 ] );\n            }, this )\n        });\n    }\n});\n\n \nvar weather = new Weather();\n</code></pre>\n<p>The Weather class listens on a channel called &quot;weather&quot;. When a  &quot;fetch&quot; topic comes across, it preforms an ajax call to retrieve the weather. When the request comes back, the data is published back onto the weather channel with a topic of &quot;fetched&quot;.</p>\n<p>Here's the app object.</p>\n<pre><code class=\"language-prettyprint\">var App = function() {\n    this.channel = postal.channel( &quot;weather&quot; );\n    this.channel.subscribe( &quot;fetched&quot;, this.gotWeather ).withContext( this );\n};\n \n_.extend(App.prototype, {\n    getWeather: function( city ) {\n        this.channel.publish( &quot;fetch&quot;, city );\n    },\n    gotWeather: function( data ) {\n        console.log( &quot;weather retrieved&quot; );\n    }\n});\nvar app = new App();\n \nUI.init();\n \napp.getWeather( &quot;Thompsons station, tn&quot; );\n</code></pre>\n<p>The app channel is listening on the &quot;weather&quot; channel for the &quot;fetched&quot; topic. When the &quot;fetched&quot; topic comes across, the gotWeather method is fired.</p>\n<p>The UI code looks like...</p>\n<pre><code class=\"language-prettyprint\">var UI = {\n    init: function() {\n        postal.channel( &quot;weather&quot; ).subscribe( &quot;fetched&quot;, UI.showWeather );\n    },\n    showWeather: function( data ) {\n        var weather = data.weather[0],\n            displayWeather = &quot;&quot;;\n        displayWeather += &quot;The weather in &quot; + data.name + &quot; is &quot; + weather.description + &quot;.&quot;;\n        displayWeather += &quot;The wind is &quot; + data.wind.speed + &quot;mpg, with gusts of &quot; + data.wind.gust + &quot;.&quot;;\n         \n        $( &quot;#weather&quot; ).html( displayWeather );\n    }\n};\n</code></pre>\n<p>The UI  sets up a subscription in the init method to also listen on the &quot;weather&quot; channel for the &quot;fetched&quot; topic.</p>\n<p>By having postal in the app, the UI and the app are able to both receive information from the Weather object, yet none of the three objects know that each other exist! This means if ever there was a new portion of the application that needed the same weather information, another subscription could be created and have no effect on any other parts of the application.</p>\n<p>The three different pieces could easily be unit tested completely separate from one another.</p>\n<p>Here's the fiddle of the working sample.</p>\n<p><a href=\"http://jsfiddle.net/jcreamer898/xfRWt/\">http://jsfiddle.net/jcreamer898/xfRWt/</a></p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"4","plaintext":"Working with asynchronous code is one of the best features of JavaScript. With\nAjax, it's very simple to request some JSON API, add a callback and update the\nUI with the result of that request very easily. Especially when using jQuery.\n\nHowever, writing an application that is testable, decoupled, and manageable, is\na whole other beast. The typical approach to making Ajax requests in an\napplication is to use jQuery's Ajax, pass a success callback and update the DOM\nwith the response. That's great if you have some small application that doesn't\nneed a lot of updates and manageability.\n\nWhat happens in an enterprise environment when someone writes that kind of\nshortcut Ajax code, makes a mess of the DOM in the success callback? You've just\ncoupled your DOM directly to your request. What if the new boss comes in and\nsays, \"I HATE TEH JQUERY!\"? Well, at that point you have to find the code in the\nsuccess callback that messed with the DOM, rip it out, rewrite your Ajax logic,\netc... It's a mess.\n\nA great way to solve this problem is through messaging. A great open-source\nJavaScript messaging library is postal. Take a look at how 3 objects having\nseparate responsibilities can use postal and not know that each other exist,\nthereby decoupling the application, and making it testable as well!\n\nThe weather is from http://openweathermap.org\n\nvar Weather = function() {\n    this.channel = postal.channel( \"weather\" );\n    this.channel.subscribe( \"fetch\", this.fetch ).withContext( this );\n};\n \n_.extend(Weather.prototype, {\n    fetch: function( city ) {\n        $.ajax({\n            url: \"http://openweathermap.org/data/2.1/find/name?q=\" + city + \"&units=imperial\",\n            dataType: \"jsonp\",\n            success: _.bind(function( data ) {\n                this.channel.publish( \"fetched\", data.list[ 0 ] );\n            }, this )\n        });\n    }\n});\n\n \nvar weather = new Weather();\n\n\nThe Weather class listens on a channel called \"weather\". When a \"fetch\" topic\ncomes across, it preforms an ajax call to retrieve the weather. When the request\ncomes back, the data is published back onto the weather channel with a topic of\n\"fetched\".\n\nHere's the app object.\n\nvar App = function() {\n    this.channel = postal.channel( \"weather\" );\n    this.channel.subscribe( \"fetched\", this.gotWeather ).withContext( this );\n};\n \n_.extend(App.prototype, {\n    getWeather: function( city ) {\n        this.channel.publish( \"fetch\", city );\n    },\n    gotWeather: function( data ) {\n        console.log( \"weather retrieved\" );\n    }\n});\nvar app = new App();\n \nUI.init();\n \napp.getWeather( \"Thompsons station, tn\" );\n\n\nThe app channel is listening on the \"weather\" channel for the \"fetched\" topic.\nWhen the \"fetched\" topic comes across, the gotWeather method is fired.\n\nThe UI code looks like...\n\nvar UI = {\n    init: function() {\n        postal.channel( \"weather\" ).subscribe( \"fetched\", UI.showWeather );\n    },\n    showWeather: function( data ) {\n        var weather = data.weather[0],\n            displayWeather = \"\";\n        displayWeather += \"The weather in \" + data.name + \" is \" + weather.description + \".\";\n        displayWeather += \"The wind is \" + data.wind.speed + \"mpg, with gusts of \" + data.wind.gust + \".\";\n         \n        $( \"#weather\" ).html( displayWeather );\n    }\n};\n\n\nThe UI sets up a subscription in the init method to also listen on the \"weather\"\nchannel for the \"fetched\" topic.\n\nBy having postal in the app, the UI and the app are able to both receive\ninformation from the Weather object, yet none of the three objects know that\neach other exist! This means if ever there was a new portion of the application\nthat needed the same weather information, another subscription could be created\nand have no effect on any other parts of the application.\n\nThe three different pieces could easily be unit tested completely separate from\none another.\n\nHere's the fiddle of the working sample.\n\nhttp://jsfiddle.net/jcreamer898/xfRWt/","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-11-04 23:03:45","updated_at":"2014-01-07 19:59:57","published_at":"2013-11-04 18:00:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220545","uuid":"4902cc06-4131-41b5-b023-6d91c20c5acb","title":"Xbox One EPIC Clips","slug":"xbox-one-epic-clips","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\nI loves me some Xbox One! Here's some of my favorite clips from me yelling at my Xbox, \\\"XBOX Record THAT!\\\"\\n\\n### Titanfall\\n<iframe src=\\\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2118088&authkey=AJv-UaUGb_zXRSg\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2117043&authkey=AI4mr3DMegS-_MA\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n### Battlefield 4\\n\\n<iframe src=\\\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2123009&authkey=AEwGNHl_rxM7k8c\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114273&authkey=ACjCjRUkuPVsMck\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114272&authkey=ANbPj8k_52hzjBw\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114271&authkey=AEzdzKsqluu1gWg\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114270&authkey=AOz_fU1Sfi-yfrc\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2112344&authkey=AAoTeEsrURqx3Hk\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2112117&authkey=AK8RInx105kfSTg\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n### Call of Duty\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2111778&authkey=AGQOn_Ef53ZHzIc\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\\n\\n<iframe src=\\\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2111755&authkey=AHpJCBaqEFvy2Z0\\\" width=\\\"320\\\" height=\\\"180\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\"></iframe>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>I loves me some Xbox One! Here's some of my favorite clips from me yelling at my Xbox, &quot;XBOX Record THAT!&quot;</p>\n<h3 id=\"titanfall\">Titanfall</h3>\n<iframe src=\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2118088&authkey=AJv-UaUGb_zXRSg\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2117043&authkey=AI4mr3DMegS-_MA\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<h3 id=\"battlefield4\">Battlefield 4</h3>\n<iframe src=\"https://onedrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2123009&authkey=AEwGNHl_rxM7k8c\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114273&authkey=ACjCjRUkuPVsMck\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114272&authkey=ANbPj8k_52hzjBw\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114271&authkey=AEzdzKsqluu1gWg\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2114270&authkey=AOz_fU1Sfi-yfrc\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2112344&authkey=AAoTeEsrURqx3Hk\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2112117&authkey=AK8RInx105kfSTg\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<h3 id=\"callofduty\">Call of Duty</h3>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2111778&authkey=AGQOn_Ef53ZHzIc\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<iframe src=\"https://skydrive.live.com/embed?cid=7F22C631A21F8210&resid=7F22C631A21F8210%2111755&authkey=AHpJCBaqEFvy2Z0\" width=\"320\" height=\"180\" frameborder=\"0\" scrolling=\"no\"></iframe><!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"5","plaintext":"I loves me some Xbox One! Here's some of my favorite clips from me yelling at my\nXbox, \"XBOX Record THAT!\"\n\nTitanfall\nBattlefield 4\nCall of Duty","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-01-28 19:33:13","updated_at":"2014-07-18 13:41:37","published_at":"2014-01-28 19:33:17","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220546","uuid":"33fad871-df00-4211-afb0-ee38e2c8e465","title":"The most beautiful sound in the world","slug":"the-most-beautiful-sound-in-the-world","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Went to the doctor for our 13 week baby appointment today. Doctor said everything was all good!\\n\\nHere's the heartbeat of little Creamer...\\n\\n<audio src=\\\"http://d.pr/a/xBBW+\\\" controls>\\n</audio>\\n\\nSo excited for this October when our family will grow by one... \\n\\n![](http://d.pr/i/aWKx+)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Went to the doctor for our 13 week baby appointment today. Doctor said everything was all good!</p>\n<p>Here's the heartbeat of little Creamer...</p>\n<audio src=\"http://d.pr/a/xBBW+\" controls>\n</audio>\n<p>So excited for this October when our family will grow by one...</p>\n<p><img src=\"http://d.pr/i/aWKx+\" alt=\"\"></p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"6","plaintext":"Went to the doctor for our 13 week baby appointment today. Doctor said\neverything was all good!\n\nHere's the heartbeat of little Creamer...\n\nSo excited for this October when our family will grow by one...","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-03-28 16:29:56","updated_at":"2014-03-28 16:29:56","published_at":"2014-03-28 16:29:56","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220547","uuid":"09502a6c-6973-429d-9e5b-814ca451f08f","title":"Excited to become a Microsoft MVP","slug":"excited-to-become-a-microsoft-mvp","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Yesterday I was honored to join the list of Microsoft MVP's! I am now an MVP for Internet Explorer.\\n\\n[http://mvp.microsoft.com/en-us/mvp/Jonathan%20Creamer-5000770](http://mvp.microsoft.com/en-us/mvp/Jonathan%20Creamer-5000770)\\n\\nAn IE MVP is recognized for supporting the web community at large, meaning I'm an MVP of JavaScript, HTML, and CSS, etc.\\n\\nI hope to continue growing as a developer, and getting better at reaching larger audiences to help others grow.\\n\\nMy long term goals as a programmer have always been to learn as much as possible, and then turn right around and spread that knowledge to others to help THEM grow as much as possible.\\n\\nBy getting awards like the MVP award, joining programs like the [IEuserAgents][1], [tweeting][2], [blogging][3], attending user groups and conferences, I hope to able to reach out to more and more people in the community.\\n\\nThanks to those of you in the community who follow me! \\n\\n  [1]: http://useragents.ie\\n  [2]: http://twitter.com/jcreamer898\\n  [3]: http://tech.pro/jonathancreamer\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Yesterday I was honored to join the list of Microsoft MVP's! I am now an MVP for Internet Explorer.</p>\n<p><a href=\"http://mvp.microsoft.com/en-us/mvp/Jonathan%20Creamer-5000770\">http://mvp.microsoft.com/en-us/mvp/Jonathan%20Creamer-5000770</a></p>\n<p>An IE MVP is recognized for supporting the web community at large, meaning I'm an MVP of JavaScript, HTML, and CSS, etc.</p>\n<p>I hope to continue growing as a developer, and getting better at reaching larger audiences to help others grow.</p>\n<p>My long term goals as a programmer have always been to learn as much as possible, and then turn right around and spread that knowledge to others to help THEM grow as much as possible.</p>\n<p>By getting awards like the MVP award, joining programs like the <a href=\"http://useragents.ie\">IEuserAgents</a>, <a href=\"http://twitter.com/jcreamer898\">tweeting</a>, <a href=\"http://tech.pro/jonathancreamer\">blogging</a>, attending user groups and conferences, I hope to able to reach out to more and more people in the community.</p>\n<p>Thanks to those of you in the community who follow me!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"7","plaintext":"Yesterday I was honored to join the list of Microsoft MVP's! I am now an MVP for\nInternet Explorer.\n\nhttp://mvp.microsoft.com/en-us/mvp/Jonathan%20Creamer-5000770\n\nAn IE MVP is recognized for supporting the web community at large, meaning I'm\nan MVP of JavaScript, HTML, and CSS, etc.\n\nI hope to continue growing as a developer, and getting better at reaching larger\naudiences to help others grow.\n\nMy long term goals as a programmer have always been to learn as much as\npossible, and then turn right around and spread that knowledge to others to help\nTHEM grow as much as possible.\n\nBy getting awards like the MVP award, joining programs like the IEuserAgents\n[http://useragents.ie], tweeting [http://twitter.com/jcreamer898], blogging\n[http://tech.pro/jonathancreamer], attending user groups and conferences, I hope\nto able to reach out to more and more people in the community.\n\nThanks to those of you in the community who follow me!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-04-08 20:06:37","updated_at":"2014-04-08 20:06:37","published_at":"2014-04-08 20:06:37","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220548","uuid":"824436a6-e6ae-49a7-8bd5-58182fff4d4c","title":"Epic return to the wonderful land of appendTo","slug":"epic-return-to-the-wonderful-land-of-appendto","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The last 5 months of my life have been filled with great things while working for the startup over at Tech.pro.\\n\\nSometimes good things don't last super long though, and today is my first day back with my great friends at [appendTo](http://appendto.com).\\n\\n![](http://d.pr/i/iPiH+)\\n\\nIn the last few months I've gotten my mind blown by [Leland Richardson](https://twitter.com/intelligibabble) and [Jesse Lisby](https://twitter.com/jesselisby). Armed with my new knowledge, as of today I've returned back to appendTo as a JavaScript Engineer!\\n\\nI'm looking forward to continuing to grow my JavaScript fu with the brilliant people at appendTo.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>The last 5 months of my life have been filled with great things while working for the startup over at Tech.pro.</p>\n<p>Sometimes good things don't last super long though, and today is my first day back with my great friends at <a href=\"http://appendto.com\">appendTo</a>.</p>\n<p><img src=\"http://d.pr/i/iPiH+\" alt=\"\"></p>\n<p>In the last few months I've gotten my mind blown by <a href=\"https://twitter.com/intelligibabble\">Leland Richardson</a> and <a href=\"https://twitter.com/jesselisby\">Jesse Lisby</a>. Armed with my new knowledge, as of today I've returned back to appendTo as a JavaScript Engineer!</p>\n<p>I'm looking forward to continuing to grow my JavaScript fu with the brilliant people at appendTo.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"8","plaintext":"The last 5 months of my life have been filled with great things while working\nfor the startup over at Tech.pro.\n\nSometimes good things don't last super long though, and today is my first day\nback with my great friends at appendTo [http://appendto.com].\n\n\n\nIn the last few months I've gotten my mind blown by Leland Richardson\n[https://twitter.com/intelligibabble] and Jesse Lisby\n[https://twitter.com/jesselisby]. Armed with my new knowledge, as of today I've\nreturned back to appendTo as a JavaScript Engineer!\n\nI'm looking forward to continuing to grow my JavaScript fu with the brilliant\npeople at appendTo.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-04-16 15:49:36","updated_at":"2014-05-22 21:15:16","published_at":"2014-04-16 15:49:45","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220549","uuid":"591a96f3-9a6c-4562-9f6b-679a69d9ac7f","title":"An angular.js event bus with postal.js","slug":"an-angular-event-bus-with-postal-js","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ideally in an angular application, controllers are independent units of code that have no reference to any other controllers. There are cases though in which you may need to communicate with other controllers in your application. For example you may have an `Orders` controller, that needs to tell a `Cart` controller that a new item has been added.\\n\\nOne of the best ways of accomplishing this type of communication is through the use of an event bus.\\n\\nMy favorite event bus framework is [postal.js](http://github.com/postaljs/postal.js). \\n\\n### What is it?\\n\\n> Postal.js is an in-memory message bus - very loosely inspired by AMQP - written in JavaScript. Postal.js runs in the browser, or on the server-side using Node.js. It takes the familiar \\\"eventing-style\\\" paradigm (of which most JavaScript developers are familiar) and extends it by providing \\\"broker\\\" and subscriber implementations which are more sophisticated than what you typically find in simple event delegation.\\n\\nYou can use postal by publishing messages accross specific channels. In this way you can segregate your messages to things like `app`, `cart`, `ui`, etc. It also uses an *envelope* pattern to prevent having **n** arguments in your subscription callbacks.\\n\\nUsing postal.js, you can easily decorate the `$scope` and add a `$bus` that will allow you to communicate with other controllers in your application.\\n\\n```prettyprint lang-js\\nangular.module('myApp')\\n    .config(function ($provide) {\\n        $provide.decorator('$rootScope', [\\n        \\t'$delegate', function ($delegate) {\\n            Object.defineProperty($delegate.constructor.prototype, \\n            '$bus', {\\n                value: postal,\\n                enumerable: false\\n            });\\n\\n            return $delegate;\\n        }]);\\n    });\\n```\\n\\nNow in your controllers you have postal available as `$scope.$bus`...\\n\\n\\n```prettyprint lang-js\\n'use strict';\\n\\nangular.module('myApp')\\n    .controller('CartCtrl', ['$scope', function ($scope) {\\n        $scope.$bus.subscribe({\\n            channel: 'orders',\\n            topic: 'order.new',\\n            callback: function(data, envelope) {\\n                console.log('it worked', data, evenlope);\\n            }\\n        });\\n    }\\n])\\n\\t.controller('OrderCtrl', ['$scope', function ($scope) {\\n        $scope.order = function() {\\n        \\t$scope.$bus.publish({\\n              channel: 'orders',\\n              topic: 'order.new',\\n              data: { /* order info */ }\\n          });\\n        };\\n    }\\n]);\\n```\\n\\nIn the `CartCtrl`, the `$scope.$bus.subscribe` method is called. This subscription gets set up to listen on the `orders` channel for any messages with the `order.new` topic. When a message comes throught that matches that topic, the `callback` will be invoked.\\n\\nIn the `OrderCtrl`, the `$scope.$bus.publish` method is called whenever `$scope.order` is called. This publishes a message on the right channel, with the right topic that will trigger the subscription. The `data` sent via the publish will be recieved in the `callback` of the subscription, as well as an `envelope`, which is a wrapper around the data.\\n\\n### Conclusion\\nUsing the `$bus` decorator makes communicating with other controllers extremely simple. Of course you can use any messaging framework you'd like. If you'd like to learn more about postal, check out the repo, clone it, and feel free to give [Jim Cowart](http://twitter.com/ifandelse) some love for making such a great library!\\n\\n## UPDATE 5/6/14\\nA commenter pointed out that there's a potential memory leak since controller instances are created multiple times. I went in and took a look and added some code to listen to the `$destroy` event on the scope and call unsubscribe.\\n\\n```prettyprint lang-js\\nangular.module('introToAngularApp')\\n.config(function ($provide) {\\n    $provide.decorator('$rootScope', ['$delegate', function ($delegate) {\\n        Object.defineProperty($delegate.constructor.prototype, '$bus', {\\n            get: function() {\\n                var self = this;\\n\\n                return {\\n                    subscribe: function() {\\n                        var sub = postal.subscribe.apply(postal, arguments);\\n\\n                        self.$on('$destroy',\\n                        function() {\\n                            sub.unsubscribe();\\n                        });\\n                    },\\n                    channel: postal.channel,\\n                    publish: postal.publish\\n                };\\n            },\\n            enumerable: false\\n        });\\n\\n        return $delegate;\\n    }]);\\n});\\n```\\n\\nI had to use the `get` of `Object.defineProperty` so that I can have a hold of the correct `this` for the `$on`. Then it simply listens for that event, and calls `sub.unsubscribe()`.\\n\\nThat should help alleviate any memory leak problems!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Ideally in an angular application, controllers are independent units of code that have no reference to any other controllers. There are cases though in which you may need to communicate with other controllers in your application. For example you may have an <code>Orders</code> controller, that needs to tell a <code>Cart</code> controller that a new item has been added.</p>\n<p>One of the best ways of accomplishing this type of communication is through the use of an event bus.</p>\n<p>My favorite event bus framework is <a href=\"http://github.com/postaljs/postal.js\">postal.js</a>.</p>\n<h3 id=\"whatisit\">What is it?</h3>\n<blockquote>\n<p>Postal.js is an in-memory message bus - very loosely inspired by AMQP - written in JavaScript. Postal.js runs in the browser, or on the server-side using Node.js. It takes the familiar &quot;eventing-style&quot; paradigm (of which most JavaScript developers are familiar) and extends it by providing &quot;broker&quot; and subscriber implementations which are more sophisticated than what you typically find in simple event delegation.</p>\n</blockquote>\n<p>You can use postal by publishing messages accross specific channels. In this way you can segregate your messages to things like <code>app</code>, <code>cart</code>, <code>ui</code>, etc. It also uses an <em>envelope</em> pattern to prevent having <strong>n</strong> arguments in your subscription callbacks.</p>\n<p>Using postal.js, you can easily decorate the <code>$scope</code> and add a <code>$bus</code> that will allow you to communicate with other controllers in your application.</p>\n<pre><code class=\"language-prettyprint\">angular.module('myApp')\n    .config(function ($provide) {\n        $provide.decorator('$rootScope', [\n        \t'$delegate', function ($delegate) {\n            Object.defineProperty($delegate.constructor.prototype, \n            '$bus', {\n                value: postal,\n                enumerable: false\n            });\n\n            return $delegate;\n        }]);\n    });\n</code></pre>\n<p>Now in your controllers you have postal available as <code>$scope.$bus</code>...</p>\n<pre><code class=\"language-prettyprint\">'use strict';\n\nangular.module('myApp')\n    .controller('CartCtrl', ['$scope', function ($scope) {\n        $scope.$bus.subscribe({\n            channel: 'orders',\n            topic: 'order.new',\n            callback: function(data, envelope) {\n                console.log('it worked', data, evenlope);\n            }\n        });\n    }\n])\n\t.controller('OrderCtrl', ['$scope', function ($scope) {\n        $scope.order = function() {\n        \t$scope.$bus.publish({\n              channel: 'orders',\n              topic: 'order.new',\n              data: { /* order info */ }\n          });\n        };\n    }\n]);\n</code></pre>\n<p>In the <code>CartCtrl</code>, the <code>$scope.$bus.subscribe</code> method is called. This subscription gets set up to listen on the <code>orders</code> channel for any messages with the <code>order.new</code> topic. When a message comes throught that matches that topic, the <code>callback</code> will be invoked.</p>\n<p>In the <code>OrderCtrl</code>, the <code>$scope.$bus.publish</code> method is called whenever <code>$scope.order</code> is called. This publishes a message on the right channel, with the right topic that will trigger the subscription. The <code>data</code> sent via the publish will be recieved in the <code>callback</code> of the subscription, as well as an <code>envelope</code>, which is a wrapper around the data.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Using the <code>$bus</code> decorator makes communicating with other controllers extremely simple. Of course you can use any messaging framework you'd like. If you'd like to learn more about postal, check out the repo, clone it, and feel free to give <a href=\"http://twitter.com/ifandelse\">Jim Cowart</a> some love for making such a great library!</p>\n<h2 id=\"update5614\">UPDATE 5/6/14</h2>\n<p>A commenter pointed out that there's a potential memory leak since controller instances are created multiple times. I went in and took a look and added some code to listen to the <code>$destroy</code> event on the scope and call unsubscribe.</p>\n<pre><code class=\"language-prettyprint\">angular.module('introToAngularApp')\n.config(function ($provide) {\n    $provide.decorator('$rootScope', ['$delegate', function ($delegate) {\n        Object.defineProperty($delegate.constructor.prototype, '$bus', {\n            get: function() {\n                var self = this;\n\n                return {\n                    subscribe: function() {\n                        var sub = postal.subscribe.apply(postal, arguments);\n\n                        self.$on('$destroy',\n                        function() {\n                            sub.unsubscribe();\n                        });\n                    },\n                    channel: postal.channel,\n                    publish: postal.publish\n                };\n            },\n            enumerable: false\n        });\n\n        return $delegate;\n    }]);\n});\n</code></pre>\n<p>I had to use the <code>get</code> of <code>Object.defineProperty</code> so that I can have a hold of the correct <code>this</code> for the <code>$on</code>. Then it simply listens for that event, and calls <code>sub.unsubscribe()</code>.</p>\n<p>That should help alleviate any memory leak problems!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"9","plaintext":"Ideally in an angular application, controllers are independent units of code\nthat have no reference to any other controllers. There are cases though in which\nyou may need to communicate with other controllers in your application. For\nexample you may have an Orders controller, that needs to tell a Cart controller\nthat a new item has been added.\n\nOne of the best ways of accomplishing this type of communication is through the\nuse of an event bus.\n\nMy favorite event bus framework is postal.js\n[http://github.com/postaljs/postal.js].\n\nWhat is it?\n> Postal.js is an in-memory message bus - very loosely inspired by AMQP - written\nin JavaScript. Postal.js runs in the browser, or on the server-side using\nNode.js. It takes the familiar \"eventing-style\" paradigm (of which most\nJavaScript developers are familiar) and extends it by providing \"broker\" and\nsubscriber implementations which are more sophisticated than what you typically\nfind in simple event delegation.\n\n\nYou can use postal by publishing messages accross specific channels. In this way\nyou can segregate your messages to things like app, cart, ui, etc. It also uses\nan envelope pattern to prevent having n arguments in your subscription\ncallbacks.\n\nUsing postal.js, you can easily decorate the $scope and add a $bus that will\nallow you to communicate with other controllers in your application.\n\nangular.module('myApp')\n    .config(function ($provide) {\n        $provide.decorator('$rootScope', [\n        \t'$delegate', function ($delegate) {\n            Object.defineProperty($delegate.constructor.prototype, \n            '$bus', {\n                value: postal,\n                enumerable: false\n            });\n\n            return $delegate;\n        }]);\n    });\n\n\nNow in your controllers you have postal available as $scope.$bus...\n\n'use strict';\n\nangular.module('myApp')\n    .controller('CartCtrl', ['$scope', function ($scope) {\n        $scope.$bus.subscribe({\n            channel: 'orders',\n            topic: 'order.new',\n            callback: function(data, envelope) {\n                console.log('it worked', data, evenlope);\n            }\n        });\n    }\n])\n\t.controller('OrderCtrl', ['$scope', function ($scope) {\n        $scope.order = function() {\n        \t$scope.$bus.publish({\n              channel: 'orders',\n              topic: 'order.new',\n              data: { /* order info */ }\n          });\n        };\n    }\n]);\n\n\nIn the CartCtrl, the $scope.$bus.subscribe method is called. This subscription\ngets set up to listen on the orders channel for any messages with the order.new \ntopic. When a message comes throught that matches that topic, the callback will\nbe invoked.\n\nIn the OrderCtrl, the $scope.$bus.publish method is called whenever $scope.order \nis called. This publishes a message on the right channel, with the right topic\nthat will trigger the subscription. The data sent via the publish will be\nrecieved in the callback of the subscription, as well as an envelope, which is a\nwrapper around the data.\n\nConclusion\nUsing the $bus decorator makes communicating with other controllers extremely\nsimple. Of course you can use any messaging framework you'd like. If you'd like\nto learn more about postal, check out the repo, clone it, and feel free to give \nJim Cowart [http://twitter.com/ifandelse] some love for making such a great\nlibrary!\n\nUPDATE 5/6/14\nA commenter pointed out that there's a potential memory leak since controller\ninstances are created multiple times. I went in and took a look and added some\ncode to listen to the $destroy event on the scope and call unsubscribe.\n\nangular.module('introToAngularApp')\n.config(function ($provide) {\n    $provide.decorator('$rootScope', ['$delegate', function ($delegate) {\n        Object.defineProperty($delegate.constructor.prototype, '$bus', {\n            get: function() {\n                var self = this;\n\n                return {\n                    subscribe: function() {\n                        var sub = postal.subscribe.apply(postal, arguments);\n\n                        self.$on('$destroy',\n                        function() {\n                            sub.unsubscribe();\n                        });\n                    },\n                    channel: postal.channel,\n                    publish: postal.publish\n                };\n            },\n            enumerable: false\n        });\n\n        return $delegate;\n    }]);\n});\n\n\nI had to use the get of Object.defineProperty so that I can have a hold of the\ncorrect this for the $on. Then it simply listens for that event, and calls \nsub.unsubscribe().\n\nThat should help alleviate any memory leak problems!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-04-30 19:01:03","updated_at":"2014-05-06 16:40:53","published_at":"2014-04-30 19:01:23","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054a","uuid":"83a73c4b-cfd2-4656-add0-10dadfccc77f","title":"The state of angularjs controllers","slug":"the-state-of-angularjs-controllers","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Angular.js is based on the ever popular MVC architecture pattern. However, like many other JavaScript frameworks, MVC can very easily be muddied up and misused.\\n\\nUnderstanding the framework you're using, whether that be Angular, Backbone, etc, and how the different M-V-? pieces work together is important to the maintainability and scalability of your application. When the ideas of these different MV? architectures get misconstrued, bad things can happen.\\n\\nFor example in Angular, you'll see many examples of controllers holding model state that in reality they probably should not be. \\n\\n> The third part, the controller, accepts input and converts it to commands for the model or view.  \\n-- Wikipedia (1)\\n\\nThe controller's job is not to be the model, the controller's job is to talk to the \\\"model\\\".\\n\\nFor example, take an order controller...\\n\\n```prettyprint lang-js\\nangular.module('Store', [])\\n.controller('OrderCtrl', function(Products) {\\n    this.products = Products.query();\\n    \\n    this.items = [];\\n    \\n    this.addToOrder = function(item) {\\n        this.items.push(item);\\n    };\\n    \\n    this.removeFromOrder = function(item) {\\n        this.items.splice(this.items.indexOf(item), 1);\\n    };\\n    \\n    this.totalPrice = function() {\\n        return this.items.reduce(function(memo, item) {\\n            return memo + (item.qty * item.price);\\n        }, 0);\\n    };\\n});\\n```\\n\\nWhat you have here is a controller that has a list of `products` retrieved from the `Products` service. Then there is a list of `items` that is on the `OrderCtrl`. At first glance, this is not unlike much of the code you'll see in Angular's docs https://docs.angularjs.org/api/ng/directive/ngController. \\n\\nFor a \\\"small prototype\\\", maybe that's fine. For larger apps however, probably not a great idea. What if you need to have a cart controller that displays the total items in your order, or the price? What if you want to have a separate order controller in some other widget? \\n\\nYou'll either end up duplicating code, or having to hack some way for the controllers to talk to each other to keep their state up to date.\\n\\nThe solution to this problem is to do utilize the \\\"M\\\" of MVC properly and move that state out of your controller into some \\\"model\\\".\\n\\nWith angular, there's a little bit of ambiguity in what the \\\"M\\\" really is. I like to think of the \\\"model\\\" as the actual data you retrieve from the backend, and how you retrieve it on the client. With angular the ambiguity in the \\\"model\\\" is made difficult in part because there are lots of different ways to create a \\\"model\\\" aka services, factories, and providers. That's why there are so many [questions](http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory) on stack overflow about it.\\n\\nOne of the easiest ways to deal with it is to use `angular.factory` as a \\\"model\\\".\\n\\n```prettyprint lang-js\\nangular.module('Store')\\n.factory('Order', function() {    \\n    var add = function(item) {\\n        this.items.push(item);\\n    };\\n    \\n    var remove = function(item) {\\n        if (this.items.indexOf(item) > -1) {\\n          this.items.splice(this.items.indexOf(item), 1);  \\n        }\\n    };\\n    \\n    var total = function() {\\n        return this.items.reduce(function(memo, item) {\\n            return memo + (item.qty * item.price);\\n        }, 0);\\n    };\\n\\n    return {\\n    \\titems: [],\\n        addToOrder: add,\\n        removeFromOrder: remove,\\n        totalPrice: total\\n    };\\n});\\n```\\n\\nYou now have an injectable \\\"model\\\" you can span across multiple controllers, and remove the state from the controller.\\n\\n```prettyprint lang-js\\nangular.module('Store', [])\\n.controller('OrderCtrl', function(Products, Order) {\\n    this.products = Products.query();\\n    this.items = Order.items;\\n    \\n    this.addToOrder = function(item) {\\n\\t\\tOrder.addToOrder(item);\\n    };\\n    \\n    this.removeFromOrder = function(item) {\\n        Order.removeFromOrder(item);\\n    };\\n    \\n    this.totalPrice = function() {\\n    \\treturn Order.total();\\n    };\\n});\\n```\\n\\nThe controller is now much thinner, and holds no state. This is important because controllers are created and destroyed very often in the lifecycle of an angular app, whereas a `factory` is only created a single time.\\n\\nNow you can use the `Order` \\\"model\\\" in other controllers quite easily.\\n\\n```prettyprint lang-js\\nangular.module('Store', [])\\n.controller('CartCtrl', function($scope, Order) {\\n    $scope.items = Order.items;\\n  \\n    $scope.$watchCollection('items', function() {\\n      $scope.totalPrice = Order.totalPrice().toFixed(2);\\n    });\\n});\\n```\\n\\nThe `$scope.$watchCollection` can keep an eye out for changes on the `Order.items` array and update the `$scope.totalPrice` when the items change.\\n\\nThere are other ways of doing this such as firing an event when a new item is added to the `Order`, but this should work in this case. The main benefit here is that the order has been pulled out into it's own \\\"model\\\" that can more easily be reused in other parts of the application.\\n\\nHere's a JSBin of the code above... \\n\\n<a class=\\\"jsbin-embed\\\" href=\\\"http://jsbin.com/rifob/1/embed?js,output\\\">JS Bin</a><script src=\\\"http://static.jsbin.com/js/embed.js\\\"></script>\\n\\n1. http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Angular.js is based on the ever popular MVC architecture pattern. However, like many other JavaScript frameworks, MVC can very easily be muddied up and misused.</p>\n<p>Understanding the framework you're using, whether that be Angular, Backbone, etc, and how the different M-V-? pieces work together is important to the maintainability and scalability of your application. When the ideas of these different MV? architectures get misconstrued, bad things can happen.</p>\n<p>For example in Angular, you'll see many examples of controllers holding model state that in reality they probably should not be.</p>\n<blockquote>\n<p>The third part, the controller, accepts input and converts it to commands for the model or view.<br>\n-- Wikipedia (1)</p>\n</blockquote>\n<p>The controller's job is not to be the model, the controller's job is to talk to the &quot;model&quot;.</p>\n<p>For example, take an order controller...</p>\n<pre><code class=\"language-prettyprint\">angular.module('Store', [])\n.controller('OrderCtrl', function(Products) {\n    this.products = Products.query();\n    \n    this.items = [];\n    \n    this.addToOrder = function(item) {\n        this.items.push(item);\n    };\n    \n    this.removeFromOrder = function(item) {\n        this.items.splice(this.items.indexOf(item), 1);\n    };\n    \n    this.totalPrice = function() {\n        return this.items.reduce(function(memo, item) {\n            return memo + (item.qty * item.price);\n        }, 0);\n    };\n});\n</code></pre>\n<p>What you have here is a controller that has a list of <code>products</code> retrieved from the <code>Products</code> service. Then there is a list of <code>items</code> that is on the <code>OrderCtrl</code>. At first glance, this is not unlike much of the code you'll see in Angular's docs <a href=\"https://docs.angularjs.org/api/ng/directive/ngController\">https://docs.angularjs.org/api/ng/directive/ngController</a>.</p>\n<p>For a &quot;small prototype&quot;, maybe that's fine. For larger apps however, probably not a great idea. What if you need to have a cart controller that displays the total items in your order, or the price? What if you want to have a separate order controller in some other widget?</p>\n<p>You'll either end up duplicating code, or having to hack some way for the controllers to talk to each other to keep their state up to date.</p>\n<p>The solution to this problem is to do utilize the &quot;M&quot; of MVC properly and move that state out of your controller into some &quot;model&quot;.</p>\n<p>With angular, there's a little bit of ambiguity in what the &quot;M&quot; really is. I like to think of the &quot;model&quot; as the actual data you retrieve from the backend, and how you retrieve it on the client. With angular the ambiguity in the &quot;model&quot; is made difficult in part because there are lots of different ways to create a &quot;model&quot; aka services, factories, and providers. That's why there are so many <a href=\"http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\">questions</a> on stack overflow about it.</p>\n<p>One of the easiest ways to deal with it is to use <code>angular.factory</code> as a &quot;model&quot;.</p>\n<pre><code class=\"language-prettyprint\">angular.module('Store')\n.factory('Order', function() {    \n    var add = function(item) {\n        this.items.push(item);\n    };\n    \n    var remove = function(item) {\n        if (this.items.indexOf(item) &gt; -1) {\n          this.items.splice(this.items.indexOf(item), 1);  \n        }\n    };\n    \n    var total = function() {\n        return this.items.reduce(function(memo, item) {\n            return memo + (item.qty * item.price);\n        }, 0);\n    };\n\n    return {\n    \titems: [],\n        addToOrder: add,\n        removeFromOrder: remove,\n        totalPrice: total\n    };\n});\n</code></pre>\n<p>You now have an injectable &quot;model&quot; you can span across multiple controllers, and remove the state from the controller.</p>\n<pre><code class=\"language-prettyprint\">angular.module('Store', [])\n.controller('OrderCtrl', function(Products, Order) {\n    this.products = Products.query();\n    this.items = Order.items;\n    \n    this.addToOrder = function(item) {\n\t\tOrder.addToOrder(item);\n    };\n    \n    this.removeFromOrder = function(item) {\n        Order.removeFromOrder(item);\n    };\n    \n    this.totalPrice = function() {\n    \treturn Order.total();\n    };\n});\n</code></pre>\n<p>The controller is now much thinner, and holds no state. This is important because controllers are created and destroyed very often in the lifecycle of an angular app, whereas a <code>factory</code> is only created a single time.</p>\n<p>Now you can use the <code>Order</code> &quot;model&quot; in other controllers quite easily.</p>\n<pre><code class=\"language-prettyprint\">angular.module('Store', [])\n.controller('CartCtrl', function($scope, Order) {\n    $scope.items = Order.items;\n  \n    $scope.$watchCollection('items', function() {\n      $scope.totalPrice = Order.totalPrice().toFixed(2);\n    });\n});\n</code></pre>\n<p>The <code>$scope.$watchCollection</code> can keep an eye out for changes on the <code>Order.items</code> array and update the <code>$scope.totalPrice</code> when the items change.</p>\n<p>There are other ways of doing this such as firing an event when a new item is added to the <code>Order</code>, but this should work in this case. The main benefit here is that the order has been pulled out into it's own &quot;model&quot; that can more easily be reused in other parts of the application.</p>\n<p>Here's a JSBin of the code above...</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/rifob/1/embed?js,output\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<ol>\n<li><a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">http://en.wikipedia.org/wiki/Model–view–controller</a></li>\n</ol>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"10","plaintext":"Angular.js is based on the ever popular MVC architecture pattern. However, like\nmany other JavaScript frameworks, MVC can very easily be muddied up and misused.\n\nUnderstanding the framework you're using, whether that be Angular, Backbone,\netc, and how the different M-V-? pieces work together is important to the\nmaintainability and scalability of your application. When the ideas of these\ndifferent MV? architectures get misconstrued, bad things can happen.\n\nFor example in Angular, you'll see many examples of controllers holding model\nstate that in reality they probably should not be.\n\n> The third part, the controller, accepts input and converts it to commands for\nthe model or view.\n-- Wikipedia (1)\n\n\nThe controller's job is not to be the model, the controller's job is to talk to\nthe \"model\".\n\nFor example, take an order controller...\n\nangular.module('Store', [])\n.controller('OrderCtrl', function(Products) {\n    this.products = Products.query();\n    \n    this.items = [];\n    \n    this.addToOrder = function(item) {\n        this.items.push(item);\n    };\n    \n    this.removeFromOrder = function(item) {\n        this.items.splice(this.items.indexOf(item), 1);\n    };\n    \n    this.totalPrice = function() {\n        return this.items.reduce(function(memo, item) {\n            return memo + (item.qty * item.price);\n        }, 0);\n    };\n});\n\n\nWhat you have here is a controller that has a list of products retrieved from\nthe Products service. Then there is a list of items that is on the OrderCtrl. At\nfirst glance, this is not unlike much of the code you'll see in Angular's docs \nhttps://docs.angularjs.org/api/ng/directive/ngController.\n\nFor a \"small prototype\", maybe that's fine. For larger apps however, probably\nnot a great idea. What if you need to have a cart controller that displays the\ntotal items in your order, or the price? What if you want to have a separate\norder controller in some other widget?\n\nYou'll either end up duplicating code, or having to hack some way for the\ncontrollers to talk to each other to keep their state up to date.\n\nThe solution to this problem is to do utilize the \"M\" of MVC properly and move\nthat state out of your controller into some \"model\".\n\nWith angular, there's a little bit of ambiguity in what the \"M\" really is. I\nlike to think of the \"model\" as the actual data you retrieve from the backend,\nand how you retrieve it on the client. With angular the ambiguity in the \"model\"\nis made difficult in part because there are lots of different ways to create a\n\"model\" aka services, factories, and providers. That's why there are so many \nquestions\n[http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory] \non stack overflow about it.\n\nOne of the easiest ways to deal with it is to use angular.factory as a \"model\".\n\nangular.module('Store')\n.factory('Order', function() {    \n    var add = function(item) {\n        this.items.push(item);\n    };\n    \n    var remove = function(item) {\n        if (this.items.indexOf(item) > -1) {\n          this.items.splice(this.items.indexOf(item), 1);  \n        }\n    };\n    \n    var total = function() {\n        return this.items.reduce(function(memo, item) {\n            return memo + (item.qty * item.price);\n        }, 0);\n    };\n\n    return {\n    \titems: [],\n        addToOrder: add,\n        removeFromOrder: remove,\n        totalPrice: total\n    };\n});\n\n\nYou now have an injectable \"model\" you can span across multiple controllers, and\nremove the state from the controller.\n\nangular.module('Store', [])\n.controller('OrderCtrl', function(Products, Order) {\n    this.products = Products.query();\n    this.items = Order.items;\n    \n    this.addToOrder = function(item) {\n\t\tOrder.addToOrder(item);\n    };\n    \n    this.removeFromOrder = function(item) {\n        Order.removeFromOrder(item);\n    };\n    \n    this.totalPrice = function() {\n    \treturn Order.total();\n    };\n});\n\n\nThe controller is now much thinner, and holds no state. This is important\nbecause controllers are created and destroyed very often in the lifecycle of an\nangular app, whereas a factory is only created a single time.\n\nNow you can use the Order \"model\" in other controllers quite easily.\n\nangular.module('Store', [])\n.controller('CartCtrl', function($scope, Order) {\n    $scope.items = Order.items;\n  \n    $scope.$watchCollection('items', function() {\n      $scope.totalPrice = Order.totalPrice().toFixed(2);\n    });\n});\n\n\nThe $scope.$watchCollection can keep an eye out for changes on the Order.items \narray and update the $scope.totalPrice when the items change.\n\nThere are other ways of doing this such as firing an event when a new item is\nadded to the Order, but this should work in this case. The main benefit here is\nthat the order has been pulled out into it's own \"model\" that can more easily be\nreused in other parts of the application.\n\nHere's a JSBin of the code above...\n\nJS Bin [http://jsbin.com/rifob/1/embed?js,output]\n\n 1. http://en.wikipedia.org/wiki/Model–view–controller\n    [http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-05-06 16:36:33","updated_at":"2014-05-06 16:38:17","published_at":"2014-05-06 16:36:42","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054b","uuid":"648355ff-6bc3-4439-b32f-6b95faaf28da","title":"Understanding Angular.js services the easy way","slug":"understanding-angular-js-services-the-easy-way","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One of the difficulties when first learning angular is understanding services and what they really are.\\n\\nOne of the problem with services is there are several different ways to create one. This leads to many people saying which one should I choose? There's been over 131k views on this Stack Overflow question...\\n\\nhttp://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\\n\\nThat's a lot.\\n\\nI've been doing some source diving in Angular lately and came across the following code...\\n\\n![](http://d.pr/i/R0zs+)\\n\\nThere it is in less than 10 lines of code exactly what each three are; they are nothing but calls to the underlying provider method! Each one just calls the provider slightly differently. In any of the 3 cases though, the services are singletons, as well as lazy loaded.\\n\\nLet's break them down...\\n\\n### Factory\\nHere's the factory formatted a bit better. All it is is a call to the underlying `provider` method, and it passes along a function as the `$get` method.\\n\\n\\n```prettyprint lang-js\\nfunction factory(name, factoryFn) {\\n    return provider(name, {\\n      $get: factoryFn\\n    });\\n}\\n```\\nThe `$get` will later be called by the `$provider` whenever someone tries to use the service. Here's how this looks when actually creating a factory.\\n\\n```prettyprint lang-js\\nangular.factory('MyService', function MyService() {\\n    return {\\n        doSomething: function() { /* ... */}\\n    };\\n});\\n```\\n\\nSo essentially the `function MyService()` is passed down and to `$get` and a new `provider` is created...\\n\\nThe way the factory works is, whatever you return from the `MyService` function is what you'll get when you inject this service anywhere in your application...\\n\\n```prettyprint lang-js\\napp.controller('HomeController', function(MyService) {\\n\\tMyService.doSomething();\\n});\\n```\\n\\n\\n### Service\\nAnother way to create an Angular service is with the actual `service` method...\\n\\n```prettyprint lang-js\\nfunction service(name, constructor) {\\n    return factory(name, ['$injector',\\n        function($injector) {\\n            return $injector.instantiate(constructor);\\n        }\\n    ]);\\n}\\n```\\n\\nThe `service` method actually just makes a call to the `factory` method, thereby calling the `provider` method again. In the case of a `service` method, the `$get` will be set to the `factory` function that is returned from the `service` method aka `return factory(name, ['$injector',`. \\n\\nThe returned function turns around and asks for the `$injector` as a dependency so that it can create an instance of whatever you pass in as the `constructor` to the `service` method...\\n\\n```prettyprint lang-js\\nangular.factory('MyService', function MyService() {\\n    this.doSomething = function() {\\n        /* DO IT, DO IT NAOW */\\n    }\\n});\\n```\\n\\nIn other words, the function passed in as the second argument just get's called with the `new` operator and the instance of that function is returned to whatever injects the service laster. \\n\\n### Value\\nThe last type of service you can create with angular is a `value` service...\\n\\n```prettyprint lang-js\\nfunction value(name, val) {\\n  return factory(name, valueFn(val));\\n}\\n```\\n\\nThe `value` service in turn calls the `factory` function once again. A `value` service is really meant to do nothing more than return whatever is passed in as `val`. That's what the `valueFn(val)` does above...\\n\\n```prettyprint lang-js\\nfunction valueFn(value) {\\n\\treturn function() {\\n    \\treturn value;\\n    };\\n}\\n```\\n\\nYou can use the `value` service method as a way to store some state, some configuration options or whatever you may need it for...\\n\\n```prettyprint lang-js\\nangular.value('Values', ['foo', 'bar', 'bam']);\\n```\\n\\nThen you can inject it and simply use whatever value is returned...\\n\\n```prettyprint lang-js\\napp.controller('HomeController', function(Values) {\\n\\tValues.forEach(function(val) {\\n    \\tconsole.log(val);\\n    });\\n});\\n```\\n\\n## Conclusion\\nHopefully that helps at leat eliminate some of the confusion what Angular.js services are. How you use them is still totally up to you as a developer, but it's good to at least have an understanding of what you're working with. The three different methods have different use cases, but to reiterate are all going to be singleton methods that you can inject anywere else that you can inject things in an angular app.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>One of the difficulties when first learning angular is understanding services and what they really are.</p>\n<p>One of the problem with services is there are several different ways to create one. This leads to many people saying which one should I choose? There's been over 131k views on this Stack Overflow question...</p>\n<p><a href=\"http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\">http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory</a></p>\n<p>That's a lot.</p>\n<p>I've been doing some source diving in Angular lately and came across the following code...</p>\n<p><img src=\"http://d.pr/i/R0zs+\" alt=\"\"></p>\n<p>There it is in less than 10 lines of code exactly what each three are; they are nothing but calls to the underlying provider method! Each one just calls the provider slightly differently. In any of the 3 cases though, the services are singletons, as well as lazy loaded.</p>\n<p>Let's break them down...</p>\n<h3 id=\"factory\">Factory</h3>\n<p>Here's the factory formatted a bit better. All it is is a call to the underlying <code>provider</code> method, and it passes along a function as the <code>$get</code> method.</p>\n<pre><code class=\"language-prettyprint\">function factory(name, factoryFn) {\n    return provider(name, {\n      $get: factoryFn\n    });\n}\n</code></pre>\n<p>The <code>$get</code> will later be called by the <code>$provider</code> whenever someone tries to use the service. Here's how this looks when actually creating a factory.</p>\n<pre><code class=\"language-prettyprint\">angular.factory('MyService', function MyService() {\n    return {\n        doSomething: function() { /* ... */}\n    };\n});\n</code></pre>\n<p>So essentially the <code>function MyService()</code> is passed down and to <code>$get</code> and a new <code>provider</code> is created...</p>\n<p>The way the factory works is, whatever you return from the <code>MyService</code> function is what you'll get when you inject this service anywhere in your application...</p>\n<pre><code class=\"language-prettyprint\">app.controller('HomeController', function(MyService) {\n\tMyService.doSomething();\n});\n</code></pre>\n<h3 id=\"service\">Service</h3>\n<p>Another way to create an Angular service is with the actual <code>service</code> method...</p>\n<pre><code class=\"language-prettyprint\">function service(name, constructor) {\n    return factory(name, ['$injector',\n        function($injector) {\n            return $injector.instantiate(constructor);\n        }\n    ]);\n}\n</code></pre>\n<p>The <code>service</code> method actually just makes a call to the <code>factory</code> method, thereby calling the <code>provider</code> method again. In the case of a <code>service</code> method, the <code>$get</code> will be set to the <code>factory</code> function that is returned from the <code>service</code> method aka <code>return factory(name, ['$injector',</code>.</p>\n<p>The returned function turns around and asks for the <code>$injector</code> as a dependency so that it can create an instance of whatever you pass in as the <code>constructor</code> to the <code>service</code> method...</p>\n<pre><code class=\"language-prettyprint\">angular.factory('MyService', function MyService() {\n    this.doSomething = function() {\n        /* DO IT, DO IT NAOW */\n    }\n});\n</code></pre>\n<p>In other words, the function passed in as the second argument just get's called with the <code>new</code> operator and the instance of that function is returned to whatever injects the service laster.</p>\n<h3 id=\"value\">Value</h3>\n<p>The last type of service you can create with angular is a <code>value</code> service...</p>\n<pre><code class=\"language-prettyprint\">function value(name, val) {\n  return factory(name, valueFn(val));\n}\n</code></pre>\n<p>The <code>value</code> service in turn calls the <code>factory</code> function once again. A <code>value</code> service is really meant to do nothing more than return whatever is passed in as <code>val</code>. That's what the <code>valueFn(val)</code> does above...</p>\n<pre><code class=\"language-prettyprint\">function valueFn(value) {\n\treturn function() {\n    \treturn value;\n    };\n}\n</code></pre>\n<p>You can use the <code>value</code> service method as a way to store some state, some configuration options or whatever you may need it for...</p>\n<pre><code class=\"language-prettyprint\">angular.value('Values', ['foo', 'bar', 'bam']);\n</code></pre>\n<p>Then you can inject it and simply use whatever value is returned...</p>\n<pre><code class=\"language-prettyprint\">app.controller('HomeController', function(Values) {\n\tValues.forEach(function(val) {\n    \tconsole.log(val);\n    });\n});\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Hopefully that helps at leat eliminate some of the confusion what Angular.js services are. How you use them is still totally up to you as a developer, but it's good to at least have an understanding of what you're working with. The three different methods have different use cases, but to reiterate are all going to be singleton methods that you can inject anywere else that you can inject things in an angular app.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"11","plaintext":"One of the difficulties when first learning angular is understanding services\nand what they really are.\n\nOne of the problem with services is there are several different ways to create\none. This leads to many people saying which one should I choose? There's been\nover 131k views on this Stack Overflow question...\n\nhttp://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\n\nThat's a lot.\n\nI've been doing some source diving in Angular lately and came across the\nfollowing code...\n\n\n\nThere it is in less than 10 lines of code exactly what each three are; they are\nnothing but calls to the underlying provider method! Each one just calls the\nprovider slightly differently. In any of the 3 cases though, the services are\nsingletons, as well as lazy loaded.\n\nLet's break them down...\n\nFactory\nHere's the factory formatted a bit better. All it is is a call to the underlying \nprovider method, and it passes along a function as the $get method.\n\nfunction factory(name, factoryFn) {\n    return provider(name, {\n      $get: factoryFn\n    });\n}\n\n\nThe $get will later be called by the $provider whenever someone tries to use the\nservice. Here's how this looks when actually creating a factory.\n\nangular.factory('MyService', function MyService() {\n    return {\n        doSomething: function() { /* ... */}\n    };\n});\n\n\nSo essentially the function MyService() is passed down and to $get and a new \nprovider is created...\n\nThe way the factory works is, whatever you return from the MyService function is\nwhat you'll get when you inject this service anywhere in your application...\n\napp.controller('HomeController', function(MyService) {\n\tMyService.doSomething();\n});\n\n\nService\nAnother way to create an Angular service is with the actual service method...\n\nfunction service(name, constructor) {\n    return factory(name, ['$injector',\n        function($injector) {\n            return $injector.instantiate(constructor);\n        }\n    ]);\n}\n\n\nThe service method actually just makes a call to the factory method, thereby\ncalling the provider method again. In the case of a service method, the $get \nwill be set to the factory function that is returned from the service method aka \nreturn factory(name, ['$injector',.\n\nThe returned function turns around and asks for the $injector as a dependency so\nthat it can create an instance of whatever you pass in as the constructor to the \nservice method...\n\nangular.factory('MyService', function MyService() {\n    this.doSomething = function() {\n        /* DO IT, DO IT NAOW */\n    }\n});\n\n\nIn other words, the function passed in as the second argument just get's called\nwith the new operator and the instance of that function is returned to whatever\ninjects the service laster.\n\nValue\nThe last type of service you can create with angular is a value service...\n\nfunction value(name, val) {\n  return factory(name, valueFn(val));\n}\n\n\nThe value service in turn calls the factory function once again. A value service\nis really meant to do nothing more than return whatever is passed in as val.\nThat's what the valueFn(val) does above...\n\nfunction valueFn(value) {\n\treturn function() {\n    \treturn value;\n    };\n}\n\n\nYou can use the value service method as a way to store some state, some\nconfiguration options or whatever you may need it for...\n\nangular.value('Values', ['foo', 'bar', 'bam']);\n\n\nThen you can inject it and simply use whatever value is returned...\n\napp.controller('HomeController', function(Values) {\n\tValues.forEach(function(val) {\n    \tconsole.log(val);\n    });\n});\n\n\nConclusion\nHopefully that helps at leat eliminate some of the confusion what Angular.js\nservices are. How you use them is still totally up to you as a developer, but\nit's good to at least have an understanding of what you're working with. The\nthree different methods have different use cases, but to reiterate are all going\nto be singleton methods that you can inject anywere else that you can inject\nthings in an angular app.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-05-15 17:40:46","updated_at":"2014-05-15 21:43:17","published_at":"2014-05-15 17:41:25","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054c","uuid":"cdfdae86-3eb8-480c-875f-68c8d23a3505","title":"Object literals and prototypes in JavaScript","slug":"object-literals-and-prototypes-in-javascript","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"You think you know JavaScript and then little things like this happen...\\n\\nMy co-worker [Aaron](https://twitter.com/aaronbushnell) who is a Visual Design Engineer  is in the process of learning JavaScript and he asked me to have a look at a Fiddle.\\n\\nThe contents of the fiddle looked like this...\\n\\n```prettyprint lang-js\\nfunction Pizza (type, slices) {\\n    this.type = type;\\n    this.slices = slices;\\n}\\n\\n// Using this method of adding to the prototype doesn't log out the constructor correctly on lines 21-22...\\nPizza.prototype = {\\n  divvyUp: function () {\\n    alert(\\\"The \\\" + this.type + \\\" pizza has been divvied up!\\\");\\n  }\\n};\\n\\n// ...but this does.\\n// Pizza.prototype.divvyUp = function () {\\n//     alert(\\\"The \\\" + this.type + \\\" pizza has been divvied up!\\\");\\n// };\\n\\nvar sausagePizza = new Pizza(\\\"sausage\\\", 8);\\n\\nconsole.log(sausagePizza);\\nconsole.log(sausagePizza.constructor.prototype);\\nconsole.log(sausagePizza.constructor.prototype.divvyUp);\\n```\\n\\nHe was pointing out to me the fact that when he assigns the `Pizza.prototype` to an object, the console doesn't show what he expects to see.\\n\\nSure enough even at first I was like, wut?\\n\\n![](http://d.pr/i/YBGT+)\\n\\nThen I stopped to think about it a bit further.\\n\\nWhenever I usually work with assigning things to the prototype, I will either do like his second example...\\n\\n```prettyprint lang-js\\nPizza.prototype.divvyUp = function () {\\n     alert(\\\"The \\\" + this.type + \\\" pizza has been divvied up!\\\");\\n};\\n```\\n\\nOr use jQuery or underscore's extend method...\\n\\n```prettyprint lang-js\\n_.extend(Pizza.prototype, {\\n   divvyUp: function() {}\\n});\\n```\\n\\nThese two methods usually work just fine.\\n\\nSo, why was his example all funkyfied? Well, by assigning an object to the prototype, he decoupled the prototype chain. Now all the sudden `Pizza.prototype.constructor` actually points to the `Object` constructor rather than the `Pizza` constructor.\\n\\nYou can see this is the case by logging the instance...\\n\\n```prettyprint lang-js\\nconsole.log(sausagePizza.constructor === Object); // true\\n```\\n\\nWhen you assign a prototype to an object you've changed the prototypical inheritance of that object. The prototype of the object will no longer have the original constructor function!\\n\\nIf you really wanted to use an object literal in this way you can fix it by...\\n\\n```prettyprint lang-js\\nPizza.prototype.constructor = Pizza;\\n```\\n\\nOr you could just use the `$.extend` or `_.extend` if you really had your heart set on using an object literal for setting the prototype chain up.\\n\\nHelping people understand JavaScript is one of the best ways to make sure YOU fully understand JavaScript.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>You think you know JavaScript and then little things like this happen...</p>\n<p>My co-worker <a href=\"https://twitter.com/aaronbushnell\">Aaron</a> who is a Visual Design Engineer  is in the process of learning JavaScript and he asked me to have a look at a Fiddle.</p>\n<p>The contents of the fiddle looked like this...</p>\n<pre><code class=\"language-prettyprint\">function Pizza (type, slices) {\n    this.type = type;\n    this.slices = slices;\n}\n\n// Using this method of adding to the prototype doesn't log out the constructor correctly on lines 21-22...\nPizza.prototype = {\n  divvyUp: function () {\n    alert(&quot;The &quot; + this.type + &quot; pizza has been divvied up!&quot;);\n  }\n};\n\n// ...but this does.\n// Pizza.prototype.divvyUp = function () {\n//     alert(&quot;The &quot; + this.type + &quot; pizza has been divvied up!&quot;);\n// };\n\nvar sausagePizza = new Pizza(&quot;sausage&quot;, 8);\n\nconsole.log(sausagePizza);\nconsole.log(sausagePizza.constructor.prototype);\nconsole.log(sausagePizza.constructor.prototype.divvyUp);\n</code></pre>\n<p>He was pointing out to me the fact that when he assigns the <code>Pizza.prototype</code> to an object, the console doesn't show what he expects to see.</p>\n<p>Sure enough even at first I was like, wut?</p>\n<p><img src=\"http://d.pr/i/YBGT+\" alt=\"\"></p>\n<p>Then I stopped to think about it a bit further.</p>\n<p>Whenever I usually work with assigning things to the prototype, I will either do like his second example...</p>\n<pre><code class=\"language-prettyprint\">Pizza.prototype.divvyUp = function () {\n     alert(&quot;The &quot; + this.type + &quot; pizza has been divvied up!&quot;);\n};\n</code></pre>\n<p>Or use jQuery or underscore's extend method...</p>\n<pre><code class=\"language-prettyprint\">_.extend(Pizza.prototype, {\n   divvyUp: function() {}\n});\n</code></pre>\n<p>These two methods usually work just fine.</p>\n<p>So, why was his example all funkyfied? Well, by assigning an object to the prototype, he decoupled the prototype chain. Now all the sudden <code>Pizza.prototype.constructor</code> actually points to the <code>Object</code> constructor rather than the <code>Pizza</code> constructor.</p>\n<p>You can see this is the case by logging the instance...</p>\n<pre><code class=\"language-prettyprint\">console.log(sausagePizza.constructor === Object); // true\n</code></pre>\n<p>When you assign a prototype to an object you've changed the prototypical inheritance of that object. The prototype of the object will no longer have the original constructor function!</p>\n<p>If you really wanted to use an object literal in this way you can fix it by...</p>\n<pre><code class=\"language-prettyprint\">Pizza.prototype.constructor = Pizza;\n</code></pre>\n<p>Or you could just use the <code>$.extend</code> or <code>_.extend</code> if you really had your heart set on using an object literal for setting the prototype chain up.</p>\n<p>Helping people understand JavaScript is one of the best ways to make sure YOU fully understand JavaScript.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"12","plaintext":"You think you know JavaScript and then little things like this happen...\n\nMy co-worker Aaron [https://twitter.com/aaronbushnell] who is a Visual Design\nEngineer is in the process of learning JavaScript and he asked me to have a look\nat a Fiddle.\n\nThe contents of the fiddle looked like this...\n\nfunction Pizza (type, slices) {\n    this.type = type;\n    this.slices = slices;\n}\n\n// Using this method of adding to the prototype doesn't log out the constructor correctly on lines 21-22...\nPizza.prototype = {\n  divvyUp: function () {\n    alert(\"The \" + this.type + \" pizza has been divvied up!\");\n  }\n};\n\n// ...but this does.\n// Pizza.prototype.divvyUp = function () {\n//     alert(\"The \" + this.type + \" pizza has been divvied up!\");\n// };\n\nvar sausagePizza = new Pizza(\"sausage\", 8);\n\nconsole.log(sausagePizza);\nconsole.log(sausagePizza.constructor.prototype);\nconsole.log(sausagePizza.constructor.prototype.divvyUp);\n\n\nHe was pointing out to me the fact that when he assigns the Pizza.prototype to\nan object, the console doesn't show what he expects to see.\n\nSure enough even at first I was like, wut?\n\n\n\nThen I stopped to think about it a bit further.\n\nWhenever I usually work with assigning things to the prototype, I will either do\nlike his second example...\n\nPizza.prototype.divvyUp = function () {\n     alert(\"The \" + this.type + \" pizza has been divvied up!\");\n};\n\n\nOr use jQuery or underscore's extend method...\n\n_.extend(Pizza.prototype, {\n   divvyUp: function() {}\n});\n\n\nThese two methods usually work just fine.\n\nSo, why was his example all funkyfied? Well, by assigning an object to the\nprototype, he decoupled the prototype chain. Now all the sudden \nPizza.prototype.constructor actually points to the Object constructor rather\nthan the Pizza constructor.\n\nYou can see this is the case by logging the instance...\n\nconsole.log(sausagePizza.constructor === Object); // true\n\n\nWhen you assign a prototype to an object you've changed the prototypical\ninheritance of that object. The prototype of the object will no longer have the\noriginal constructor function!\n\nIf you really wanted to use an object literal in this way you can fix it by...\n\nPizza.prototype.constructor = Pizza;\n\n\nOr you could just use the $.extend or _.extend if you really had your heart set\non using an object literal for setting the prototype chain up.\n\nHelping people understand JavaScript is one of the best ways to make sure YOU\nfully understand JavaScript.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-06-10 15:16:36","updated_at":"2014-08-05 14:32:10","published_at":"2014-06-10 15:16:39","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054d","uuid":"9d2f4bb8-f9ad-4d8e-88ef-6d2b22d6a68d","title":"Scope creep, a deep dive into Angular's scope","slug":"working-with-all-the-different-kinds-of-scopes-in-angular","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Getting used to the concept of `scope` in Angular is among the more difficult concepts to fully grok when first being introduced to the magical land of Angular.\\n\\n![](http://media0.giphy.com/media/11a9K7FLvTD9Kw/giphy.gif)\\n\\nLike anything else though, \\\"once you understand it, it's really not that bad\\\"...\\n\\n### $rootScope\\nThis is the mother of all scopes. Quite literally. All other scopes in Angular descend from it. The `$rootScope` is created on the DOM element where you set up `ng-app`.\\n\\n```html\\n<html ng-app> <!-- $rootScope created here -->\\n<body>\\n</body>\\n</html>\\n```\\n\\nYou can prove this to yourself by simply adding `ng-app` to the `html` tag of a page, and running this in the console...\\n\\n```js\\nangular.element(document.documentElement).scope()\\n```\\n\\nThat will log out the `$rootScope` in the console.\\n\\nIf you go run any of the hello world examples for angular out there now, such as one like from the Angular home page...\\n\\n```html\\n<!doctype html>\\n<html ng-app>\\n  <head>\\n    <script src=\\\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.13/angular.min.js\\\"></script>\\n  </head>\\n  <body>\\n    <div>\\n      <label>Name:</label>\\n      <input type=\\\"text\\\" ng-model=\\\"yourName\\\" placeholder=\\\"Enter a name here\\\">\\n      <hr>\\n      <h1>Hello {{yourName}}!</h1>\\n    </div>\\n  </body>\\n</html>\\n```\\n\\nThere is a **directive** here on the input called `ng-model`. The job of a directive is to link and element to a scope, and allow you to work with that DOM element by adding behavior, or transforming it.\\n\\nThe `ng-model` directive will bind `input`, `select`, and `textarea` elements to a scope.\\n\\nIn this case, this directive is linking an element to the `$rootScope` by adding a new `yourName` property to it.\\n\\nAngular attaches to the *change* event of that element. Any time the change event fires, angular updates the value of `yourName` on the scope with the value of the element. This in turn tells anybody interested in the value of `yourName` that its value has changed. This is all done through angular's crazy dirty checking stuff.\\n\\nIn this case, there's no `yourName` property defined on `$rootScope` yet, so angular will just create it for you.\\n\\nThat concept is all known as **2 way data binding**; the concept of changing a model value which gets reflected in the UI and changing a UI that gets reflected in the model.\\n\\n### $scope in controllers\\nThe first step to understanding `$scope` in an Angular controller is to truly understand what a controller's job is in the first place.\\n\\n> The job of a controller is to pass data from the model, to the view.\\n\\nThat's it. Plain and simple. The view (aka user) asks for something from the controller, and the controller turns to the model and says, \\\"hey, I need this thing\\\". Then the controller takes that thing, and hands it back to the view.\\n\\nController are meant to be thin, and testable by keeping as much of your problem solving and state manipulation code inside of a \\\"model\\\". \\n\\nI generally think of the \\\"model\\\" in angular as a combination of [angular services](http://jonathancreamer.com/understanding-angular-js-services-the-easy-way/), and simple objects that you attach to scopes. So in essesnce your model can be whatever you want it to be which can be a little confusing at first.\\n\\nThe general idea though is that whatever your \\\"model\\\" is, you use `$scope` to tell your view about it. This is why some people will call `$scope` a \\\"viewModel\\\".\\n\\nA controller's job with respect to Angular is to set up functions and properties that the view can use. The primary way you set these functions and properties up is by injecting `$scope` into the controller.\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n\\t.controller(\\\"FooCtrl\\\", function($scope) {\\n    \\t$scope.user = {\\n        \\tname: \\\"Foo\\\"\\n        };\\n\\n        $scope.doFoo = function() {\\n\\t\\t\\t// Do something!\\n\\t\\t};\\n    });\\n```\\n\\nWhen you use the `ng-controller` to bind an element to the view, a new `ChildScope` is created which prototypically inherts from the `$rootScope`.\\n\\nYou can then attach these values to the view with directives and expressions.\\n\\n```html\\n<html ng-app=\\\"MyModule\\\">\\n<body ng-controller=\\\"FooCtrl\\\">\\n    {{user.name}}\\n    <button ng-click=\\\"doFoo()\\\">Do It</button>\\n</body>\\n</html>\\n```\\n\\n### Nested Controllers\\nThis is where things get weird...\\n\\n![](http://gifs.joelglovier.com/oh-shit/pirates-runs-away.gif)\\n\\nControllers can be nested so you have to be careful about a few things. Because of the fact that the scopes do inherit from other scopes, if you create a **primitive** value (string, number, boolean) on a parent scope, the child scope will have an be able to manipulate the value. \\n\\nWhat will happen though is if a child is changing **primitive** values on a parent, it will end up creating a copy of the value in the child, and break the inheritance chain.\\n\\nThis can be avoided...\\n\\n> `ng-model` should always have a \\\".\\\" in the name\\n\\nAs a rule of thumb this can help avoid the problem of overwriting a parent's scope values.\\n\\n```html\\n<input type=\\\"text\\\" ng-model=\\\"user.name\\\" />\\n```\\n\\nWhen you add a `user` object onto a controller's scope, you can edit that user object's properties in the child and not break the inheritance chain from the parent.\\n\\nAnother thing you can do when nesting controllers is use the newer **controllerAs** syntax. \\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n\\t.controller(\\\"FirstCtrl\\\", function() {\\n    \\tthis.user = {\\n        \\tname: \\\"Dr. Evil\\\"\\n        };\\n    })\\n    .controller(\\\"SecondCtrl\\\", function() {\\n    \\tthis.lair = {\\n            name: \\\"Underground\\\"\\n        };\\n    });\\n```\\n\\n```html\\n<div ng-controller=\\\"FirstController as first\\\">\\n\\t<div ng-controller=\\\"SecondController as second\\\">\\n    \\t{{first.user.name}}\\n        {{second.lair.name}}\\n    </div>\\n</div>\\n```\\n\\nUsing the **controllerAs** syntax is a small syntax change that can just add some clarity to where different values come from.\\n\\nNotice how in the controller rather than assigning the values to `$scope`, they are actually assigned to `this`.\\n\\nDon't let this fool you too much. When you use this syntax, that simply means it will take the values you put on `this`, and under the covers, assign them to `$scope`.\\n\\nUsing `controllerAs` is effectively the same thing as this...\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n\\t.controller(\\\"FirstCtrl\\\", function($scope) {\\n        $scope.first = this;\\n        \\n        $scope.first.user = {\\n        \\tname: \\\"Dr. Evil\\\"\\n        };\\n    })\\n    .controller(\\\"SecondCtrl\\\", function($scope) {\\n        $scope.second = this;\\n        \\n        $scope.second.lair = {\\n            name: \\\"Underground\\\"\\n        };\\n    });\\n```\\n\\nIt's just a little cleaner to not have to use `$scope` when you don't need to do anything but assign values and functions.\\n\\n### scope in directives\\nAnother sticky place when working with scopes in Angular is when writing custom directives. Part of the confusion comes from the fact that when you create a directive, one of the properties you pass on the directive definition is `scope`...\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n  .directive(\\\"MyDirective\\\", function() {\\n    return {\\n      scope: \\\"false|true|{}\\\"\\n    }\\n  });\\n```\\n\\nThere are a few options when setting up scope for a directive. First of all, the default value for this option is `scope: false`.\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n  .directive(\\\"MyDirective\\\", function() {\\n    return {\\n      scope: false,\\n      link: function(scope, el) {\\n        scope.myNewProp = \\\"OOPS, I'm on the parent!\\\";\\n      }\\n    }\\n  });\\n```\\n\\n\\nThis default can lead to some dangerous issues especially when trying to create re-usable directives...\\n\\n![](http://i.imgur.com/vpYexIk.jpg)\\n\\nWhen you have `scope: false`, the a new scope will NOT be created for this directive. That means it will use the parent scope by default. So, if you think you're creating a property on a scope local to your directive, you are in fact actually creating a property on the parent scope. Not a very re-usable solution.\\n\\nAnother option you have is to pass `scope: true`.\\n\\nPassing this option will tell angular to create you a new child scope for this directive. This child scope will be similar to how the scope in the `ng-controller` works. It will prototypically inherit from it's parent in the exact same way.\\n\\nThis means you'll have access to the parent scope, but also be able to add new properties to a scope local to the directive...\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n  .directive(\\\"MyDirective\\\", function() {\\n    return {\\n      scope: true,\\n      link: function(scope, el) {\\n        scope.someParentObject.foo = \\\"See I can still change things because of inheritance\\\";\\n        \\n        scope.someLocalObject = {\\n          foo: \\\"Yay, I'm local only to this direcive!\\\"\\n        }\\n      }\\n    }\\n  });\\n```\\n\\nIn this example you can see that because of prototypical inheritance, this directive's scope will have access to a parent property. The difference now though is that when a NEW property is added to the scope, it will be created locally within the directive's scope and not directly on the parent scope.\\n\\nThe **Isolate Scope** is the most complicated form of scope for directives.\\n\\n```js\\nangular.module(\\\"MyModule\\\")\\n  .directive(\\\"MyDirective\\\", function() {\\n    return {\\n      scope: {\\n        property: \\\"=\\\",\\n        expression: \\\"@\\\"\\n        action: \\\"&\\\"\\n      },\\n      link: function(scope, el) {\\n        scope.someParentObject.foo = \\\"See I can still change things because of inheritance\\\";\\n        \\n        scope.someLocalObject = {\\n          foo: \\\"Yay, I'm local only to this direcive!\\\"\\n        }\\n      }\\n    }\\n  });\\n```\\n\\nWhen an object literal is passed as the parameter value for `scope` on a directive, a new `isolate` scope is created for the directive. It still inherits from the parent scope, however only the named properties from the `scope` parameter will be passed into this new isolated scope.\\n\\nYou can almost think of the `scope` option as a filter with three different ways of filtering. You can see each of the three in the previous example: \\\"@\\\", \\\"=\\\", and \\\"&\\\".\\n\\nHere's examples on how to use each of the three methods.\\n\\n### =\\n\\n```js\\nangular.module(\\\"MyApp\\\", [])\\n  .controller(\\\"UserCtrl\\\", function($scope) {\\n    $scope.loggedInUser = {\\n      name: \\\"Austin Powers\\\"\\n    }\\n  })\\n  .directive(\\\"myUserDirective\\\", function() {\\n    return {\\n      restrict: \\\"E\\\",\\n      template: \\\"<input ng-model='user.name' /></div>\\\",\\n      scope: {\\n        user: \\\"=\\\"\\n      },\\n      link: function(scope) {\\n        console.log(scope.user) // { name: \\\"Austin Powers\\\" }\\n      }\\n    };\\n  });\\n```\\n\\nYou would then use this directive like...\\n\\n```html\\n<my-user-directive user=\\\"loggedInUser\\\"></my-user-directive>\\n```\\n\\nBy adding `user: \\\"=\\\"` to the `scope` property of your directive, you've basically setup a way to pass an object from the parent scope down to the directive scope by using `user=\\\"loggedInUser\\\"` as an attribute on the directive. \\n\\nIt's also worth noting that if you wanted to, with any of the three scope properties you can pass an optional alias name along with '=, @, or &', there will be an example of this later.\\n\\nWhen using the `=` sign as an option you have basically set up a two way binding between the directive and the parent scope. If you then change `user` in the directive, the change will be reflected in the parent's `loggedInUser` property.\\n\\nThe `=` option will always be a single string value (no {{}}'s are needed here) representing some property on the parent scope of the directive. So, here in the previous case, `loggedInUser` is a property on the `UserCtrl`'s scope.\\n\\nWhen you type in the input box generated by the directive, you'll see `ng-model=\\\"user.name\\\"`. Changing the value of this text box will actually end up changing the `loggedInUser.name` from `UserCtrl`!\\n\\n### @\\n\\nThe `@` option of scope is a way to pass in a string value, or a value containing `{{}}`'s that will get interpolated.\\n\\nThis is effectively a one way binding. You cannot change the value on the directive scope and have it be reflected in the parent scope, unlike with the `=` option. If you want to reference properties from the parent scope, you must use the curly braces around them. Whatever you pass in as the value of a property that uses the `@` option will be interpolated.\\n\\nHere's an example...\\n\\n```js\\nangular.module(\\\"MyApp\\\", [])\\n  .controller(\\\"UserCtrl\\\", function($scope) {\\n    $scope.loggedInUser = {\\n      firstName: \\\"Austin\\\",\\n      middleName: \\\"Danger\\\",\\n      lastName: \\\"Powers\\\"\\n    };\\n  })\\n  .directive(\\\"myUserDirective\\\", function() {\\n    return {\\n      restrict: \\\"E\\\",\\n      template: \\\"{{fullName}}\\\",\\n      scope: {\\n        fullName: \\\"@name\\\"\\n      }\\n    };\\n  });\\n```\\n\\nAnd this is how you would use that directive...\\n\\n```html\\n<my-user-directive \\n        name=\\\"{{loggedInUser.firstName}} {{loggedInUser.middleName}} {{loggedInUser.lastName}}\\\">\\n        </my-user-directive>\\n```\\n\\nNotice that in the `name=\\\"...\\\"` the `loggedInUser.firstName`, is a value on the parent of the directive in the `UserCtrl`.\\n\\nOn the directive scope, because of `fullName: \\\"@name\\\"`, you'll see that you can pass values via the `name` attribute and the `fullName` will be added to the scope. String interpolation will kick in, and `fullName` is going to equal \\\"Austin Danger Powers\\\". That's also what the template `template: \\\"{{fullName}}\\\",` will render.\\n\\n### &\\n\\nThe last option for `scope` in a directive is `&`. This allows you to fully invoke an expression within the context of the parent scope. You basically get a wrapper function that wraps whatever you pass in so you can invoke it in the directive.\\n\\nThe following example is a bit trivial, but in order to fully understand this concept, it's a good place to start.\\n\\n```js\\nangular.module(\\\"MyApp\\\", [])\\n  .controller(\\\"MathCtrl\\\", function($scope) {\\n    $scope.add = function(x, y) {\\n      return x + y;\\n    };\\n  })\\n  .directive(\\\"myAddThings\\\", function() {\\n    return {\\n      restrict: \\\"E\\\",\\n      template: \\\"{{result}}\\\",\\n      scope: {\\n        localFn: \\\"&fn\\\"\\n      },\\n      link: function(scope) {\\n        scope.result = scope.localFn({\\n          x: 1,\\n          y: 2\\n        });\\n      }\\n    };\\n  });\\n```\\n\\nSo, you can see here the `localFn: \\\"&fn\\\"`. This means that in your `scope`, you'll have a `localFn` available. You can then use that function in the scope of the directive and pass in values via a hash map that will execute in the parent's context.\\n\\nThe way this works is by passing in an object that has keys which match the arguments you pass in via the HTML when you invoke the directive...\\n\\n```js\\nscope.result = scope.localFn({\\n  x: 1,\\n  y: 2\\n});\\n```\\n\\nSee how here in the HTML you have...\\n\\n```html\\n<my-add-things fn=\\\"add(x, y)\\\"></my-add-things>  \\n```\\n\\nHere's one more practical example of how you can use this option in a directive scope...\\n\\n```js\\nangular.module(\\\"MyApp\\\", [])\\n  .controller(\\\"MathCtrl\\\", function($scope) {\\n    $scope.add = function(x, y) {\\n      return parseInt(x, 10) + parseInt(y, 10);\\n    };\\n  })\\n  .directive(\\\"myAddThings\\\", function() {\\n    return {\\n      restrict: \\\"E\\\",\\n      template: \\n        \\\"<input ng-model='vals.x' /><input ng-model='vals.y' />\\\" +\\n        \\\"<button ng-click='sum = localFn({ x: vals.x, y: vals.y })'>Add</button>\\\" +\\n        \\\"<div>{{sum}}</div>\\\",\\n      scope: {\\n        localFn: \\\"&fn\\\"\\n      }\\n    };\\n  })\\n```\\n\\nIn this example, there's 2 inputs in the template. One bound to `vals.x`, and one bound to `vals.y`. Since neither of these are previously defined in any scopes, they'll be added to the directives isolated scope.\\n\\nThen the button has an `ng-click='sum = localFn({ x: vals.x, y: vals.y })'` directive. Every time that this button is clicked, it will evaluate the expression. Since the `$scope.add` function is defined in the parent directive, and passed in through the `localFn: \\\"&fn\\\"`, you can then pass in the map of values to execute the add function.\\n\\nSince `$scope.add` simply retuns a value, you can then assign `sum` which will then be another value in the directive scope and can also be used in the template with `{{sum}}`.\\n\\n### Conclusion\\nHopefully this helps groking all the scopes in Angular! There's a lot of things to fully wrap your head around with Angular and this is just one of the pieces. Like learning any framework though, it just takes a bit of time and practice to get things really going and fully comprehended.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Getting used to the concept of <code>scope</code> in Angular is among the more difficult concepts to fully grok when first being introduced to the magical land of Angular.</p>\n<p><img src=\"http://media0.giphy.com/media/11a9K7FLvTD9Kw/giphy.gif\" alt=\"\"></p>\n<p>Like anything else though, &quot;once you understand it, it's really not that bad&quot;...</p>\n<h3 id=\"rootscope\">$rootScope</h3>\n<p>This is the mother of all scopes. Quite literally. All other scopes in Angular descend from it. The <code>$rootScope</code> is created on the DOM element where you set up <code>ng-app</code>.</p>\n<pre><code class=\"language-html\">&lt;html ng-app&gt; &lt;!-- $rootScope created here --&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>You can prove this to yourself by simply adding <code>ng-app</code> to the <code>html</code> tag of a page, and running this in the console...</p>\n<pre><code class=\"language-js\">angular.element(document.documentElement).scope()\n</code></pre>\n<p>That will log out the <code>$rootScope</code> in the console.</p>\n<p>If you go run any of the hello world examples for angular out there now, such as one like from the Angular home page...</p>\n<pre><code class=\"language-html\">&lt;!doctype html&gt;\n&lt;html ng-app&gt;\n  &lt;head&gt;\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.13/angular.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name:&lt;/label&gt;\n      &lt;input type=&quot;text&quot; ng-model=&quot;yourName&quot; placeholder=&quot;Enter a name here&quot;&gt;\n      &lt;hr&gt;\n      &lt;h1&gt;Hello {{yourName}}!&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>There is a <strong>directive</strong> here on the input called <code>ng-model</code>. The job of a directive is to link and element to a scope, and allow you to work with that DOM element by adding behavior, or transforming it.</p>\n<p>The <code>ng-model</code> directive will bind <code>input</code>, <code>select</code>, and <code>textarea</code> elements to a scope.</p>\n<p>In this case, this directive is linking an element to the <code>$rootScope</code> by adding a new <code>yourName</code> property to it.</p>\n<p>Angular attaches to the <em>change</em> event of that element. Any time the change event fires, angular updates the value of <code>yourName</code> on the scope with the value of the element. This in turn tells anybody interested in the value of <code>yourName</code> that its value has changed. This is all done through angular's crazy dirty checking stuff.</p>\n<p>In this case, there's no <code>yourName</code> property defined on <code>$rootScope</code> yet, so angular will just create it for you.</p>\n<p>That concept is all known as <strong>2 way data binding</strong>; the concept of changing a model value which gets reflected in the UI and changing a UI that gets reflected in the model.</p>\n<h3 id=\"scopeincontrollers\">$scope in controllers</h3>\n<p>The first step to understanding <code>$scope</code> in an Angular controller is to truly understand what a controller's job is in the first place.</p>\n<blockquote>\n<p>The job of a controller is to pass data from the model, to the view.</p>\n</blockquote>\n<p>That's it. Plain and simple. The view (aka user) asks for something from the controller, and the controller turns to the model and says, &quot;hey, I need this thing&quot;. Then the controller takes that thing, and hands it back to the view.</p>\n<p>Controller are meant to be thin, and testable by keeping as much of your problem solving and state manipulation code inside of a &quot;model&quot;.</p>\n<p>I generally think of the &quot;model&quot; in angular as a combination of <a href=\"http://jonathancreamer.com/understanding-angular-js-services-the-easy-way/\">angular services</a>, and simple objects that you attach to scopes. So in essesnce your model can be whatever you want it to be which can be a little confusing at first.</p>\n<p>The general idea though is that whatever your &quot;model&quot; is, you use <code>$scope</code> to tell your view about it. This is why some people will call <code>$scope</code> a &quot;viewModel&quot;.</p>\n<p>A controller's job with respect to Angular is to set up functions and properties that the view can use. The primary way you set these functions and properties up is by injecting <code>$scope</code> into the controller.</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n\t.controller(&quot;FooCtrl&quot;, function($scope) {\n    \t$scope.user = {\n        \tname: &quot;Foo&quot;\n        };\n\n        $scope.doFoo = function() {\n\t\t\t// Do something!\n\t\t};\n    });\n</code></pre>\n<p>When you use the <code>ng-controller</code> to bind an element to the view, a new <code>ChildScope</code> is created which prototypically inherts from the <code>$rootScope</code>.</p>\n<p>You can then attach these values to the view with directives and expressions.</p>\n<pre><code class=\"language-html\">&lt;html ng-app=&quot;MyModule&quot;&gt;\n&lt;body ng-controller=&quot;FooCtrl&quot;&gt;\n    {{user.name}}\n    &lt;button ng-click=&quot;doFoo()&quot;&gt;Do It&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"nestedcontrollers\">Nested Controllers</h3>\n<p>This is where things get weird...</p>\n<p><img src=\"http://gifs.joelglovier.com/oh-shit/pirates-runs-away.gif\" alt=\"\"></p>\n<p>Controllers can be nested so you have to be careful about a few things. Because of the fact that the scopes do inherit from other scopes, if you create a <strong>primitive</strong> value (string, number, boolean) on a parent scope, the child scope will have an be able to manipulate the value.</p>\n<p>What will happen though is if a child is changing <strong>primitive</strong> values on a parent, it will end up creating a copy of the value in the child, and break the inheritance chain.</p>\n<p>This can be avoided...</p>\n<blockquote>\n<p><code>ng-model</code> should always have a &quot;.&quot; in the name</p>\n</blockquote>\n<p>As a rule of thumb this can help avoid the problem of overwriting a parent's scope values.</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot; /&gt;\n</code></pre>\n<p>When you add a <code>user</code> object onto a controller's scope, you can edit that user object's properties in the child and not break the inheritance chain from the parent.</p>\n<p>Another thing you can do when nesting controllers is use the newer <strong>controllerAs</strong> syntax.</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n\t.controller(&quot;FirstCtrl&quot;, function() {\n    \tthis.user = {\n        \tname: &quot;Dr. Evil&quot;\n        };\n    })\n    .controller(&quot;SecondCtrl&quot;, function() {\n    \tthis.lair = {\n            name: &quot;Underground&quot;\n        };\n    });\n</code></pre>\n<pre><code class=\"language-html\">&lt;div ng-controller=&quot;FirstController as first&quot;&gt;\n\t&lt;div ng-controller=&quot;SecondController as second&quot;&gt;\n    \t{{first.user.name}}\n        {{second.lair.name}}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Using the <strong>controllerAs</strong> syntax is a small syntax change that can just add some clarity to where different values come from.</p>\n<p>Notice how in the controller rather than assigning the values to <code>$scope</code>, they are actually assigned to <code>this</code>.</p>\n<p>Don't let this fool you too much. When you use this syntax, that simply means it will take the values you put on <code>this</code>, and under the covers, assign them to <code>$scope</code>.</p>\n<p>Using <code>controllerAs</code> is effectively the same thing as this...</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n\t.controller(&quot;FirstCtrl&quot;, function($scope) {\n        $scope.first = this;\n        \n        $scope.first.user = {\n        \tname: &quot;Dr. Evil&quot;\n        };\n    })\n    .controller(&quot;SecondCtrl&quot;, function($scope) {\n        $scope.second = this;\n        \n        $scope.second.lair = {\n            name: &quot;Underground&quot;\n        };\n    });\n</code></pre>\n<p>It's just a little cleaner to not have to use <code>$scope</code> when you don't need to do anything but assign values and functions.</p>\n<h3 id=\"scopeindirectives\">scope in directives</h3>\n<p>Another sticky place when working with scopes in Angular is when writing custom directives. Part of the confusion comes from the fact that when you create a directive, one of the properties you pass on the directive definition is <code>scope</code>...</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n  .directive(&quot;MyDirective&quot;, function() {\n    return {\n      scope: &quot;false|true|{}&quot;\n    }\n  });\n</code></pre>\n<p>There are a few options when setting up scope for a directive. First of all, the default value for this option is <code>scope: false</code>.</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n  .directive(&quot;MyDirective&quot;, function() {\n    return {\n      scope: false,\n      link: function(scope, el) {\n        scope.myNewProp = &quot;OOPS, I'm on the parent!&quot;;\n      }\n    }\n  });\n</code></pre>\n<p>This default can lead to some dangerous issues especially when trying to create re-usable directives...</p>\n<p><img src=\"http://i.imgur.com/vpYexIk.jpg\" alt=\"\"></p>\n<p>When you have <code>scope: false</code>, the a new scope will NOT be created for this directive. That means it will use the parent scope by default. So, if you think you're creating a property on a scope local to your directive, you are in fact actually creating a property on the parent scope. Not a very re-usable solution.</p>\n<p>Another option you have is to pass <code>scope: true</code>.</p>\n<p>Passing this option will tell angular to create you a new child scope for this directive. This child scope will be similar to how the scope in the <code>ng-controller</code> works. It will prototypically inherit from it's parent in the exact same way.</p>\n<p>This means you'll have access to the parent scope, but also be able to add new properties to a scope local to the directive...</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n  .directive(&quot;MyDirective&quot;, function() {\n    return {\n      scope: true,\n      link: function(scope, el) {\n        scope.someParentObject.foo = &quot;See I can still change things because of inheritance&quot;;\n        \n        scope.someLocalObject = {\n          foo: &quot;Yay, I'm local only to this direcive!&quot;\n        }\n      }\n    }\n  });\n</code></pre>\n<p>In this example you can see that because of prototypical inheritance, this directive's scope will have access to a parent property. The difference now though is that when a NEW property is added to the scope, it will be created locally within the directive's scope and not directly on the parent scope.</p>\n<p>The <strong>Isolate Scope</strong> is the most complicated form of scope for directives.</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyModule&quot;)\n  .directive(&quot;MyDirective&quot;, function() {\n    return {\n      scope: {\n        property: &quot;=&quot;,\n        expression: &quot;@&quot;\n        action: &quot;&amp;&quot;\n      },\n      link: function(scope, el) {\n        scope.someParentObject.foo = &quot;See I can still change things because of inheritance&quot;;\n        \n        scope.someLocalObject = {\n          foo: &quot;Yay, I'm local only to this direcive!&quot;\n        }\n      }\n    }\n  });\n</code></pre>\n<p>When an object literal is passed as the parameter value for <code>scope</code> on a directive, a new <code>isolate</code> scope is created for the directive. It still inherits from the parent scope, however only the named properties from the <code>scope</code> parameter will be passed into this new isolated scope.</p>\n<p>You can almost think of the <code>scope</code> option as a filter with three different ways of filtering. You can see each of the three in the previous example: &quot;@&quot;, &quot;=&quot;, and &quot;&amp;&quot;.</p>\n<p>Here's examples on how to use each of the three methods.</p>\n<h3 id=\"\">=</h3>\n<pre><code class=\"language-js\">angular.module(&quot;MyApp&quot;, [])\n  .controller(&quot;UserCtrl&quot;, function($scope) {\n    $scope.loggedInUser = {\n      name: &quot;Austin Powers&quot;\n    }\n  })\n  .directive(&quot;myUserDirective&quot;, function() {\n    return {\n      restrict: &quot;E&quot;,\n      template: &quot;&lt;input ng-model='user.name' /&gt;&lt;/div&gt;&quot;,\n      scope: {\n        user: &quot;=&quot;\n      },\n      link: function(scope) {\n        console.log(scope.user) // { name: &quot;Austin Powers&quot; }\n      }\n    };\n  });\n</code></pre>\n<p>You would then use this directive like...</p>\n<pre><code class=\"language-html\">&lt;my-user-directive user=&quot;loggedInUser&quot;&gt;&lt;/my-user-directive&gt;\n</code></pre>\n<p>By adding <code>user: &quot;=&quot;</code> to the <code>scope</code> property of your directive, you've basically setup a way to pass an object from the parent scope down to the directive scope by using <code>user=&quot;loggedInUser&quot;</code> as an attribute on the directive.</p>\n<p>It's also worth noting that if you wanted to, with any of the three scope properties you can pass an optional alias name along with '=, @, or &amp;', there will be an example of this later.</p>\n<p>When using the <code>=</code> sign as an option you have basically set up a two way binding between the directive and the parent scope. If you then change <code>user</code> in the directive, the change will be reflected in the parent's <code>loggedInUser</code> property.</p>\n<p>The <code>=</code> option will always be a single string value (no {{}}'s are needed here) representing some property on the parent scope of the directive. So, here in the previous case, <code>loggedInUser</code> is a property on the <code>UserCtrl</code>'s scope.</p>\n<p>When you type in the input box generated by the directive, you'll see <code>ng-model=&quot;user.name&quot;</code>. Changing the value of this text box will actually end up changing the <code>loggedInUser.name</code> from <code>UserCtrl</code>!</p>\n<h3 id=\"\">@</h3>\n<p>The <code>@</code> option of scope is a way to pass in a string value, or a value containing <code>{{}}</code>'s that will get interpolated.</p>\n<p>This is effectively a one way binding. You cannot change the value on the directive scope and have it be reflected in the parent scope, unlike with the <code>=</code> option. If you want to reference properties from the parent scope, you must use the curly braces around them. Whatever you pass in as the value of a property that uses the <code>@</code> option will be interpolated.</p>\n<p>Here's an example...</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyApp&quot;, [])\n  .controller(&quot;UserCtrl&quot;, function($scope) {\n    $scope.loggedInUser = {\n      firstName: &quot;Austin&quot;,\n      middleName: &quot;Danger&quot;,\n      lastName: &quot;Powers&quot;\n    };\n  })\n  .directive(&quot;myUserDirective&quot;, function() {\n    return {\n      restrict: &quot;E&quot;,\n      template: &quot;{{fullName}}&quot;,\n      scope: {\n        fullName: &quot;@name&quot;\n      }\n    };\n  });\n</code></pre>\n<p>And this is how you would use that directive...</p>\n<pre><code class=\"language-html\">&lt;my-user-directive \n        name=&quot;{{loggedInUser.firstName}} {{loggedInUser.middleName}} {{loggedInUser.lastName}}&quot;&gt;\n        &lt;/my-user-directive&gt;\n</code></pre>\n<p>Notice that in the <code>name=&quot;...&quot;</code> the <code>loggedInUser.firstName</code>, is a value on the parent of the directive in the <code>UserCtrl</code>.</p>\n<p>On the directive scope, because of <code>fullName: &quot;@name&quot;</code>, you'll see that you can pass values via the <code>name</code> attribute and the <code>fullName</code> will be added to the scope. String interpolation will kick in, and <code>fullName</code> is going to equal &quot;Austin Danger Powers&quot;. That's also what the template <code>template: &quot;{{fullName}}&quot;,</code> will render.</p>\n<h3 id=\"\">&amp;</h3>\n<p>The last option for <code>scope</code> in a directive is <code>&amp;</code>. This allows you to fully invoke an expression within the context of the parent scope. You basically get a wrapper function that wraps whatever you pass in so you can invoke it in the directive.</p>\n<p>The following example is a bit trivial, but in order to fully understand this concept, it's a good place to start.</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyApp&quot;, [])\n  .controller(&quot;MathCtrl&quot;, function($scope) {\n    $scope.add = function(x, y) {\n      return x + y;\n    };\n  })\n  .directive(&quot;myAddThings&quot;, function() {\n    return {\n      restrict: &quot;E&quot;,\n      template: &quot;{{result}}&quot;,\n      scope: {\n        localFn: &quot;&amp;fn&quot;\n      },\n      link: function(scope) {\n        scope.result = scope.localFn({\n          x: 1,\n          y: 2\n        });\n      }\n    };\n  });\n</code></pre>\n<p>So, you can see here the <code>localFn: &quot;&amp;fn&quot;</code>. This means that in your <code>scope</code>, you'll have a <code>localFn</code> available. You can then use that function in the scope of the directive and pass in values via a hash map that will execute in the parent's context.</p>\n<p>The way this works is by passing in an object that has keys which match the arguments you pass in via the HTML when you invoke the directive...</p>\n<pre><code class=\"language-js\">scope.result = scope.localFn({\n  x: 1,\n  y: 2\n});\n</code></pre>\n<p>See how here in the HTML you have...</p>\n<pre><code class=\"language-html\">&lt;my-add-things fn=&quot;add(x, y)&quot;&gt;&lt;/my-add-things&gt;  \n</code></pre>\n<p>Here's one more practical example of how you can use this option in a directive scope...</p>\n<pre><code class=\"language-js\">angular.module(&quot;MyApp&quot;, [])\n  .controller(&quot;MathCtrl&quot;, function($scope) {\n    $scope.add = function(x, y) {\n      return parseInt(x, 10) + parseInt(y, 10);\n    };\n  })\n  .directive(&quot;myAddThings&quot;, function() {\n    return {\n      restrict: &quot;E&quot;,\n      template: \n        &quot;&lt;input ng-model='vals.x' /&gt;&lt;input ng-model='vals.y' /&gt;&quot; +\n        &quot;&lt;button ng-click='sum = localFn({ x: vals.x, y: vals.y })'&gt;Add&lt;/button&gt;&quot; +\n        &quot;&lt;div&gt;{{sum}}&lt;/div&gt;&quot;,\n      scope: {\n        localFn: &quot;&amp;fn&quot;\n      }\n    };\n  })\n</code></pre>\n<p>In this example, there's 2 inputs in the template. One bound to <code>vals.x</code>, and one bound to <code>vals.y</code>. Since neither of these are previously defined in any scopes, they'll be added to the directives isolated scope.</p>\n<p>Then the button has an <code>ng-click='sum = localFn({ x: vals.x, y: vals.y })'</code> directive. Every time that this button is clicked, it will evaluate the expression. Since the <code>$scope.add</code> function is defined in the parent directive, and passed in through the <code>localFn: &quot;&amp;fn&quot;</code>, you can then pass in the map of values to execute the add function.</p>\n<p>Since <code>$scope.add</code> simply retuns a value, you can then assign <code>sum</code> which will then be another value in the directive scope and can also be used in the template with <code>{{sum}}</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Hopefully this helps groking all the scopes in Angular! There's a lot of things to fully wrap your head around with Angular and this is just one of the pieces. Like learning any framework though, it just takes a bit of time and practice to get things really going and fully comprehended.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"13","plaintext":"Getting used to the concept of scope in Angular is among the more difficult\nconcepts to fully grok when first being introduced to the magical land of\nAngular.\n\n\n\nLike anything else though, \"once you understand it, it's really not that bad\"...\n\n$rootScope\nThis is the mother of all scopes. Quite literally. All other scopes in Angular\ndescend from it. The $rootScope is created on the DOM element where you set up \nng-app.\n\n<html ng-app> <!-- $rootScope created here -->\n<body>\n</body>\n</html>\n\n\nYou can prove this to yourself by simply adding ng-app to the html tag of a\npage, and running this in the console...\n\nangular.element(document.documentElement).scope()\n\n\nThat will log out the $rootScope in the console.\n\nIf you go run any of the hello world examples for angular out there now, such as\none like from the Angular home page...\n\n<!doctype html>\n<html ng-app>\n  <head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.13/angular.min.js\"></script>\n  </head>\n  <body>\n    <div>\n      <label>Name:</label>\n      <input type=\"text\" ng-model=\"yourName\" placeholder=\"Enter a name here\">\n      <hr>\n      <h1>Hello {{yourName}}!</h1>\n    </div>\n  </body>\n</html>\n\n\nThere is a directive here on the input called ng-model. The job of a directive\nis to link and element to a scope, and allow you to work with that DOM element\nby adding behavior, or transforming it.\n\nThe ng-model directive will bind input, select, and textarea elements to a\nscope.\n\nIn this case, this directive is linking an element to the $rootScope by adding a\nnew yourName property to it.\n\nAngular attaches to the change event of that element. Any time the change event\nfires, angular updates the value of yourName on the scope with the value of the\nelement. This in turn tells anybody interested in the value of yourName that its\nvalue has changed. This is all done through angular's crazy dirty checking\nstuff.\n\nIn this case, there's no yourName property defined on $rootScope yet, so angular\nwill just create it for you.\n\nThat concept is all known as 2 way data binding; the concept of changing a model\nvalue which gets reflected in the UI and changing a UI that gets reflected in\nthe model.\n\n$scope in controllers\nThe first step to understanding $scope in an Angular controller is to truly\nunderstand what a controller's job is in the first place.\n\n> The job of a controller is to pass data from the model, to the view.\n\n\nThat's it. Plain and simple. The view (aka user) asks for something from the\ncontroller, and the controller turns to the model and says, \"hey, I need this\nthing\". Then the controller takes that thing, and hands it back to the view.\n\nController are meant to be thin, and testable by keeping as much of your problem\nsolving and state manipulation code inside of a \"model\".\n\nI generally think of the \"model\" in angular as a combination of angular services\n[http://jonathancreamer.com/understanding-angular-js-services-the-easy-way/],\nand simple objects that you attach to scopes. So in essesnce your model can be\nwhatever you want it to be which can be a little confusing at first.\n\nThe general idea though is that whatever your \"model\" is, you use $scope to tell\nyour view about it. This is why some people will call $scope a \"viewModel\".\n\nA controller's job with respect to Angular is to set up functions and properties\nthat the view can use. The primary way you set these functions and properties up\nis by injecting $scope into the controller.\n\nangular.module(\"MyModule\")\n\t.controller(\"FooCtrl\", function($scope) {\n    \t$scope.user = {\n        \tname: \"Foo\"\n        };\n\n        $scope.doFoo = function() {\n\t\t\t// Do something!\n\t\t};\n    });\n\n\nWhen you use the ng-controller to bind an element to the view, a new ChildScope \nis created which prototypically inherts from the $rootScope.\n\nYou can then attach these values to the view with directives and expressions.\n\n<html ng-app=\"MyModule\">\n<body ng-controller=\"FooCtrl\">\n    {{user.name}}\n    <button ng-click=\"doFoo()\">Do It</button>\n</body>\n</html>\n\n\nNested Controllers\nThis is where things get weird...\n\n\n\nControllers can be nested so you have to be careful about a few things. Because\nof the fact that the scopes do inherit from other scopes, if you create a \nprimitive value (string, number, boolean) on a parent scope, the child scope\nwill have an be able to manipulate the value.\n\nWhat will happen though is if a child is changing primitive values on a parent,\nit will end up creating a copy of the value in the child, and break the\ninheritance chain.\n\nThis can be avoided...\n\n> ng-model should always have a \".\" in the name\n\n\nAs a rule of thumb this can help avoid the problem of overwriting a parent's\nscope values.\n\n<input type=\"text\" ng-model=\"user.name\" />\n\n\nWhen you add a user object onto a controller's scope, you can edit that user\nobject's properties in the child and not break the inheritance chain from the\nparent.\n\nAnother thing you can do when nesting controllers is use the newer controllerAs \nsyntax.\n\nangular.module(\"MyModule\")\n\t.controller(\"FirstCtrl\", function() {\n    \tthis.user = {\n        \tname: \"Dr. Evil\"\n        };\n    })\n    .controller(\"SecondCtrl\", function() {\n    \tthis.lair = {\n            name: \"Underground\"\n        };\n    });\n\n\n<div ng-controller=\"FirstController as first\">\n\t<div ng-controller=\"SecondController as second\">\n    \t{{first.user.name}}\n        {{second.lair.name}}\n    </div>\n</div>\n\n\nUsing the controllerAs syntax is a small syntax change that can just add some\nclarity to where different values come from.\n\nNotice how in the controller rather than assigning the values to $scope, they\nare actually assigned to this.\n\nDon't let this fool you too much. When you use this syntax, that simply means it\nwill take the values you put on this, and under the covers, assign them to \n$scope.\n\nUsing controllerAs is effectively the same thing as this...\n\nangular.module(\"MyModule\")\n\t.controller(\"FirstCtrl\", function($scope) {\n        $scope.first = this;\n        \n        $scope.first.user = {\n        \tname: \"Dr. Evil\"\n        };\n    })\n    .controller(\"SecondCtrl\", function($scope) {\n        $scope.second = this;\n        \n        $scope.second.lair = {\n            name: \"Underground\"\n        };\n    });\n\n\nIt's just a little cleaner to not have to use $scope when you don't need to do\nanything but assign values and functions.\n\nscope in directives\nAnother sticky place when working with scopes in Angular is when writing custom\ndirectives. Part of the confusion comes from the fact that when you create a\ndirective, one of the properties you pass on the directive definition is scope\n...\n\nangular.module(\"MyModule\")\n  .directive(\"MyDirective\", function() {\n    return {\n      scope: \"false|true|{}\"\n    }\n  });\n\n\nThere are a few options when setting up scope for a directive. First of all, the\ndefault value for this option is scope: false.\n\nangular.module(\"MyModule\")\n  .directive(\"MyDirective\", function() {\n    return {\n      scope: false,\n      link: function(scope, el) {\n        scope.myNewProp = \"OOPS, I'm on the parent!\";\n      }\n    }\n  });\n\n\nThis default can lead to some dangerous issues especially when trying to create\nre-usable directives...\n\n\n\nWhen you have scope: false, the a new scope will NOT be created for this\ndirective. That means it will use the parent scope by default. So, if you think\nyou're creating a property on a scope local to your directive, you are in fact\nactually creating a property on the parent scope. Not a very re-usable solution.\n\nAnother option you have is to pass scope: true.\n\nPassing this option will tell angular to create you a new child scope for this\ndirective. This child scope will be similar to how the scope in the \nng-controller works. It will prototypically inherit from it's parent in the\nexact same way.\n\nThis means you'll have access to the parent scope, but also be able to add new\nproperties to a scope local to the directive...\n\nangular.module(\"MyModule\")\n  .directive(\"MyDirective\", function() {\n    return {\n      scope: true,\n      link: function(scope, el) {\n        scope.someParentObject.foo = \"See I can still change things because of inheritance\";\n        \n        scope.someLocalObject = {\n          foo: \"Yay, I'm local only to this direcive!\"\n        }\n      }\n    }\n  });\n\n\nIn this example you can see that because of prototypical inheritance, this\ndirective's scope will have access to a parent property. The difference now\nthough is that when a NEW property is added to the scope, it will be created\nlocally within the directive's scope and not directly on the parent scope.\n\nThe Isolate Scope is the most complicated form of scope for directives.\n\nangular.module(\"MyModule\")\n  .directive(\"MyDirective\", function() {\n    return {\n      scope: {\n        property: \"=\",\n        expression: \"@\"\n        action: \"&\"\n      },\n      link: function(scope, el) {\n        scope.someParentObject.foo = \"See I can still change things because of inheritance\";\n        \n        scope.someLocalObject = {\n          foo: \"Yay, I'm local only to this direcive!\"\n        }\n      }\n    }\n  });\n\n\nWhen an object literal is passed as the parameter value for scope on a\ndirective, a new isolate scope is created for the directive. It still inherits\nfrom the parent scope, however only the named properties from the scope \nparameter will be passed into this new isolated scope.\n\nYou can almost think of the scope option as a filter with three different ways\nof filtering. You can see each of the three in the previous example: \"@\", \"=\",\nand \"&\".\n\nHere's examples on how to use each of the three methods.\n\n=\nangular.module(\"MyApp\", [])\n  .controller(\"UserCtrl\", function($scope) {\n    $scope.loggedInUser = {\n      name: \"Austin Powers\"\n    }\n  })\n  .directive(\"myUserDirective\", function() {\n    return {\n      restrict: \"E\",\n      template: \"<input ng-model='user.name' /></div>\",\n      scope: {\n        user: \"=\"\n      },\n      link: function(scope) {\n        console.log(scope.user) // { name: \"Austin Powers\" }\n      }\n    };\n  });\n\n\nYou would then use this directive like...\n\n<my-user-directive user=\"loggedInUser\"></my-user-directive>\n\n\nBy adding user: \"=\" to the scope property of your directive, you've basically\nsetup a way to pass an object from the parent scope down to the directive scope\nby using user=\"loggedInUser\" as an attribute on the directive.\n\nIt's also worth noting that if you wanted to, with any of the three scope\nproperties you can pass an optional alias name along with '=, @, or &', there\nwill be an example of this later.\n\nWhen using the = sign as an option you have basically set up a two way binding\nbetween the directive and the parent scope. If you then change user in the\ndirective, the change will be reflected in the parent's loggedInUser property.\n\nThe = option will always be a single string value (no {{}}'s are needed here)\nrepresenting some property on the parent scope of the directive. So, here in the\nprevious case, loggedInUser is a property on the UserCtrl's scope.\n\nWhen you type in the input box generated by the directive, you'll see \nng-model=\"user.name\". Changing the value of this text box will actually end up\nchanging the loggedInUser.name from UserCtrl!\n\n@\nThe @ option of scope is a way to pass in a string value, or a value containing \n{{}}'s that will get interpolated.\n\nThis is effectively a one way binding. You cannot change the value on the\ndirective scope and have it be reflected in the parent scope, unlike with the = \noption. If you want to reference properties from the parent scope, you must use\nthe curly braces around them. Whatever you pass in as the value of a property\nthat uses the @ option will be interpolated.\n\nHere's an example...\n\nangular.module(\"MyApp\", [])\n  .controller(\"UserCtrl\", function($scope) {\n    $scope.loggedInUser = {\n      firstName: \"Austin\",\n      middleName: \"Danger\",\n      lastName: \"Powers\"\n    };\n  })\n  .directive(\"myUserDirective\", function() {\n    return {\n      restrict: \"E\",\n      template: \"{{fullName}}\",\n      scope: {\n        fullName: \"@name\"\n      }\n    };\n  });\n\n\nAnd this is how you would use that directive...\n\n<my-user-directive \n        name=\"{{loggedInUser.firstName}} {{loggedInUser.middleName}} {{loggedInUser.lastName}}\">\n        </my-user-directive>\n\n\nNotice that in the name=\"...\" the loggedInUser.firstName, is a value on the\nparent of the directive in the UserCtrl.\n\nOn the directive scope, because of fullName: \"@name\", you'll see that you can\npass values via the name attribute and the fullName will be added to the scope.\nString interpolation will kick in, and fullName is going to equal \"Austin Danger\nPowers\". That's also what the template template: \"{{fullName}}\", will render.\n\n&\nThe last option for scope in a directive is &. This allows you to fully invoke\nan expression within the context of the parent scope. You basically get a\nwrapper function that wraps whatever you pass in so you can invoke it in the\ndirective.\n\nThe following example is a bit trivial, but in order to fully understand this\nconcept, it's a good place to start.\n\nangular.module(\"MyApp\", [])\n  .controller(\"MathCtrl\", function($scope) {\n    $scope.add = function(x, y) {\n      return x + y;\n    };\n  })\n  .directive(\"myAddThings\", function() {\n    return {\n      restrict: \"E\",\n      template: \"{{result}}\",\n      scope: {\n        localFn: \"&fn\"\n      },\n      link: function(scope) {\n        scope.result = scope.localFn({\n          x: 1,\n          y: 2\n        });\n      }\n    };\n  });\n\n\nSo, you can see here the localFn: \"&fn\". This means that in your scope, you'll\nhave a localFn available. You can then use that function in the scope of the\ndirective and pass in values via a hash map that will execute in the parent's\ncontext.\n\nThe way this works is by passing in an object that has keys which match the\narguments you pass in via the HTML when you invoke the directive...\n\nscope.result = scope.localFn({\n  x: 1,\n  y: 2\n});\n\n\nSee how here in the HTML you have...\n\n<my-add-things fn=\"add(x, y)\"></my-add-things>  \n\n\nHere's one more practical example of how you can use this option in a directive\nscope...\n\nangular.module(\"MyApp\", [])\n  .controller(\"MathCtrl\", function($scope) {\n    $scope.add = function(x, y) {\n      return parseInt(x, 10) + parseInt(y, 10);\n    };\n  })\n  .directive(\"myAddThings\", function() {\n    return {\n      restrict: \"E\",\n      template: \n        \"<input ng-model='vals.x' /><input ng-model='vals.y' />\" +\n        \"<button ng-click='sum = localFn({ x: vals.x, y: vals.y })'>Add</button>\" +\n        \"<div>{{sum}}</div>\",\n      scope: {\n        localFn: \"&fn\"\n      }\n    };\n  })\n\n\nIn this example, there's 2 inputs in the template. One bound to vals.x, and one\nbound to vals.y. Since neither of these are previously defined in any scopes,\nthey'll be added to the directives isolated scope.\n\nThen the button has an ng-click='sum = localFn({ x: vals.x, y: vals.y })' \ndirective. Every time that this button is clicked, it will evaluate the\nexpression. Since the $scope.add function is defined in the parent directive,\nand passed in through the localFn: \"&fn\", you can then pass in the map of values\nto execute the add function.\n\nSince $scope.add simply retuns a value, you can then assign sum which will then\nbe another value in the directive scope and can also be used in the template\nwith {{sum}}.\n\nConclusion\nHopefully this helps groking all the scopes in Angular! There's a lot of things\nto fully wrap your head around with Angular and this is just one of the pieces.\nLike learning any framework though, it just takes a bit of time and practice to\nget things really going and fully comprehended.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-06-25 02:13:43","updated_at":"2014-08-05 14:31:31","published_at":"2014-07-08 15:07:09","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054e","uuid":"4aabf5f4-3b93-47cc-a277-e91b1420ca18","title":"Node.js and express wrapper for Yahoo Fantasy API","slug":"node-js-and-express-wrapper-for-yahoo-fantasy-api","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"With the NFL season just 31 days away (8/3/2014), I'm proud to release a Node.js wrapper for the Yahoo Fantasy API! It's not a whole lot yet, and basically just helps with the setup and not with individual API calls, but it's still one of the only one's around, and should greatly ease the pain of working with the API.\\n\\nhttps://github.com/jcreamer898/fantasy-sports\\n\\nYou can check out the README on the repository for a more in depth look, but the basic idea is you setup an express app, setup some options, and hook into a few routes to setup and call the API.\\n\\n```prettyprint lang-js\\nvar FantasySports = require('FantasySports');\\nFantasySports.options({\\n    \\\"accessTokenUrl\\\": \\\"https://api.login.yahoo.com/oauth/v2/get_request_token\\\",\\n    \\\"requestTokenUrl\\\": \\\"https://api.login.yahoo.com/oauth/v2/get_token\\\",\\n    \\\"oauthKey\\\": process.env.OAUTHKEY,\\n    \\\"oauthSecret\\\": process.env.OAUTHSECRET,\\n    \\\"version\\\": \\\"1.0\\\",\\n    \\\"callback\\\": \\\"http://yourwebsite.com//auth/oauth/callback\\\",\\n    \\\"encryption\\\": \\\"HMAC-SHA1\\\"\\n});\\n\\n// app.get(\\\"/auth/oauth\\\")\\nexports.oauth = function(req, res) {\\n    FantasySports.startAuth(req, res);\\n};\\n\\n// app.get(\\\"/auth/oauth/callback\\\")\\nexports.authorize = function(req, res) {\\n    FantasySports.endAuth(req, res);\\n};\\n\\nexports.myTeams = function(req, res) {\\n    FantasySports\\n        .request(req, res)\\n        .api('http://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;game_keys=nfl/leagues?format=json')\\n        .done(function(data) {\\n            // Do stuff with data\\n            res.json(/* your response */);\\n        });\\n};\\n```\\n\\nHope it'll ease your pain in setting up your own Fantasy App for your league! \\n\\nAs usual per OSS, feel free to have at it and let me know if you have questions or any feature ideas.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>With the NFL season just 31 days away (8/3/2014), I'm proud to release a Node.js wrapper for the Yahoo Fantasy API! It's not a whole lot yet, and basically just helps with the setup and not with individual API calls, but it's still one of the only one's around, and should greatly ease the pain of working with the API.</p>\n<p><a href=\"https://github.com/jcreamer898/fantasy-sports\">https://github.com/jcreamer898/fantasy-sports</a></p>\n<p>You can check out the README on the repository for a more in depth look, but the basic idea is you setup an express app, setup some options, and hook into a few routes to setup and call the API.</p>\n<pre><code class=\"language-prettyprint\">var FantasySports = require('FantasySports');\nFantasySports.options({\n    &quot;accessTokenUrl&quot;: &quot;https://api.login.yahoo.com/oauth/v2/get_request_token&quot;,\n    &quot;requestTokenUrl&quot;: &quot;https://api.login.yahoo.com/oauth/v2/get_token&quot;,\n    &quot;oauthKey&quot;: process.env.OAUTHKEY,\n    &quot;oauthSecret&quot;: process.env.OAUTHSECRET,\n    &quot;version&quot;: &quot;1.0&quot;,\n    &quot;callback&quot;: &quot;http://yourwebsite.com//auth/oauth/callback&quot;,\n    &quot;encryption&quot;: &quot;HMAC-SHA1&quot;\n});\n\n// app.get(&quot;/auth/oauth&quot;)\nexports.oauth = function(req, res) {\n    FantasySports.startAuth(req, res);\n};\n\n// app.get(&quot;/auth/oauth/callback&quot;)\nexports.authorize = function(req, res) {\n    FantasySports.endAuth(req, res);\n};\n\nexports.myTeams = function(req, res) {\n    FantasySports\n        .request(req, res)\n        .api('http://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;game_keys=nfl/leagues?format=json')\n        .done(function(data) {\n            // Do stuff with data\n            res.json(/* your response */);\n        });\n};\n</code></pre>\n<p>Hope it'll ease your pain in setting up your own Fantasy App for your league!</p>\n<p>As usual per OSS, feel free to have at it and let me know if you have questions or any feature ideas.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"14","plaintext":"With the NFL season just 31 days away (8/3/2014), I'm proud to release a Node.js\nwrapper for the Yahoo Fantasy API! It's not a whole lot yet, and basically just\nhelps with the setup and not with individual API calls, but it's still one of\nthe only one's around, and should greatly ease the pain of working with the API.\n\nhttps://github.com/jcreamer898/fantasy-sports\n\nYou can check out the README on the repository for a more in depth look, but the\nbasic idea is you setup an express app, setup some options, and hook into a few\nroutes to setup and call the API.\n\nvar FantasySports = require('FantasySports');\nFantasySports.options({\n    \"accessTokenUrl\": \"https://api.login.yahoo.com/oauth/v2/get_request_token\",\n    \"requestTokenUrl\": \"https://api.login.yahoo.com/oauth/v2/get_token\",\n    \"oauthKey\": process.env.OAUTHKEY,\n    \"oauthSecret\": process.env.OAUTHSECRET,\n    \"version\": \"1.0\",\n    \"callback\": \"http://yourwebsite.com//auth/oauth/callback\",\n    \"encryption\": \"HMAC-SHA1\"\n});\n\n// app.get(\"/auth/oauth\")\nexports.oauth = function(req, res) {\n    FantasySports.startAuth(req, res);\n};\n\n// app.get(\"/auth/oauth/callback\")\nexports.authorize = function(req, res) {\n    FantasySports.endAuth(req, res);\n};\n\nexports.myTeams = function(req, res) {\n    FantasySports\n        .request(req, res)\n        .api('http://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;game_keys=nfl/leagues?format=json')\n        .done(function(data) {\n            // Do stuff with data\n            res.json(/* your response */);\n        });\n};\n\n\nHope it'll ease your pain in setting up your own Fantasy App for your league!\n\nAs usual per OSS, feel free to have at it and let me know if you have questions\nor any feature ideas.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-08-04 16:57:56","updated_at":"2014-08-05 14:32:34","published_at":"2014-08-04 16:58:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422054f","uuid":"815a7cea-f915-4749-8f67-ec915d577dce","title":"Grunt and live reload","slug":"grunt-and-live-reload","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"derp\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>derp</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"15","plaintext":"derp","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-08-04 19:35:06","updated_at":"2014-08-04 19:35:06","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220550","uuid":"61940892-fbcc-48c1-b103-bb696eba839e","title":"Adding clarity to scope inheritance in angular","slug":"adding-clarity-to-scope-inheritance-in-angular","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"No matter how old JavaScript gets, the concept of prototypical inheritance still confuses developers. In fact, appendTo just gave a [training course](-functions-and-objects-8-12-2014/) on functions and objects that talked about it yesterday! Not to mention Jordan Kasper's great talk on [OO JavaScript](http://vimeo.com/62353516).\\n\\nThe fact is prototypical inheritance in JavaScript presents confusion to a lot of folks out there. In terms of Angular.js that may explain why the concept of `$scope` is [difficult to grok](http://jonathancreamer.com/working-with-all-the-different-kinds-of-scopes-in-angular/).\\n\\nLet's take a step back to the root of the problem and try to understand prototypical inheritance a little better.\\n\\n### POJCF's\\nLet's start with plain old javascript constructor functions (insert rimshot here).\\n\\nThis is a function...\\n\\n```prettyprint lang-js\\nfunction Root() {}\\n```\\n\\nSimple.\\n\\nIf you plan on using the `new` operator on this `Root` function, well then it's called a `constructor` function.\\n\\n```prettyprint lang-js\\nvar root = new Root();\\n```\\n\\nEvery JavaScript function has a `prototype`.\\n\\nWhen you log the `Root.prototype`, you get...\\n\\n![](http://d.pr/i/p0PN+)\\n\\nNotice a few things here, first of all there's a `constructor` property on Root.prototype, and a mysterious looking `__proto__` member as well.\\n\\nThat __proto__ represents the prototype that this function is based off, and since this is just a plain JavaScript function with no inheritance set up yet, it refers to the `Object` prototype which is something just built in to JavaScript...\\n\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\\n\\nThis has things like `.toString`, `.toValue`, etc...\\n\\nTechnically the `__proto__` thing is deprecated and the way you get an object's prototype is by using the `Object.getPrototypeOf` method like this...\\n\\n```prettyprint lang-js\\nObject.getPrototypeOf(Root.prototype); // Object {}\\n```\\n\\nThis will make even more sense shortly after the inheritance chain is set up. Stay tuned.\\n\\nAn object's prototype is basically it's DNA, but it's nothing more than an object with functions or properties on it!\\n\\nSo what happens when you add something to the `Root` prototype?\\n\\n```prettyprint lang-js\\nfunction Root() {}\\n\\nRoot.prototype.add = function(x, y) {\\n\\treturn x + y;\\n};\\n```\\n\\nWell, now you've modified the DNA of the `Root` and added a function called `add` to it...\\n\\n![](http://d.pr/i/A3Lk+)\\n\\nThat means when you create an instance of `Root`, you can call add it's add method.\\n\\n```prettyprint lang-js\\nvar root = new Root();\\n\\nvar sum = root.add(2, 2);\\n\\nconsole.log(sum); // 4\\n```\\n\\nYou can also add primitives or object's to the `Root` prototype...\\n\\n```prettyprint lang-js\\nRoot.prototype.name = \\\"Jonathan\\\"; // String\\n\\nRoot.prototype.user = {}; // Object\\n\\nRoot.prototype.friends = []; // Array\\n```\\n\\n### Creating a child\\nSo, here's where things get interesting...\\n\\n```prettyprint lang-js\\nfunction Root() {}\\n\\nRoot.prototype.add = function(x, y) {\\n\\treturn x + y;\\n};\\n\\nfunction Child() {}\\n\\nChild.prototype = Object.create(Root.prototype); // Magic\\nChild.prototype.constructor = Child; // Gotta reset this\\n\\nconsole.log(Child.prototype.add); // Looks up the chain\\n```\\n\\nNow then, `Child` officially \\\"inherits\\\" it's prototype from `Root`. And there was much rejoicing.\\n\\nFirst things first, the `Object.create` [method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).  Don't  get to hung up on this, it's job is  *basically* to create a new object based off of whatever you pass in.\\n\\nIn this case what we're doing is setting the prototype of `Child` to a new object that looks identical to the `Root` prototype. The next logical step is to reset the `Child.prototype.constructor` and make sure it still points to the `Child` function. You have to do this because if you don't, then `Child.prototype.constructor` would point to the `function Root() {}`.\\n\\nBecause we set the `Child` prototype to the `Root` prototype, the `Child.prototype` now has the `add` method available...\\n\\nHave a look here...\\n\\n![](http://d.pr/i/zZJd+)\\n\\nSee how you can see the `Child` has it's `.prototype` property. Then, the `__proto__` helps point to the fact that the prototype of `Child` is based off of the prototype of `Root`, and the prototype of `Root` is based off of `Object`!\\n\\nIt's basically a tree...\\n\\n```prettyprint\\nChild\\n|\\n \\\\\\n  \\\\\\n   Root.prototype\\n   - add\\n   |\\n   |\\n    \\\\\\n     \\\\\\n      Object.prototype\\n      -toString\\n      -valueOf\\n      -etc., etc.\\n```\\n\\nThere's a couple of interesting things worth noting here...\\n\\nWhen you create an instance of `Child` and call `add`...\\n\\n```prettyprint lang-js\\nvar child = new Child();\\nchild.add(2, 2);\\n```\\n\\nYou haven't actually defined `add` on the `Child` prototype. BUT, you have definited it on the `Root` prototype which `Child` inherits from. So therefore, it will add stuff.\\n\\nIf I was to be a crazy person and give an `add` method to `Child` also, well that would rip a whole in the space time continuum right?!\\n\\n![](http://stream1.gifsoup.com/view4/4648680/doc-brown-o.gif)\\n\\n```prettyprint lang-js\\nChild.prototype.add = function() {\\n\\treturn x - y; // troll\\n};\\n```\\n\\nThankfully it won't. But, what it will do is basically hide the parent's `add` method.\\n\\nThe same is true for primitive things on the `Root`. Earlier you saw this...\\n\\n```prettyprint lang-js\\nRoot.prototype.name = \\\"\\\";\\n```\\n\\nSo, same as the `add`, you can overwrite that `name` primitive string in the `Child` prototype...\\n\\n```prettyprint lang-js\\nChild.prototype.name = \\\"Mike\\\"; // String\\n```\\n\\nThis again, masks the `name` property on `Root.prototype`.\\n\\n### What's that have to do with $scope?!\\nEVERYTHING.\\n\\n> Scope in angular is based off of prototypical inheritance.\\n\\nWherever you use `ng-app`, say on a `<body>` or `<html>` tag, angular is going to create you an instance of the `Scope` constructor function that will be referred to as the `$rootScope`.\\n\\nAll other scopes in angular come from this `$rootScope` by way of inheritance in EXACTLY the same way we've been talking about.\\n\\nWhen you have something like this with an `ng-app` and an `ng-controller`...\\n\\n```prettyprint lang-html\\n<body ng-app=\\\"Demo\\\">\\n\\t<div ng-controller=\\\"FooCtrl\\\"></foo>\\n</body>\\n</html>\\n```\\n\\nHere's what happens.\\n\\nFirst, there's a `$rootScope` created. Then essentially, the `FooCtrl` gets its own scope that prototypically inherits from the prototype of `$rootScope` which in terms of angular is `Scope.prototype`.\\n\\nHere in the angular source code in `src/ng/rootScope.js` you can find the code for `Scope`...\\n\\n```prettyprint lang-js\\nfunction Scope() {\\n      this.$id = nextUid();\\n      this.$$phase = this.$parent = this.$$watchers =\\n                     this.$$nextSibling = this.$$prevSibling =\\n                     this.$$childHead = this.$$childTail = null;\\n      this['this'] = this.$root =  this;\\n      this.$$destroyed = false;\\n      this.$$asyncQueue = [];\\n      this.$$postDigestQueue = [];\\n      this.$$listeners = {};\\n      this.$$listenerCount = {};\\n      this.$$isolateBindings = {};\\n    }\\n    \\n// ...\\n\\nScope.prototype = {\\n    constructor: Scope,\\n    $new: function() {}\\n    // etc, etc...\\n}      \\n```\\n\\nThe `$new` function is where new scopes are created...\\n\\n```prettyprint lang-js\\n$new: function(isolate) {\\n  var ChildScope,\\n      child;\\n\\n  if (isolate) {\\n    child = new Scope();\\n    child.$root = this.$root;\\n    child.$$asyncQueue = this.$$asyncQueue;\\n    child.$$postDigestQueue = this.$$postDigestQueue;\\n  } else {\\n    \\n    if (!this.$$childScopeClass) {\\n      this.$$childScopeClass = function() {\\n        // blah blah...\\n      };\\n      this.$$childScopeClass.prototype = this;\\n    }\\n    child = new this.$$childScopeClass();\\n  }\\n  \\n  // more stuff we don't care about right now...\\n \\n  return child;\\n},\\n```\\n\\nWhen an `ng-controller` directive is used, angular will call `$rootScope.$new` and create a new scope.\\n\\nFollowing down the execution path, you'll see that a controller is not going to be an isolate scope so it'll jump into the `else` block. It then caches a reference to a function called `this.$$childScopeClass`.\\n\\nIt then sets the prototype of this function to the prototype of `Scope`...\\n\\n```prettyprint lang-js\\nthis.$$childScopeClass.prototype = this;\\n```\\n\\nThis is similar to calling `Object.create(Scope);`, but in this case `this` is referring to an instance of `Scope`.\\n\\n### ng-controller\\n\\nHere's some sample code that helps illustrate this...\\n\\n```prettyprint lang-js\\nangular.module(\\\"Demo\\\", [])\\n  .controller(\\\"ChildCtrl\\\", function($rootScope, $scope) {\\n    $rootScope.rootyThing = \\\"I am groot\\\";\\n    console.log($scope.rootyThing);  \\n    console.log(Object.getPrototypeOf($scope)); // Scope\\n });\\n```\\n\\nAnd this HTML...\\n\\n```prettyprint lang-html\\n<body ng-app=\\\"Demo\\\">\\n  <div ng-controller=\\\"ChildCtrl\\\">\\n  </div>\\n</body>\\n```\\n\\nLet's break this thing down.\\n\\n`ng-app` is set on the body and uses the `Demo` module.\\n\\nThen `ChildCtrl` is set up on a div.\\n\\nWhen the controller function fires it's asking for `$rootScope` and setting `rootyThing` up on it. Since `$scope` prototypically inherits from `$rootScope` you'll see how we're immediately able to access `rootyThing` on the local controller scope!\\n\\n![](http://d.pr/i/Oe5G+)\\n\\nThe `Object.getPrototypeOf($scope);` call shows you the controller's `$scope` prototype is `Scope`.\\n\\nBack to the idea of primitives or objects on prototypes, take a look at this...\\n\\n```prettyprint lang-js\\nangular.module(\\\"Demo\\\", [])\\n  .controller(\\\"ChildCtrl\\\", function($scope) {\\n    $scope.name = \\\"foo\\\";\\n    $scope.user = {};\\n    $scope.user.name = \\\"bar\\\";\\n })\\n .controller(\\\"AnotherChildCtrl, function($scope) {\\n   $scope.name = \\\"overwrites foo\\\";\\n   $scope.user.name = \\\"changes foo in ChildCtrl\\\";\\n });\\n```\\n```prettyprint lang-html\\n<body ng-app=\\\"Demo\\\">\\n  <div ng-controller=\\\"ChildCtrl\\\">\\n    <div ng-controller=\\\"AnotherChildCtrl\\\">\\n\\t</div>\\n  </div>\\n</body>\\n```\\n\\nSo, first of all `$scope.name` is set on the `ChildCtrl`.\\n\\nThen it's also set on the `AnotherChildCtrl`. Thinking back on the first examples of this, the `$scope.name` on `ChildCtrl` has in fact been overwritten in the same way as before.\\n\\nIf you need access to a variable from `ChildCtrl` inside of `AnotherChildCtrl`, then you have to use an object to do it! Ain't prototypical inheritance neato. \\n\\nIn general, try not to just assign stuff directly to `$scope` as primitives. You're `$scope` is a place to PUT the \\\"model\\\", but is not actually the \\\"model\\\". You'll want to do more with objects and always see a \\\".\\\" in your views when referencing a `$scope` property.\\n\\nAka...\\n\\n```prettyprint lang-html\\n{{user.name}}\\n```\\n\\nvs.\\n\\n```prettyprint lang-html\\n{{name}}\\n```\\n\\n### Directive isolated scope\\nOne last thing.\\n\\nTake a look at the following video...\\n\\n![](http://d.pr/i/K3Hx+)\\n\\nThis video is based off of this code... \\n\\n```prettyprint lang-js\\nangular.module(\\\"Demo\\\", [])\\n  .controller(\\\"ChildCtrl\\\", function($rootScope, $scope) {\\n    console.log(\\\"root\\\", $rootScope);\\n    $rootScope.rootyThing = \\\"I am groot\\\";\\n    console.log(\\\"ctrl\\\", $scope);\\n    $scope.childCtrlProp = \\\"heyo\\\";\\n })\\n.directive(\\\"isoElement\\\", function() {\\n  return {\\n    restrict: \\\"E\\\",\\n    scope: true,\\n    link: function(scope) {\\n      console.log(\\\"directive\\\", scope);\\n      scope.foo = \\\"bar\\\";\\n      console.log(scope.childCtrlProp);\\n      console.log(scope.rootyThing);\\n    }\\n  };\\n}); \\n```\\n\\nWhen `scope: true` is used when creating a directive, you'll get inheritance.\\n\\nIf you use `scope: {}` and have properties on there, you've created an \\\"isolated\\\" scope. If you refer back to the source for `Scope.$new` you'll see where that happens.\\n\\n```prettyprint lang-js\\nif (isolate) {\\n    child = new Scope();\\n    child.$root = this.$root;\\n    child.$$asyncQueue = this.$$asyncQueue;\\n    child.$$postDigestQueue = this.$$postDigestQueue;\\n}\\n```\\n\\n# Conclusion\\nThis stuff seems really complicated when you first get into it. The basic ideas though are all based on prototypical inheritance. If you'll fully grok that, then angular scope inheritance is nothing more than that. \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>No matter how old JavaScript gets, the concept of prototypical inheritance still confuses developers. In fact, appendTo just gave a <a href=\"-functions-and-objects-8-12-2014/\">training course</a> on functions and objects that talked about it yesterday! Not to mention Jordan Kasper's great talk on <a href=\"http://vimeo.com/62353516\">OO JavaScript</a>.</p>\n<p>The fact is prototypical inheritance in JavaScript presents confusion to a lot of folks out there. In terms of Angular.js that may explain why the concept of <code>$scope</code> is <a href=\"http://jonathancreamer.com/working-with-all-the-different-kinds-of-scopes-in-angular/\">difficult to grok</a>.</p>\n<p>Let's take a step back to the root of the problem and try to understand prototypical inheritance a little better.</p>\n<h3 id=\"pojcfs\">POJCF's</h3>\n<p>Let's start with plain old javascript constructor functions (insert rimshot here).</p>\n<p>This is a function...</p>\n<pre><code class=\"language-prettyprint\">function Root() {}\n</code></pre>\n<p>Simple.</p>\n<p>If you plan on using the <code>new</code> operator on this <code>Root</code> function, well then it's called a <code>constructor</code> function.</p>\n<pre><code class=\"language-prettyprint\">var root = new Root();\n</code></pre>\n<p>Every JavaScript function has a <code>prototype</code>.</p>\n<p>When you log the <code>Root.prototype</code>, you get...</p>\n<p><img src=\"http://d.pr/i/p0PN+\" alt=\"\"></p>\n<p>Notice a few things here, first of all there's a <code>constructor</code> property on Root.prototype, and a mysterious looking <code>__proto__</code> member as well.</p>\n<p>That <strong>proto</strong> represents the prototype that this function is based off, and since this is just a plain JavaScript function with no inheritance set up yet, it refers to the <code>Object</code> prototype which is something just built in to JavaScript...</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype</a></p>\n<p>This has things like <code>.toString</code>, <code>.toValue</code>, etc...</p>\n<p>Technically the <code>__proto__</code> thing is deprecated and the way you get an object's prototype is by using the <code>Object.getPrototypeOf</code> method like this...</p>\n<pre><code class=\"language-prettyprint\">Object.getPrototypeOf(Root.prototype); // Object {}\n</code></pre>\n<p>This will make even more sense shortly after the inheritance chain is set up. Stay tuned.</p>\n<p>An object's prototype is basically it's DNA, but it's nothing more than an object with functions or properties on it!</p>\n<p>So what happens when you add something to the <code>Root</code> prototype?</p>\n<pre><code class=\"language-prettyprint\">function Root() {}\n\nRoot.prototype.add = function(x, y) {\n\treturn x + y;\n};\n</code></pre>\n<p>Well, now you've modified the DNA of the <code>Root</code> and added a function called <code>add</code> to it...</p>\n<p><img src=\"http://d.pr/i/A3Lk+\" alt=\"\"></p>\n<p>That means when you create an instance of <code>Root</code>, you can call add it's add method.</p>\n<pre><code class=\"language-prettyprint\">var root = new Root();\n\nvar sum = root.add(2, 2);\n\nconsole.log(sum); // 4\n</code></pre>\n<p>You can also add primitives or object's to the <code>Root</code> prototype...</p>\n<pre><code class=\"language-prettyprint\">Root.prototype.name = &quot;Jonathan&quot;; // String\n\nRoot.prototype.user = {}; // Object\n\nRoot.prototype.friends = []; // Array\n</code></pre>\n<h3 id=\"creatingachild\">Creating a child</h3>\n<p>So, here's where things get interesting...</p>\n<pre><code class=\"language-prettyprint\">function Root() {}\n\nRoot.prototype.add = function(x, y) {\n\treturn x + y;\n};\n\nfunction Child() {}\n\nChild.prototype = Object.create(Root.prototype); // Magic\nChild.prototype.constructor = Child; // Gotta reset this\n\nconsole.log(Child.prototype.add); // Looks up the chain\n</code></pre>\n<p>Now then, <code>Child</code> officially &quot;inherits&quot; it's prototype from <code>Root</code>. And there was much rejoicing.</p>\n<p>First things first, the <code>Object.create</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">method</a>.  Don't  get to hung up on this, it's job is  <em>basically</em> to create a new object based off of whatever you pass in.</p>\n<p>In this case what we're doing is setting the prototype of <code>Child</code> to a new object that looks identical to the <code>Root</code> prototype. The next logical step is to reset the <code>Child.prototype.constructor</code> and make sure it still points to the <code>Child</code> function. You have to do this because if you don't, then <code>Child.prototype.constructor</code> would point to the <code>function Root() {}</code>.</p>\n<p>Because we set the <code>Child</code> prototype to the <code>Root</code> prototype, the <code>Child.prototype</code> now has the <code>add</code> method available...</p>\n<p>Have a look here...</p>\n<p><img src=\"http://d.pr/i/zZJd+\" alt=\"\"></p>\n<p>See how you can see the <code>Child</code> has it's <code>.prototype</code> property. Then, the <code>__proto__</code> helps point to the fact that the prototype of <code>Child</code> is based off of the prototype of <code>Root</code>, and the prototype of <code>Root</code> is based off of <code>Object</code>!</p>\n<p>It's basically a tree...</p>\n<pre><code class=\"language-prettyprint\">Child\n|\n \\\n  \\\n   Root.prototype\n   - add\n   |\n   |\n    \\\n     \\\n      Object.prototype\n      -toString\n      -valueOf\n      -etc., etc.\n</code></pre>\n<p>There's a couple of interesting things worth noting here...</p>\n<p>When you create an instance of <code>Child</code> and call <code>add</code>...</p>\n<pre><code class=\"language-prettyprint\">var child = new Child();\nchild.add(2, 2);\n</code></pre>\n<p>You haven't actually defined <code>add</code> on the <code>Child</code> prototype. BUT, you have definited it on the <code>Root</code> prototype which <code>Child</code> inherits from. So therefore, it will add stuff.</p>\n<p>If I was to be a crazy person and give an <code>add</code> method to <code>Child</code> also, well that would rip a whole in the space time continuum right?!</p>\n<p><img src=\"http://stream1.gifsoup.com/view4/4648680/doc-brown-o.gif\" alt=\"\"></p>\n<pre><code class=\"language-prettyprint\">Child.prototype.add = function() {\n\treturn x - y; // troll\n};\n</code></pre>\n<p>Thankfully it won't. But, what it will do is basically hide the parent's <code>add</code> method.</p>\n<p>The same is true for primitive things on the <code>Root</code>. Earlier you saw this...</p>\n<pre><code class=\"language-prettyprint\">Root.prototype.name = &quot;&quot;;\n</code></pre>\n<p>So, same as the <code>add</code>, you can overwrite that <code>name</code> primitive string in the <code>Child</code> prototype...</p>\n<pre><code class=\"language-prettyprint\">Child.prototype.name = &quot;Mike&quot;; // String\n</code></pre>\n<p>This again, masks the <code>name</code> property on <code>Root.prototype</code>.</p>\n<h3 id=\"whatsthathavetodowithscope\">What's that have to do with $scope?!</h3>\n<p>EVERYTHING.</p>\n<blockquote>\n<p>Scope in angular is based off of prototypical inheritance.</p>\n</blockquote>\n<p>Wherever you use <code>ng-app</code>, say on a <code>&lt;body&gt;</code> or <code>&lt;html&gt;</code> tag, angular is going to create you an instance of the <code>Scope</code> constructor function that will be referred to as the <code>$rootScope</code>.</p>\n<p>All other scopes in angular come from this <code>$rootScope</code> by way of inheritance in EXACTLY the same way we've been talking about.</p>\n<p>When you have something like this with an <code>ng-app</code> and an <code>ng-controller</code>...</p>\n<pre><code class=\"language-prettyprint\">&lt;body ng-app=&quot;Demo&quot;&gt;\n\t&lt;div ng-controller=&quot;FooCtrl&quot;&gt;&lt;/foo&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here's what happens.</p>\n<p>First, there's a <code>$rootScope</code> created. Then essentially, the <code>FooCtrl</code> gets its own scope that prototypically inherits from the prototype of <code>$rootScope</code> which in terms of angular is <code>Scope.prototype</code>.</p>\n<p>Here in the angular source code in <code>src/ng/rootScope.js</code> you can find the code for <code>Scope</code>...</p>\n<pre><code class=\"language-prettyprint\">function Scope() {\n      this.$id = nextUid();\n      this.$$phase = this.$parent = this.$$watchers =\n                     this.$$nextSibling = this.$$prevSibling =\n                     this.$$childHead = this.$$childTail = null;\n      this['this'] = this.$root =  this;\n      this.$$destroyed = false;\n      this.$$asyncQueue = [];\n      this.$$postDigestQueue = [];\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$$isolateBindings = {};\n    }\n    \n// ...\n\nScope.prototype = {\n    constructor: Scope,\n    $new: function() {}\n    // etc, etc...\n}      \n</code></pre>\n<p>The <code>$new</code> function is where new scopes are created...</p>\n<pre><code class=\"language-prettyprint\">$new: function(isolate) {\n  var ChildScope,\n      child;\n\n  if (isolate) {\n    child = new Scope();\n    child.$root = this.$root;\n    child.$$asyncQueue = this.$$asyncQueue;\n    child.$$postDigestQueue = this.$$postDigestQueue;\n  } else {\n    \n    if (!this.$$childScopeClass) {\n      this.$$childScopeClass = function() {\n        // blah blah...\n      };\n      this.$$childScopeClass.prototype = this;\n    }\n    child = new this.$$childScopeClass();\n  }\n  \n  // more stuff we don't care about right now...\n \n  return child;\n},\n</code></pre>\n<p>When an <code>ng-controller</code> directive is used, angular will call <code>$rootScope.$new</code> and create a new scope.</p>\n<p>Following down the execution path, you'll see that a controller is not going to be an isolate scope so it'll jump into the <code>else</code> block. It then caches a reference to a function called <code>this.$$childScopeClass</code>.</p>\n<p>It then sets the prototype of this function to the prototype of <code>Scope</code>...</p>\n<pre><code class=\"language-prettyprint\">this.$$childScopeClass.prototype = this;\n</code></pre>\n<p>This is similar to calling <code>Object.create(Scope);</code>, but in this case <code>this</code> is referring to an instance of <code>Scope</code>.</p>\n<h3 id=\"ngcontroller\">ng-controller</h3>\n<p>Here's some sample code that helps illustrate this...</p>\n<pre><code class=\"language-prettyprint\">angular.module(&quot;Demo&quot;, [])\n  .controller(&quot;ChildCtrl&quot;, function($rootScope, $scope) {\n    $rootScope.rootyThing = &quot;I am groot&quot;;\n    console.log($scope.rootyThing);  \n    console.log(Object.getPrototypeOf($scope)); // Scope\n });\n</code></pre>\n<p>And this HTML...</p>\n<pre><code class=\"language-prettyprint\">&lt;body ng-app=&quot;Demo&quot;&gt;\n  &lt;div ng-controller=&quot;ChildCtrl&quot;&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Let's break this thing down.</p>\n<p><code>ng-app</code> is set on the body and uses the <code>Demo</code> module.</p>\n<p>Then <code>ChildCtrl</code> is set up on a div.</p>\n<p>When the controller function fires it's asking for <code>$rootScope</code> and setting <code>rootyThing</code> up on it. Since <code>$scope</code> prototypically inherits from <code>$rootScope</code> you'll see how we're immediately able to access <code>rootyThing</code> on the local controller scope!</p>\n<p><img src=\"http://d.pr/i/Oe5G+\" alt=\"\"></p>\n<p>The <code>Object.getPrototypeOf($scope);</code> call shows you the controller's <code>$scope</code> prototype is <code>Scope</code>.</p>\n<p>Back to the idea of primitives or objects on prototypes, take a look at this...</p>\n<pre><code class=\"language-prettyprint\">angular.module(&quot;Demo&quot;, [])\n  .controller(&quot;ChildCtrl&quot;, function($scope) {\n    $scope.name = &quot;foo&quot;;\n    $scope.user = {};\n    $scope.user.name = &quot;bar&quot;;\n })\n .controller(&quot;AnotherChildCtrl, function($scope) {\n   $scope.name = &quot;overwrites foo&quot;;\n   $scope.user.name = &quot;changes foo in ChildCtrl&quot;;\n });\n</code></pre>\n<pre><code class=\"language-prettyprint\">&lt;body ng-app=&quot;Demo&quot;&gt;\n  &lt;div ng-controller=&quot;ChildCtrl&quot;&gt;\n    &lt;div ng-controller=&quot;AnotherChildCtrl&quot;&gt;\n\t&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>So, first of all <code>$scope.name</code> is set on the <code>ChildCtrl</code>.</p>\n<p>Then it's also set on the <code>AnotherChildCtrl</code>. Thinking back on the first examples of this, the <code>$scope.name</code> on <code>ChildCtrl</code> has in fact been overwritten in the same way as before.</p>\n<p>If you need access to a variable from <code>ChildCtrl</code> inside of <code>AnotherChildCtrl</code>, then you have to use an object to do it! Ain't prototypical inheritance neato.</p>\n<p>In general, try not to just assign stuff directly to <code>$scope</code> as primitives. You're <code>$scope</code> is a place to PUT the &quot;model&quot;, but is not actually the &quot;model&quot;. You'll want to do more with objects and always see a &quot;.&quot; in your views when referencing a <code>$scope</code> property.</p>\n<p>Aka...</p>\n<pre><code class=\"language-prettyprint\">{{user.name}}\n</code></pre>\n<p>vs.</p>\n<pre><code class=\"language-prettyprint\">{{name}}\n</code></pre>\n<h3 id=\"directiveisolatedscope\">Directive isolated scope</h3>\n<p>One last thing.</p>\n<p>Take a look at the following video...</p>\n<p><img src=\"http://d.pr/i/K3Hx+\" alt=\"\"></p>\n<p>This video is based off of this code...</p>\n<pre><code class=\"language-prettyprint\">angular.module(&quot;Demo&quot;, [])\n  .controller(&quot;ChildCtrl&quot;, function($rootScope, $scope) {\n    console.log(&quot;root&quot;, $rootScope);\n    $rootScope.rootyThing = &quot;I am groot&quot;;\n    console.log(&quot;ctrl&quot;, $scope);\n    $scope.childCtrlProp = &quot;heyo&quot;;\n })\n.directive(&quot;isoElement&quot;, function() {\n  return {\n    restrict: &quot;E&quot;,\n    scope: true,\n    link: function(scope) {\n      console.log(&quot;directive&quot;, scope);\n      scope.foo = &quot;bar&quot;;\n      console.log(scope.childCtrlProp);\n      console.log(scope.rootyThing);\n    }\n  };\n}); \n</code></pre>\n<p>When <code>scope: true</code> is used when creating a directive, you'll get inheritance.</p>\n<p>If you use <code>scope: {}</code> and have properties on there, you've created an &quot;isolated&quot; scope. If you refer back to the source for <code>Scope.$new</code> you'll see where that happens.</p>\n<pre><code class=\"language-prettyprint\">if (isolate) {\n    child = new Scope();\n    child.$root = this.$root;\n    child.$$asyncQueue = this.$$asyncQueue;\n    child.$$postDigestQueue = this.$$postDigestQueue;\n}\n</code></pre>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>This stuff seems really complicated when you first get into it. The basic ideas though are all based on prototypical inheritance. If you'll fully grok that, then angular scope inheritance is nothing more than that.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"16","plaintext":"No matter how old JavaScript gets, the concept of prototypical inheritance still\nconfuses developers. In fact, appendTo just gave a training course\n[-functions-and-objects-8-12-2014/] on functions and objects that talked about\nit yesterday! Not to mention Jordan Kasper's great talk on OO JavaScript\n[http://vimeo.com/62353516].\n\nThe fact is prototypical inheritance in JavaScript presents confusion to a lot\nof folks out there. In terms of Angular.js that may explain why the concept of \n$scope is difficult to grok\n[http://jonathancreamer.com/working-with-all-the-different-kinds-of-scopes-in-angular/]\n.\n\nLet's take a step back to the root of the problem and try to understand\nprototypical inheritance a little better.\n\nPOJCF's\nLet's start with plain old javascript constructor functions (insert rimshot\nhere).\n\nThis is a function...\n\nfunction Root() {}\n\n\nSimple.\n\nIf you plan on using the new operator on this Root function, well then it's\ncalled a constructor function.\n\nvar root = new Root();\n\n\nEvery JavaScript function has a prototype.\n\nWhen you log the Root.prototype, you get...\n\n\n\nNotice a few things here, first of all there's a constructor property on\nRoot.prototype, and a mysterious looking __proto__ member as well.\n\nThat proto represents the prototype that this function is based off, and since\nthis is just a plain JavaScript function with no inheritance set up yet, it\nrefers to the Object prototype which is something just built in to JavaScript...\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\nThis has things like .toString, .toValue, etc...\n\nTechnically the __proto__ thing is deprecated and the way you get an object's\nprototype is by using the Object.getPrototypeOf method like this...\n\nObject.getPrototypeOf(Root.prototype); // Object {}\n\n\nThis will make even more sense shortly after the inheritance chain is set up.\nStay tuned.\n\nAn object's prototype is basically it's DNA, but it's nothing more than an\nobject with functions or properties on it!\n\nSo what happens when you add something to the Root prototype?\n\nfunction Root() {}\n\nRoot.prototype.add = function(x, y) {\n\treturn x + y;\n};\n\n\nWell, now you've modified the DNA of the Root and added a function called add to\nit...\n\n\n\nThat means when you create an instance of Root, you can call add it's add\nmethod.\n\nvar root = new Root();\n\nvar sum = root.add(2, 2);\n\nconsole.log(sum); // 4\n\n\nYou can also add primitives or object's to the Root prototype...\n\nRoot.prototype.name = \"Jonathan\"; // String\n\nRoot.prototype.user = {}; // Object\n\nRoot.prototype.friends = []; // Array\n\n\nCreating a child\nSo, here's where things get interesting...\n\nfunction Root() {}\n\nRoot.prototype.add = function(x, y) {\n\treturn x + y;\n};\n\nfunction Child() {}\n\nChild.prototype = Object.create(Root.prototype); // Magic\nChild.prototype.constructor = Child; // Gotta reset this\n\nconsole.log(Child.prototype.add); // Looks up the chain\n\n\nNow then, Child officially \"inherits\" it's prototype from Root. And there was\nmuch rejoicing.\n\nFirst things first, the Object.create method\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create]\n. Don't get to hung up on this, it's job is basically to create a new object\nbased off of whatever you pass in.\n\nIn this case what we're doing is setting the prototype of Child to a new object\nthat looks identical to the Root prototype. The next logical step is to reset\nthe Child.prototype.constructor and make sure it still points to the Child \nfunction. You have to do this because if you don't, then \nChild.prototype.constructor would point to the function Root() {}.\n\nBecause we set the Child prototype to the Root prototype, the Child.prototype \nnow has the add method available...\n\nHave a look here...\n\n\n\nSee how you can see the Child has it's .prototype property. Then, the __proto__ \nhelps point to the fact that the prototype of Child is based off of the\nprototype of Root, and the prototype of Root is based off of Object!\n\nIt's basically a tree...\n\nChild\n|\n \\\n  \\\n   Root.prototype\n   - add\n   |\n   |\n    \\\n     \\\n      Object.prototype\n      -toString\n      -valueOf\n      -etc., etc.\n\n\nThere's a couple of interesting things worth noting here...\n\nWhen you create an instance of Child and call add...\n\nvar child = new Child();\nchild.add(2, 2);\n\n\nYou haven't actually defined add on the Child prototype. BUT, you have definited\nit on the Root prototype which Child inherits from. So therefore, it will add\nstuff.\n\nIf I was to be a crazy person and give an add method to Child also, well that\nwould rip a whole in the space time continuum right?!\n\n\n\nChild.prototype.add = function() {\n\treturn x - y; // troll\n};\n\n\nThankfully it won't. But, what it will do is basically hide the parent's add \nmethod.\n\nThe same is true for primitive things on the Root. Earlier you saw this...\n\nRoot.prototype.name = \"\";\n\n\nSo, same as the add, you can overwrite that name primitive string in the Child \nprototype...\n\nChild.prototype.name = \"Mike\"; // String\n\n\nThis again, masks the name property on Root.prototype.\n\nWhat's that have to do with $scope?!\nEVERYTHING.\n\n> Scope in angular is based off of prototypical inheritance.\n\n\nWherever you use ng-app, say on a <body> or <html> tag, angular is going to\ncreate you an instance of the Scope constructor function that will be referred\nto as the $rootScope.\n\nAll other scopes in angular come from this $rootScope by way of inheritance in\nEXACTLY the same way we've been talking about.\n\nWhen you have something like this with an ng-app and an ng-controller...\n\n<body ng-app=\"Demo\">\n\t<div ng-controller=\"FooCtrl\"></foo>\n</body>\n</html>\n\n\nHere's what happens.\n\nFirst, there's a $rootScope created. Then essentially, the FooCtrl gets its own\nscope that prototypically inherits from the prototype of $rootScope which in\nterms of angular is Scope.prototype.\n\nHere in the angular source code in src/ng/rootScope.js you can find the code for \nScope...\n\nfunction Scope() {\n      this.$id = nextUid();\n      this.$$phase = this.$parent = this.$$watchers =\n                     this.$$nextSibling = this.$$prevSibling =\n                     this.$$childHead = this.$$childTail = null;\n      this['this'] = this.$root =  this;\n      this.$$destroyed = false;\n      this.$$asyncQueue = [];\n      this.$$postDigestQueue = [];\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$$isolateBindings = {};\n    }\n    \n// ...\n\nScope.prototype = {\n    constructor: Scope,\n    $new: function() {}\n    // etc, etc...\n}      \n\n\nThe $new function is where new scopes are created...\n\n$new: function(isolate) {\n  var ChildScope,\n      child;\n\n  if (isolate) {\n    child = new Scope();\n    child.$root = this.$root;\n    child.$$asyncQueue = this.$$asyncQueue;\n    child.$$postDigestQueue = this.$$postDigestQueue;\n  } else {\n    \n    if (!this.$$childScopeClass) {\n      this.$$childScopeClass = function() {\n        // blah blah...\n      };\n      this.$$childScopeClass.prototype = this;\n    }\n    child = new this.$$childScopeClass();\n  }\n  \n  // more stuff we don't care about right now...\n \n  return child;\n},\n\n\nWhen an ng-controller directive is used, angular will call $rootScope.$new and\ncreate a new scope.\n\nFollowing down the execution path, you'll see that a controller is not going to\nbe an isolate scope so it'll jump into the else block. It then caches a\nreference to a function called this.$$childScopeClass.\n\nIt then sets the prototype of this function to the prototype of Scope...\n\nthis.$$childScopeClass.prototype = this;\n\n\nThis is similar to calling Object.create(Scope);, but in this case this is\nreferring to an instance of Scope.\n\nng-controller\nHere's some sample code that helps illustrate this...\n\nangular.module(\"Demo\", [])\n  .controller(\"ChildCtrl\", function($rootScope, $scope) {\n    $rootScope.rootyThing = \"I am groot\";\n    console.log($scope.rootyThing);  \n    console.log(Object.getPrototypeOf($scope)); // Scope\n });\n\n\nAnd this HTML...\n\n<body ng-app=\"Demo\">\n  <div ng-controller=\"ChildCtrl\">\n  </div>\n</body>\n\n\nLet's break this thing down.\n\nng-app is set on the body and uses the Demo module.\n\nThen ChildCtrl is set up on a div.\n\nWhen the controller function fires it's asking for $rootScope and setting \nrootyThing up on it. Since $scope prototypically inherits from $rootScope you'll\nsee how we're immediately able to access rootyThing on the local controller\nscope!\n\n\n\nThe Object.getPrototypeOf($scope); call shows you the controller's $scope \nprototype is Scope.\n\nBack to the idea of primitives or objects on prototypes, take a look at this...\n\nangular.module(\"Demo\", [])\n  .controller(\"ChildCtrl\", function($scope) {\n    $scope.name = \"foo\";\n    $scope.user = {};\n    $scope.user.name = \"bar\";\n })\n .controller(\"AnotherChildCtrl, function($scope) {\n   $scope.name = \"overwrites foo\";\n   $scope.user.name = \"changes foo in ChildCtrl\";\n });\n\n\n<body ng-app=\"Demo\">\n  <div ng-controller=\"ChildCtrl\">\n    <div ng-controller=\"AnotherChildCtrl\">\n\t</div>\n  </div>\n</body>\n\n\nSo, first of all $scope.name is set on the ChildCtrl.\n\nThen it's also set on the AnotherChildCtrl. Thinking back on the first examples\nof this, the $scope.name on ChildCtrl has in fact been overwritten in the same\nway as before.\n\nIf you need access to a variable from ChildCtrl inside of AnotherChildCtrl, then\nyou have to use an object to do it! Ain't prototypical inheritance neato.\n\nIn general, try not to just assign stuff directly to $scope as primitives.\nYou're $scope is a place to PUT the \"model\", but is not actually the \"model\".\nYou'll want to do more with objects and always see a \".\" in your views when\nreferencing a $scope property.\n\nAka...\n\n{{user.name}}\n\n\nvs.\n\n{{name}}\n\n\nDirective isolated scope\nOne last thing.\n\nTake a look at the following video...\n\n\n\nThis video is based off of this code...\n\nangular.module(\"Demo\", [])\n  .controller(\"ChildCtrl\", function($rootScope, $scope) {\n    console.log(\"root\", $rootScope);\n    $rootScope.rootyThing = \"I am groot\";\n    console.log(\"ctrl\", $scope);\n    $scope.childCtrlProp = \"heyo\";\n })\n.directive(\"isoElement\", function() {\n  return {\n    restrict: \"E\",\n    scope: true,\n    link: function(scope) {\n      console.log(\"directive\", scope);\n      scope.foo = \"bar\";\n      console.log(scope.childCtrlProp);\n      console.log(scope.rootyThing);\n    }\n  };\n}); \n\n\nWhen scope: true is used when creating a directive, you'll get inheritance.\n\nIf you use scope: {} and have properties on there, you've created an \"isolated\"\nscope. If you refer back to the source for Scope.$new you'll see where that\nhappens.\n\nif (isolate) {\n    child = new Scope();\n    child.$root = this.$root;\n    child.$$asyncQueue = this.$$asyncQueue;\n    child.$$postDigestQueue = this.$$postDigestQueue;\n}\n\n\nConclusion\nThis stuff seems really complicated when you first get into it. The basic ideas\nthough are all based on prototypical inheritance. If you'll fully grok that,\nthen angular scope inheritance is nothing more than that.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-08-13 18:48:15","updated_at":"2014-08-13 20:56:13","published_at":"2014-08-13 20:39:30","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220551","uuid":"34d11afd-d1d3-484d-8595-787890fe983e","title":"Using jQuery's $.ajax in an Angular app","slug":"using-jquery-ajax-in-an-angular-app","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"We've all been using jQuery for a long time. It's for this reason that Angular.js works seemlessly with jQuery if it sees it on the page, but also has it's on jQLite available for those who decide to opt out of jQuery.\\n\\nOne of the APIs in jQuery that I find myself using the most is `$.ajax`.\\n\\nNow I know that Angular has it's own `$http` service that works great, but I was thinking the other day how I sometimes wish I could just use jQuery's `$.ajax` instead.\\n\\nThere's a couple of reasons for this, one is that I already know the API. I have to google `$http` every now and then to make sure I'm using it right.\\n\\nAnother reason is I really like to use [jQuery Mockjax](https://github.com/appendto/jquery-mockjax). It's a very simple way to mock HTTP requests without having to tap into the `$httpBackend` of Angular.\\n\\nI decided to throw together a small Angular service that utilizes jQuery's `$.ajax` for use in services and controllers...\\n\\n```prettyprint lang-js\\n(function($) {\\n  function Ajax($rootScope, $dfd) {\\n    var ajax = jQuery.ajax;\\n    \\n    return function(options) {\\n      var promise = ajax(options),\\n          dfd = $dfd();\\n          \\n      promise.done(function(data) {\\n        $rootScope.$apply(function() {\\n          dfd.resolve(data);\\n        });\\n      }).fail(function() {\\n        var failArgs = arguments;\\n        \\n        $rootScope.$apply(function() {\\n          dfd.reject.apply(dfd, failArgs);\\n        });\\n      });\\n      \\n      return dfd.promise();\\n    };\\n  }\\n  \\n  Ajax.$inject = ['$rootScope', '$dfd'];\\n  \\n  angular.module(\\\"Ajax\\\")\\n    .provider(\\\"$ajax\\\", function() {\\n      this.defaults = {};\\n      \\n      this.setOptions = function() {\\n        $.ajaxSetup(this.defaults = options);\\n      };\\n      \\n      this.getOptions = function() {\\n        return this.defaults;\\n      };\\n      \\n      this.$get = Ajax;\\n    });\\n}(jQuery));\\n\\n(function($) {\\n  function Dfd() {\\n    return function() {\\n      return jQuery.Deferred();\\n    };\\n  }\\n\\n  angular.module(\\\"Ajax\\\")\\n    .factory(\\\"$dfd\\\", Dfd);\\n}(jQuery));\\n```\\n\\nSo, there's a few pieces here. First of all is the `Ajax` function. This function's job is to return the API for the new `$ajax` services we're creating.\\n\\nThe first thing it does is grab a reference to `jQuery.ajax` and then returns a function.\\n\\nWe're then immediately invoking `ajax` in that function and getting it's promise back. Next we're using the `$dfd` service which is defined down farther in the code, but essentially just creates a new jQuery promise.\\n\\nWe're then callin the `.done` method on the Ajax promise and passing a function. `$rootScope` is injected into the service so when the Ajax promise is resolved we're able to call `$rootScope.$apply()` to ensure that the data returned is used within the angular exectution context.\\n\\nWe then resolve the promise we created with `$dfd()`.\\n\\nThere is also a `.fail` which also calls `$rootScope.$apply` in case something goes wrong when making the request.\\n\\nAt the end of the service we simply return the `dfd.promise()`.\\n\\nThis service is actually defined as a `provider` and the reason for this is whatever returns from `$get` in the `provider` becomes the API for the service, but this also gives us a place to configure the service.\\n\\nThere are `setOptions` and `getOptions` functions that allow you to conigure the `$.ajax` defaults with jQuery's  `$.ajaxSetup` method.\\n\\n```prettyprint lang-js\\nangular.module('Foo',).config(function($ajaxProvider) {\\n\\t$ajaxProvider.setConfig({ /* .. */ });\\n});\\n```\\n\\nThe way you actually utilize this new service in a controller would look like...\\n\\n```prettyprint lang-js\\nangular.module(\\\"Ajax\\\", [])\\n  .controller(\\\"WeatherCtrl\\\", function($ajax, $scope) {\\n    $ajax({\\n      url: \\\"http://api.openweathermap.org/data/2.5/weather?q=London,uk\\\",\\n      dataType: \\\"JSONP\\\"\\n    }).done(function(weather) {\\n      $scope.weather = weather;\\n    });\\n  });\\n```\\n\\nHere is the example running in a Plnkr...\\n\\n<iframe src=\\\"http://embed.plnkr.co/LrEzPj/preview\\\" frameborder=\\\"0\\\" style=\\\"width: 100%; height: 400px;\\\"></iframe>\\n\\nIt's very easy to utilize the well known `$.ajax` API from jQuery with this service.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>We've all been using jQuery for a long time. It's for this reason that Angular.js works seemlessly with jQuery if it sees it on the page, but also has it's on jQLite available for those who decide to opt out of jQuery.</p>\n<p>One of the APIs in jQuery that I find myself using the most is <code>$.ajax</code>.</p>\n<p>Now I know that Angular has it's own <code>$http</code> service that works great, but I was thinking the other day how I sometimes wish I could just use jQuery's <code>$.ajax</code> instead.</p>\n<p>There's a couple of reasons for this, one is that I already know the API. I have to google <code>$http</code> every now and then to make sure I'm using it right.</p>\n<p>Another reason is I really like to use <a href=\"https://github.com/appendto/jquery-mockjax\">jQuery Mockjax</a>. It's a very simple way to mock HTTP requests without having to tap into the <code>$httpBackend</code> of Angular.</p>\n<p>I decided to throw together a small Angular service that utilizes jQuery's <code>$.ajax</code> for use in services and controllers...</p>\n<pre><code class=\"language-prettyprint\">(function($) {\n  function Ajax($rootScope, $dfd) {\n    var ajax = jQuery.ajax;\n    \n    return function(options) {\n      var promise = ajax(options),\n          dfd = $dfd();\n          \n      promise.done(function(data) {\n        $rootScope.$apply(function() {\n          dfd.resolve(data);\n        });\n      }).fail(function() {\n        var failArgs = arguments;\n        \n        $rootScope.$apply(function() {\n          dfd.reject.apply(dfd, failArgs);\n        });\n      });\n      \n      return dfd.promise();\n    };\n  }\n  \n  Ajax.$inject = ['$rootScope', '$dfd'];\n  \n  angular.module(&quot;Ajax&quot;)\n    .provider(&quot;$ajax&quot;, function() {\n      this.defaults = {};\n      \n      this.setOptions = function() {\n        $.ajaxSetup(this.defaults = options);\n      };\n      \n      this.getOptions = function() {\n        return this.defaults;\n      };\n      \n      this.$get = Ajax;\n    });\n}(jQuery));\n\n(function($) {\n  function Dfd() {\n    return function() {\n      return jQuery.Deferred();\n    };\n  }\n\n  angular.module(&quot;Ajax&quot;)\n    .factory(&quot;$dfd&quot;, Dfd);\n}(jQuery));\n</code></pre>\n<p>So, there's a few pieces here. First of all is the <code>Ajax</code> function. This function's job is to return the API for the new <code>$ajax</code> services we're creating.</p>\n<p>The first thing it does is grab a reference to <code>jQuery.ajax</code> and then returns a function.</p>\n<p>We're then immediately invoking <code>ajax</code> in that function and getting it's promise back. Next we're using the <code>$dfd</code> service which is defined down farther in the code, but essentially just creates a new jQuery promise.</p>\n<p>We're then callin the <code>.done</code> method on the Ajax promise and passing a function. <code>$rootScope</code> is injected into the service so when the Ajax promise is resolved we're able to call <code>$rootScope.$apply()</code> to ensure that the data returned is used within the angular exectution context.</p>\n<p>We then resolve the promise we created with <code>$dfd()</code>.</p>\n<p>There is also a <code>.fail</code> which also calls <code>$rootScope.$apply</code> in case something goes wrong when making the request.</p>\n<p>At the end of the service we simply return the <code>dfd.promise()</code>.</p>\n<p>This service is actually defined as a <code>provider</code> and the reason for this is whatever returns from <code>$get</code> in the <code>provider</code> becomes the API for the service, but this also gives us a place to configure the service.</p>\n<p>There are <code>setOptions</code> and <code>getOptions</code> functions that allow you to conigure the <code>$.ajax</code> defaults with jQuery's  <code>$.ajaxSetup</code> method.</p>\n<pre><code class=\"language-prettyprint\">angular.module('Foo',).config(function($ajaxProvider) {\n\t$ajaxProvider.setConfig({ /* .. */ });\n});\n</code></pre>\n<p>The way you actually utilize this new service in a controller would look like...</p>\n<pre><code class=\"language-prettyprint\">angular.module(&quot;Ajax&quot;, [])\n  .controller(&quot;WeatherCtrl&quot;, function($ajax, $scope) {\n    $ajax({\n      url: &quot;http://api.openweathermap.org/data/2.5/weather?q=London,uk&quot;,\n      dataType: &quot;JSONP&quot;\n    }).done(function(weather) {\n      $scope.weather = weather;\n    });\n  });\n</code></pre>\n<p>Here is the example running in a Plnkr...</p>\n<iframe src=\"http://embed.plnkr.co/LrEzPj/preview\" frameborder=\"0\" style=\"width: 100%; height: 400px;\"></iframe>\n<p>It's very easy to utilize the well known <code>$.ajax</code> API from jQuery with this service.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"17","plaintext":"We've all been using jQuery for a long time. It's for this reason that\nAngular.js works seemlessly with jQuery if it sees it on the page, but also has\nit's on jQLite available for those who decide to opt out of jQuery.\n\nOne of the APIs in jQuery that I find myself using the most is $.ajax.\n\nNow I know that Angular has it's own $http service that works great, but I was\nthinking the other day how I sometimes wish I could just use jQuery's $.ajax \ninstead.\n\nThere's a couple of reasons for this, one is that I already know the API. I have\nto google $http every now and then to make sure I'm using it right.\n\nAnother reason is I really like to use jQuery Mockjax\n[https://github.com/appendto/jquery-mockjax]. It's a very simple way to mock\nHTTP requests without having to tap into the $httpBackend of Angular.\n\nI decided to throw together a small Angular service that utilizes jQuery's \n$.ajax for use in services and controllers...\n\n(function($) {\n  function Ajax($rootScope, $dfd) {\n    var ajax = jQuery.ajax;\n    \n    return function(options) {\n      var promise = ajax(options),\n          dfd = $dfd();\n          \n      promise.done(function(data) {\n        $rootScope.$apply(function() {\n          dfd.resolve(data);\n        });\n      }).fail(function() {\n        var failArgs = arguments;\n        \n        $rootScope.$apply(function() {\n          dfd.reject.apply(dfd, failArgs);\n        });\n      });\n      \n      return dfd.promise();\n    };\n  }\n  \n  Ajax.$inject = ['$rootScope', '$dfd'];\n  \n  angular.module(\"Ajax\")\n    .provider(\"$ajax\", function() {\n      this.defaults = {};\n      \n      this.setOptions = function() {\n        $.ajaxSetup(this.defaults = options);\n      };\n      \n      this.getOptions = function() {\n        return this.defaults;\n      };\n      \n      this.$get = Ajax;\n    });\n}(jQuery));\n\n(function($) {\n  function Dfd() {\n    return function() {\n      return jQuery.Deferred();\n    };\n  }\n\n  angular.module(\"Ajax\")\n    .factory(\"$dfd\", Dfd);\n}(jQuery));\n\n\nSo, there's a few pieces here. First of all is the Ajax function. This\nfunction's job is to return the API for the new $ajax services we're creating.\n\nThe first thing it does is grab a reference to jQuery.ajax and then returns a\nfunction.\n\nWe're then immediately invoking ajax in that function and getting it's promise\nback. Next we're using the $dfd service which is defined down farther in the\ncode, but essentially just creates a new jQuery promise.\n\nWe're then callin the .done method on the Ajax promise and passing a function. \n$rootScope is injected into the service so when the Ajax promise is resolved\nwe're able to call $rootScope.$apply() to ensure that the data returned is used\nwithin the angular exectution context.\n\nWe then resolve the promise we created with $dfd().\n\nThere is also a .fail which also calls $rootScope.$apply in case something goes\nwrong when making the request.\n\nAt the end of the service we simply return the dfd.promise().\n\nThis service is actually defined as a provider and the reason for this is\nwhatever returns from $get in the provider becomes the API for the service, but\nthis also gives us a place to configure the service.\n\nThere are setOptions and getOptions functions that allow you to conigure the \n$.ajax defaults with jQuery's $.ajaxSetup method.\n\nangular.module('Foo',).config(function($ajaxProvider) {\n\t$ajaxProvider.setConfig({ /* .. */ });\n});\n\n\nThe way you actually utilize this new service in a controller would look like...\n\nangular.module(\"Ajax\", [])\n  .controller(\"WeatherCtrl\", function($ajax, $scope) {\n    $ajax({\n      url: \"http://api.openweathermap.org/data/2.5/weather?q=London,uk\",\n      dataType: \"JSONP\"\n    }).done(function(weather) {\n      $scope.weather = weather;\n    });\n  });\n\n\nHere is the example running in a Plnkr...\n\nIt's very easy to utilize the well known $.ajax API from jQuery with this\nservice.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-09-03 21:33:31","updated_at":"2014-09-03 21:35:23","published_at":"2014-09-03 21:33:49","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220552","uuid":"7d52705b-82af-46ed-846e-d2b44e9a7119","title":"Require.js packages for building large scale angular applications","slug":"require-js-packages-for-building-large-scale-angular-applications","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Require.js is one of my favorite ways to work with large JavaScript applications. It allows you to build AMD (asynchronous module definition) style modules to break up your application into small reusable modules. This is a desirable feature in large code bases.\\n\\nIt's important to know when and why you may consider require.js. If you're working on a small application that doesn't have a need for many files and little logic, you may or may not need the overhead of require.js. However, you still can get value out of it's organization and structure it provides you.\\n\\nOn the other hand there is the use case of the large scale application with many files, lots of logic, tons of code, etc. This type of application is where require.js shines greatly. You'll spend a bit of time getting it set up initially, but the structure, organization, and added maintainability working with require gives you is great for large apps.\\n\\n### AMD\\n\\nA typical AMD module looks like...\\n\\n```prettyprint lang-js\\ndefine(['angular'], function() {\\n\\treturn {\\n    \\t/* API for this module */\\n    };\\n});\\n```\\n\\nOr you can use the commonjs style AMD module..\\n\\n\\n```prettyprint lang-js\\ndefine(function(require) {\\n\\tvar angular = require('angular');\\n    \\n\\treturn {\\n    \\t/* API for this module */\\n    };\\n});\\n```\\n\\nThis pattern ends up helping you create a dependency tree so you know what modules depend on what other modules.\\n\\n### Packages\\nOne of the things available in the require.js library is the ability to create **packages**. A `require.js` package looks almost like what a typical commonjs, node package would look like. This means you'll have an entry module, like `index.js` or in the case of require, you'll have `main.js` for your package.\\n\\nThe `main.js` is responsible for loading in the other modules for the package. Then in your requirejs config call you can simply ask for a package...\\n\\n\\n**NOTE: Don't forget that angular is NOT an AMD module, so you have to `shim` it and any other angular plugin you use**\\n\\n```prettyprint lang-js\\nrequire.config({\\n\\tpackages: [\\\"chat\\\"],\\n    paths: {\\n    \\tangular: \\\"/app/javascripts/vendor/angular/angular\\\",\\n        ngRoute: \\\"/app/javascripts/vendor/angular-route/angular-route\\\"\\n    },\\n    shim: {\\n    \\tangular: {\\n        \\texports: \\\"angular\\\"\\n        },\\n        ngRoute: {\\n        \\tdeps: [\\\"angular\\\"]\\n        }\\n    }\\n});\\n```\\n\\nThen you'll have a folder structure like this...\\n\\n```\\n/app\\n/app/javascripts\\n/app/javascripts/main.js\\n/app/javascripts/app.js\\n/app/javascripts/chat\\n/app/javascripts/chat/main.js\\n/app/javascripts/chat/chatModule.js\\n/app/javascripts/chat/chatCtrl.js\\n```\\n\\nAnd the `chat/main.js` just loads in the modules it needs...\\n\\n```prettyprint lang-js\\ndefine(function (require) {\\n    var chatCtrl = require(\\\"./chatCtrl\\\");\\n});\\n```\\n\\nNotice the `./` here, that tells require.js to load the module relative to the current package.\\n\\n### Angular.js modules\\nAngular.js also has a concept of modules that allow you to break up your application.\\n\\nIf you combine angular modules with require.js packages, you have a nice system for creating reusable modules.\\n\\nEach package needs to have a `main.js` to load the packages modules, and also it needs to have some *module.js* file for angular.\\n\\nIn the chat example, there would be a `chatModule.js`...\\n\\n```prettyprint lang-js\\ndefine(function (require) {\\n    var angular = require(\\\"angular\\\"); \\n    return angular.module(\\\"my.chat\\\", []);\\n});\\n```\\n\\nNow in your `chatCtrl` module above, you use that module to define your controller...\\n\\n```prettyprint lang-js\\ndefine(function(require) {\\n    var chat = require(\\\"./chatModule\\\");\\n\\n    function ChatCtrl() {\\n        /* Chat controller */\\n    }\\n\\n    return chat.controller(\\\"ChatCtrl\\\", ChatCtrl);\\n});\\n```\\n\\nNow if I wanted to add a `Chat` service to the package, you simply add `ChatService.js` to the `chat` folder...\\n\\n```prettyprint lang-js\\ndefine(function(require) {\\n    var chat = require(\\\"./chatModule\\\"),\\n        io = require(\\\"socketio\\\");\\n\\n    function Chat() {\\n        var socket = io(\\\"/\\\"),\\n            messages = [];\\n\\n        return {\\n            messages: messages,\\n            send: function(msg) {\\n               \\t/* Send messages with socketio */\\n            }\\n        };\\n    }\\n\\n    return chat.factory(\\\"Chat\\\", Chat);\\n});\\n```\\n\\nThen don't forget to go back and add your new service to the `chat/main.js`...\\n\\n```prettyprint lang-is\\ndefine(function (require) {\\n    var chatCtrl = require(\\\"./chatCtrl\\\");\\n    var chatService = require(\\\"./chatService\\\");\\n});\\n```\\n\\n### Use the package\\nOnce you define the package as done above in the application's `main.js`, wherever you create your application's module in say, `app.js`, you simply require in the package...\\n\\n```prettyprint lang-js\\ndefine(function(require) {\\n\\tvar angular = require(\\\"angular\\\");\\n\\n\\trequire(\\\"ngRoute\\\");\\n\\trequire(\\\"chat\\\");\\n    \\n    var app = angular.module(\\\"app\\\", [\\n      \\\"ngRoute\\\",\\n      \\\"my.chat\\\" ]);\\n});\\n```\\n\\nThe last thing you have to remember to do, and this is with any angular app using a module loader, is remember to manually bootstrap your application. You have to do this because all the JS files load in asynchronously, so Angular won't know when to start the application.\\n\\nYou can do this in your `main.js`\\n\\n```prettyprint lang-js\\nrequire(['angular', 'app/app', function(angular) {\\n\\tangular.bootstrap(document.documentElement, [\\\"app\\\"]);\\n});\\n```\\n\\n# Conclusion\\nIt's important to have a solid architecture when working with large scale JavaScript applications. AMD with require.js is one of many ways of accomplishing this. I have really liked working with this style of app, and created a starter application for anyone to get started working with it...\\n\\nhttps://github.com/jcreamer898/requirejs-angular-starter\\n\\nFeel free to fork, clone, and have fun! \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Require.js is one of my favorite ways to work with large JavaScript applications. It allows you to build AMD (asynchronous module definition) style modules to break up your application into small reusable modules. This is a desirable feature in large code bases.</p>\n<p>It's important to know when and why you may consider require.js. If you're working on a small application that doesn't have a need for many files and little logic, you may or may not need the overhead of require.js. However, you still can get value out of it's organization and structure it provides you.</p>\n<p>On the other hand there is the use case of the large scale application with many files, lots of logic, tons of code, etc. This type of application is where require.js shines greatly. You'll spend a bit of time getting it set up initially, but the structure, organization, and added maintainability working with require gives you is great for large apps.</p>\n<h3 id=\"amd\">AMD</h3>\n<p>A typical AMD module looks like...</p>\n<pre><code class=\"language-prettyprint\">define(['angular'], function() {\n\treturn {\n    \t/* API for this module */\n    };\n});\n</code></pre>\n<p>Or you can use the commonjs style AMD module..</p>\n<pre><code class=\"language-prettyprint\">define(function(require) {\n\tvar angular = require('angular');\n    \n\treturn {\n    \t/* API for this module */\n    };\n});\n</code></pre>\n<p>This pattern ends up helping you create a dependency tree so you know what modules depend on what other modules.</p>\n<h3 id=\"packages\">Packages</h3>\n<p>One of the things available in the require.js library is the ability to create <strong>packages</strong>. A <code>require.js</code> package looks almost like what a typical commonjs, node package would look like. This means you'll have an entry module, like <code>index.js</code> or in the case of require, you'll have <code>main.js</code> for your package.</p>\n<p>The <code>main.js</code> is responsible for loading in the other modules for the package. Then in your requirejs config call you can simply ask for a package...</p>\n<p><strong>NOTE: Don't forget that angular is NOT an AMD module, so you have to <code>shim</code> it and any other angular plugin you use</strong></p>\n<pre><code class=\"language-prettyprint\">require.config({\n\tpackages: [&quot;chat&quot;],\n    paths: {\n    \tangular: &quot;/app/javascripts/vendor/angular/angular&quot;,\n        ngRoute: &quot;/app/javascripts/vendor/angular-route/angular-route&quot;\n    },\n    shim: {\n    \tangular: {\n        \texports: &quot;angular&quot;\n        },\n        ngRoute: {\n        \tdeps: [&quot;angular&quot;]\n        }\n    }\n});\n</code></pre>\n<p>Then you'll have a folder structure like this...</p>\n<pre><code>/app\n/app/javascripts\n/app/javascripts/main.js\n/app/javascripts/app.js\n/app/javascripts/chat\n/app/javascripts/chat/main.js\n/app/javascripts/chat/chatModule.js\n/app/javascripts/chat/chatCtrl.js\n</code></pre>\n<p>And the <code>chat/main.js</code> just loads in the modules it needs...</p>\n<pre><code class=\"language-prettyprint\">define(function (require) {\n    var chatCtrl = require(&quot;./chatCtrl&quot;);\n});\n</code></pre>\n<p>Notice the <code>./</code> here, that tells require.js to load the module relative to the current package.</p>\n<h3 id=\"angularjsmodules\">Angular.js modules</h3>\n<p>Angular.js also has a concept of modules that allow you to break up your application.</p>\n<p>If you combine angular modules with require.js packages, you have a nice system for creating reusable modules.</p>\n<p>Each package needs to have a <code>main.js</code> to load the packages modules, and also it needs to have some <em>module.js</em> file for angular.</p>\n<p>In the chat example, there would be a <code>chatModule.js</code>...</p>\n<pre><code class=\"language-prettyprint\">define(function (require) {\n    var angular = require(&quot;angular&quot;); \n    return angular.module(&quot;my.chat&quot;, []);\n});\n</code></pre>\n<p>Now in your <code>chatCtrl</code> module above, you use that module to define your controller...</p>\n<pre><code class=\"language-prettyprint\">define(function(require) {\n    var chat = require(&quot;./chatModule&quot;);\n\n    function ChatCtrl() {\n        /* Chat controller */\n    }\n\n    return chat.controller(&quot;ChatCtrl&quot;, ChatCtrl);\n});\n</code></pre>\n<p>Now if I wanted to add a <code>Chat</code> service to the package, you simply add <code>ChatService.js</code> to the <code>chat</code> folder...</p>\n<pre><code class=\"language-prettyprint\">define(function(require) {\n    var chat = require(&quot;./chatModule&quot;),\n        io = require(&quot;socketio&quot;);\n\n    function Chat() {\n        var socket = io(&quot;/&quot;),\n            messages = [];\n\n        return {\n            messages: messages,\n            send: function(msg) {\n               \t/* Send messages with socketio */\n            }\n        };\n    }\n\n    return chat.factory(&quot;Chat&quot;, Chat);\n});\n</code></pre>\n<p>Then don't forget to go back and add your new service to the <code>chat/main.js</code>...</p>\n<pre><code class=\"language-prettyprint\">define(function (require) {\n    var chatCtrl = require(&quot;./chatCtrl&quot;);\n    var chatService = require(&quot;./chatService&quot;);\n});\n</code></pre>\n<h3 id=\"usethepackage\">Use the package</h3>\n<p>Once you define the package as done above in the application's <code>main.js</code>, wherever you create your application's module in say, <code>app.js</code>, you simply require in the package...</p>\n<pre><code class=\"language-prettyprint\">define(function(require) {\n\tvar angular = require(&quot;angular&quot;);\n\n\trequire(&quot;ngRoute&quot;);\n\trequire(&quot;chat&quot;);\n    \n    var app = angular.module(&quot;app&quot;, [\n      &quot;ngRoute&quot;,\n      &quot;my.chat&quot; ]);\n});\n</code></pre>\n<p>The last thing you have to remember to do, and this is with any angular app using a module loader, is remember to manually bootstrap your application. You have to do this because all the JS files load in asynchronously, so Angular won't know when to start the application.</p>\n<p>You can do this in your <code>main.js</code></p>\n<pre><code class=\"language-prettyprint\">require(['angular', 'app/app', function(angular) {\n\tangular.bootstrap(document.documentElement, [&quot;app&quot;]);\n});\n</code></pre>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>It's important to have a solid architecture when working with large scale JavaScript applications. AMD with require.js is one of many ways of accomplishing this. I have really liked working with this style of app, and created a starter application for anyone to get started working with it...</p>\n<p><a href=\"https://github.com/jcreamer898/requirejs-angular-starter\">https://github.com/jcreamer898/requirejs-angular-starter</a></p>\n<p>Feel free to fork, clone, and have fun!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"18","plaintext":"Require.js is one of my favorite ways to work with large JavaScript\napplications. It allows you to build AMD (asynchronous module definition) style\nmodules to break up your application into small reusable modules. This is a\ndesirable feature in large code bases.\n\nIt's important to know when and why you may consider require.js. If you're\nworking on a small application that doesn't have a need for many files and\nlittle logic, you may or may not need the overhead of require.js. However, you\nstill can get value out of it's organization and structure it provides you.\n\nOn the other hand there is the use case of the large scale application with many\nfiles, lots of logic, tons of code, etc. This type of application is where\nrequire.js shines greatly. You'll spend a bit of time getting it set up\ninitially, but the structure, organization, and added maintainability working\nwith require gives you is great for large apps.\n\nAMD\nA typical AMD module looks like...\n\ndefine(['angular'], function() {\n\treturn {\n    \t/* API for this module */\n    };\n});\n\n\nOr you can use the commonjs style AMD module..\n\ndefine(function(require) {\n\tvar angular = require('angular');\n    \n\treturn {\n    \t/* API for this module */\n    };\n});\n\n\nThis pattern ends up helping you create a dependency tree so you know what\nmodules depend on what other modules.\n\nPackages\nOne of the things available in the require.js library is the ability to create \npackages. A require.js package looks almost like what a typical commonjs, node\npackage would look like. This means you'll have an entry module, like index.js \nor in the case of require, you'll have main.js for your package.\n\nThe main.js is responsible for loading in the other modules for the package.\nThen in your requirejs config call you can simply ask for a package...\n\nNOTE: Don't forget that angular is NOT an AMD module, so you have to shim it and\nany other angular plugin you use\n\nrequire.config({\n\tpackages: [\"chat\"],\n    paths: {\n    \tangular: \"/app/javascripts/vendor/angular/angular\",\n        ngRoute: \"/app/javascripts/vendor/angular-route/angular-route\"\n    },\n    shim: {\n    \tangular: {\n        \texports: \"angular\"\n        },\n        ngRoute: {\n        \tdeps: [\"angular\"]\n        }\n    }\n});\n\n\nThen you'll have a folder structure like this...\n\n/app\n/app/javascripts\n/app/javascripts/main.js\n/app/javascripts/app.js\n/app/javascripts/chat\n/app/javascripts/chat/main.js\n/app/javascripts/chat/chatModule.js\n/app/javascripts/chat/chatCtrl.js\n\n\nAnd the chat/main.js just loads in the modules it needs...\n\ndefine(function (require) {\n    var chatCtrl = require(\"./chatCtrl\");\n});\n\n\nNotice the ./ here, that tells require.js to load the module relative to the\ncurrent package.\n\nAngular.js modules\nAngular.js also has a concept of modules that allow you to break up your\napplication.\n\nIf you combine angular modules with require.js packages, you have a nice system\nfor creating reusable modules.\n\nEach package needs to have a main.js to load the packages modules, and also it\nneeds to have some module.js file for angular.\n\nIn the chat example, there would be a chatModule.js...\n\ndefine(function (require) {\n    var angular = require(\"angular\"); \n    return angular.module(\"my.chat\", []);\n});\n\n\nNow in your chatCtrl module above, you use that module to define your\ncontroller...\n\ndefine(function(require) {\n    var chat = require(\"./chatModule\");\n\n    function ChatCtrl() {\n        /* Chat controller */\n    }\n\n    return chat.controller(\"ChatCtrl\", ChatCtrl);\n});\n\n\nNow if I wanted to add a Chat service to the package, you simply add \nChatService.js to the chat folder...\n\ndefine(function(require) {\n    var chat = require(\"./chatModule\"),\n        io = require(\"socketio\");\n\n    function Chat() {\n        var socket = io(\"/\"),\n            messages = [];\n\n        return {\n            messages: messages,\n            send: function(msg) {\n               \t/* Send messages with socketio */\n            }\n        };\n    }\n\n    return chat.factory(\"Chat\", Chat);\n});\n\n\nThen don't forget to go back and add your new service to the chat/main.js...\n\ndefine(function (require) {\n    var chatCtrl = require(\"./chatCtrl\");\n    var chatService = require(\"./chatService\");\n});\n\n\nUse the package\nOnce you define the package as done above in the application's main.js, wherever\nyou create your application's module in say, app.js, you simply require in the\npackage...\n\ndefine(function(require) {\n\tvar angular = require(\"angular\");\n\n\trequire(\"ngRoute\");\n\trequire(\"chat\");\n    \n    var app = angular.module(\"app\", [\n      \"ngRoute\",\n      \"my.chat\" ]);\n});\n\n\nThe last thing you have to remember to do, and this is with any angular app\nusing a module loader, is remember to manually bootstrap your application. You\nhave to do this because all the JS files load in asynchronously, so Angular\nwon't know when to start the application.\n\nYou can do this in your main.js\n\nrequire(['angular', 'app/app', function(angular) {\n\tangular.bootstrap(document.documentElement, [\"app\"]);\n});\n\n\nConclusion\nIt's important to have a solid architecture when working with large scale\nJavaScript applications. AMD with require.js is one of many ways of\naccomplishing this. I have really liked working with this style of app, and\ncreated a starter application for anyone to get started working with it...\n\nhttps://github.com/jcreamer898/requirejs-angular-starter\n\nFeel free to fork, clone, and have fun!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-09-10 16:58:51","updated_at":"2014-09-10 20:14:19","published_at":"2014-09-10 16:59:31","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220553","uuid":"9dc46efa-fe80-45d7-82e8-0b597eeb18be","title":"Tools every modern web developer needs on OSX","slug":"tools-every-modern-web-developer-needs-on-osx","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## Developer Things\\n* Git\\n* Tower\\n* GitHub For Mac\\n* iTerm\\n* ZShell\\n* ZScript\\n\\n## Apps\\n* Dash\\n* Dropbox\\n\\n## IDE\\n* Sublime Text 3\\n* WebStorm\\n* Atom\\n* Brackets\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><h2 id=\"developerthings\">Developer Things</h2>\n<ul>\n<li>Git</li>\n<li>Tower</li>\n<li>GitHub For Mac</li>\n<li>iTerm</li>\n<li>ZShell</li>\n<li>ZScript</li>\n</ul>\n<h2 id=\"apps\">Apps</h2>\n<ul>\n<li>Dash</li>\n<li>Dropbox</li>\n</ul>\n<h2 id=\"ide\">IDE</h2>\n<ul>\n<li>Sublime Text 3</li>\n<li>WebStorm</li>\n<li>Atom</li>\n<li>Brackets</li>\n</ul>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"19","plaintext":"Developer Things\n * Git\n * Tower\n * GitHub For Mac\n * iTerm\n * ZShell\n * ZScript\n\nApps\n * Dash\n * Dropbox\n\nIDE\n * Sublime Text 3\n * WebStorm\n * Atom\n * Brackets","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-11-04 14:46:53","updated_at":"2014-11-04 15:20:52","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220554","uuid":"72c3b988-b57d-4811-8a85-8f904b25a9f1","title":"Make your GitHub account hack proof with 2 factor auth","slug":"setting-up-2-factor-authentication-on-github","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Security. So important these days. Feels like every day there's some new big site being hacked. One of the best ways to be hack proof on any site is to utilize 2 factor authentication.\\n\\nLog in to your account and go to the settings page by clicking the gear at the top right hand part of the screen.\\n\\n![](http://d.pr/i/1iFbR+)\\n\\nThen go to Security from the left hand nav.\\n\\n![](http://d.pr/i/1l0EX+)\\n\\nNow click setup 2 factor auth.\\n\\n![](http://d.pr/i/14BYX+)\\n\\nYou'll have the option to use an app or SMS.\\n\\n![](http://d.pr/i/1cHAl+)\\n\\nThe easiest thing to do is to use Google Authenticator for this.\\n\\n[Android](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en)  \\n[iOS](https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8)\\n\\nDownload the app, and then scan the QR code on the page to activate it...\\n\\n![](http://d.pr/i/1lLR0+)\\n\\nEnter the 6 digit code from Authenticator into the box, and that's it!\\n\\nTake these easy steps and use them to your advantage. After all, especially if you work for a large company that utilizes GitHub private repositories, you want to keep your account nice and safe.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Security. So important these days. Feels like every day there's some new big site being hacked. One of the best ways to be hack proof on any site is to utilize 2 factor authentication.</p>\n<p>Log in to your account and go to the settings page by clicking the gear at the top right hand part of the screen.</p>\n<p><img src=\"http://d.pr/i/1iFbR+\" alt=\"\"></p>\n<p>Then go to Security from the left hand nav.</p>\n<p><img src=\"http://d.pr/i/1l0EX+\" alt=\"\"></p>\n<p>Now click setup 2 factor auth.</p>\n<p><img src=\"http://d.pr/i/14BYX+\" alt=\"\"></p>\n<p>You'll have the option to use an app or SMS.</p>\n<p><img src=\"http://d.pr/i/1cHAl+\" alt=\"\"></p>\n<p>The easiest thing to do is to use Google Authenticator for this.</p>\n<p><a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en\">Android</a><br>\n<a href=\"https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8\">iOS</a></p>\n<p>Download the app, and then scan the QR code on the page to activate it...</p>\n<p><img src=\"http://d.pr/i/1lLR0+\" alt=\"\"></p>\n<p>Enter the 6 digit code from Authenticator into the box, and that's it!</p>\n<p>Take these easy steps and use them to your advantage. After all, especially if you work for a large company that utilizes GitHub private repositories, you want to keep your account nice and safe.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"20","plaintext":"Security. So important these days. Feels like every day there's some new big\nsite being hacked. One of the best ways to be hack proof on any site is to\nutilize 2 factor authentication.\n\nLog in to your account and go to the settings page by clicking the gear at the\ntop right hand part of the screen.\n\n\n\nThen go to Security from the left hand nav.\n\n\n\nNow click setup 2 factor auth.\n\n\n\nYou'll have the option to use an app or SMS.\n\n\n\nThe easiest thing to do is to use Google Authenticator for this.\n\nAndroid\n[https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en]\niOS [https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8]\n\nDownload the app, and then scan the QR code on the page to activate it...\n\n\n\nEnter the 6 digit code from Authenticator into the box, and that's it!\n\nTake these easy steps and use them to your advantage. After all, especially if\nyou work for a large company that utilizes GitHub private repositories, you want\nto keep your account nice and safe.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-11-17 16:24:35","updated_at":"2014-11-17 16:36:32","published_at":"2014-11-17 16:36:32","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220555","uuid":"7029f4f6-c9ed-43fb-9692-c4acfdaea8aa","title":"Adding live-reload to a Rails project","slug":"adding-live-reload-to-a-rails-project","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One of the things I love about working with Grunt in JavaScript is that it's extremely easy to get live reload working. As I've been working at Lonely Planet for over a month now, I've found myself working more in Rails projects too.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>One of the things I love about working with Grunt in JavaScript is that it's extremely easy to get live reload working. As I've been working at Lonely Planet for over a month now, I've found myself working more in Rails projects too.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"21","plaintext":"One of the things I love about working with Grunt in JavaScript is that it's\nextremely easy to get live reload working. As I've been working at Lonely Planet\nfor over a month now, I've found myself working more in Rails projects too.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-12-05 21:31:50","updated_at":"2014-12-05 21:32:40","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220556","uuid":"3926a13d-2d1d-422e-bca2-4088e7d5b74a","title":"What the Flux?","slug":"what-the-flux","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've been really diving into wrapping my brain around [React.js](http://facebook.github.io/react/) and [Flux](http://facebook.github.io/flux/) architecture the last couple of weeks.\\n\\nNot going to lie, I've been avoiding it. When I look at the docs and blog posts about Flux, and React, my brain goes... \\n\\n![](http://c2.thejournal.ie/media/2014/10/mark-13.gif)\\n\\nThings like `componentDidMount`, and `Dispatchers`, and `ActionCreators`, etc etc initially scared me off when I tried to get into it. Just seemed so computer sciency™. After a few days of messing with it, I really like it. A lot.\\n\\nFlux in particular took me a few days to really wrap my head around. This image in particular.\\n\\n![](http://d.pr/i/1gDAc+)\\n\\nWhen I finally started to wrap my head around it though, I decided to come up with a version of my own to help others get around to figuring it out a bit faster.\\n\\n![](http://d.pr/i/1inWl+)\\n\\nLet's break this all down...\\n\\n### Views\\n> Show some stuff.\\n\\nThis is where your components render. Your component has only a few jobs, and here's what one might look like...\\n\\n```prettyprint lang-js\\nvar NewEmailComponent = React.createClass({\\n\\tgetInitialState() {\\n    \\treturn {\\n        \\tto: \\\"\\\"\\n        };\\n    },\\n\\trender() {\\n      return (\\n              <input name=\\\"to\\\" type=\\\"email\\\" onChange={this.updateToText} />\\n              <button onClick={this.createNewEmail}>New Email</button>\\n          );\\n\\t},\\n    updateToText(event) {\\n\\t\\tthis.setState({\\n        \\tto: event.target.value \\n        });\\n\\t},\\n\\tcreateNewEmail(event) {\\n\\t\\tvar to = this.state.to;\\n    \\tEmailActionCreator.createNewEmail(to);\\n\\t}\\n});\\n```\\n\\nSo, every component in React has state. Our `NewEmailComponent` will initially have just a `to: \\\"\\\"` in its state. \\n\\nNext, `render` returns JSX to display. Here we have an input, and a button.\\n\\nYou'll notice the `onChange={this.updateToText}`, and the `onClick={this.createNewEmail}`. Both of these are adding event handlers to the component, and calling the respective functions.\\n\\nWhen the text of the `to` input changes, the state gets changed to reflect that `to` has changed.\\n\\n### Action Creators\\n> Go get some more stuff\\n\\nThe action creator creates an \\\"action\\\". Yup. It is also here that you'll typically go get some data from the server if you need it. \\nSo, let's go back to the view for a sec...\\n\\nWhen you click on the button, the `EmailActionCreator.createNewEmail(to)` function fires with whatever kind of data you want to pass as `to`. Could be an ID, name, whatever, in this case it's an email to send to.\\n\\nThe `EmailActionCreator.createNewEmail` function will do a couple of things.\\n\\n1. Create an action for creating a new email\\n2. Call an API to create a draft\\n\\n### Actions\\n> Do something with stuff\\n\\nActions are JavaScript POJOs (plain old javascript objects). Often they will by convention have a `type`, and some `data`. Let's step back to how and why they are created in the first place.\\n\\nSo, our ActionCreator will create an \\\"action\\\". Typically there is a file that stores an object of all the different possible action types.\\n\\n```prettyprint lang-js\\n// actions/fooActions.js\\nvar keyMirror = require('keymirror');\\n\\nmodule.exports = keyMirror({\\n\\tCREATE_EMAIL: null,\\n    EMAIL_CREATED: null,\\n    SEND_EMAIL: null\\n});\\n```\\n\\nYou use these `actions` to define things you can trigger, whether from the UI or from the server.\\n\\n[`keyMirror`](https://github.com/STRML/keyMirror) here is used to make the values of `null`, mirror the upper case key names. Just a quick short cut library.\\n\\nSo, back in our `EmailActionCreator`, we'll use these different action types.\\n\\n```prettyprint lang-js\\n// actions/emailActionCreator.js\\n\\nmodule.exports = {\\n\\tcreateNewEmail(to) {\\n        EmailAppDispatcher.handleViewAction({\\n        \\ttype: ActionTypes.CREATE_EMAIL,\\n            to: to\\n        });\\n        \\n        EmailWebService.createEmail({\\n          to: to\\n        });\\n    },\\n    emailCreated(mail) {\\n    \\tEmailAppDispatcher.handleServerAction({\\n        \\ttype: ActionTypes.EMAIL_CREATED,\\n            mail: mail\\n        });\\n    }\\n}\\n```\\n\\nThe `EmailWebService` can hit your API however you want...\\n\\n```prettyprint lang-js\\n// data/emailWebService.js\\nmodule.exports = {\\n\\tcreateEmail: function(options) {\\n\\t\\t$.ajax({\\n        \\turl: \\\"/api/email\\\",\\n            type: \\\"POST\\\"\\n        }).done(function(id) {\\n            var mail = { \\n            \\tto: options.to, \\n                id: id \\n            };\\n            \\n        \\tEmailActionCreator.emailCreated(mail);\\n        });\\n\\t};\\n};\\n```\\n\\nHere, it's using `jQuery.ajax` to create a new email. Once the email is done being created, another action is created with `EmailActionCreator.emailCreated(mail);` to tell everyone that the email has been created. The type of this action is `ActionTypes.EMAIL_CREATED`.\\n\\nNow let's talk about the dispatcher and that `handleViewAction` and `handleServerAction` stuff.\\n\\n### Dispatcher\\n> Hey Everyone! There's new stuff!\\n\\nThe dispatcher's single job is to publish out some sort of message, or event, or whatever you want to call it, to let anybody who cares know that something just happened. \\n\\nFor example, when someone first clicked our `Create Email` button, an action was created with the `EmailActionCreator`, and then sent over to the dispatcher via the `handleViewAction` method on the dispatcher.\\n\\nThe dispatcher is boilerplate code that never really needs to change once it's done...\\n\\n```prettyprint lang-js\\nvar EmailAppDispatcher = assign(new Dispatcher(), {\\n  handleServerAction(action) {\\n    var payload = {\\n      source: PayloadSources.SERVER_ACTION,\\n      action: action\\n    };\\n    this.dispatch(payload);\\n  },\\n  handleViewAction(action) {\\n    var payload = {\\n      source: PayloadSources.VIEW_ACTION,\\n      action: action\\n    };\\n    this.dispatch(payload);\\n  }\\n});\\n\\nmodule.exports = EmailAppDispatcher;\\n```\\n\\nFlux.js comes with a default dispatcher that has `register` and `dispatch` functions among a few others.\\n\\nOur `EmailAppDispatcher` has 2 helper functions, the `handleViewAction`, and `handleServerAction`. Two different functions really aren't entirely neccessary, but they allow you to know exactly where an action came from if you need it. Beyond that though, they just call the built in `dispatch` function from the [default Dispatcher](http://facebook.github.io/flux/docs/dispatcher.html) in Flux.\\n\\nElsewhere in the app, any store, which we'll talk about in a second, that uses the Dispatcher's `register` function will be notified that an action is being dispatched.\\n\\n### Store\\n> Keep track of stuff\\n\\nStores hold application state and business logic. They are also themselves usually event emitters. That means you can listen to events they publish. So, a view will bind to a store's change event, call different store methods to get data, and in turn update their state with the new data.\\n\\nIdeally, stores will not make any ajax requests because the actions should send in data, and the store just manages it.\\n\\nA store will generally have local variables that hold some kind of data/state. So, in our case below, simply the active email.  \\n\\n```prettyprint lang-js\\nvar EventEmitter = require(\\\"events\\\"),\\n\\tassign = require(\\\"react/lib/assign\\\"),\\n    Email = require(\\\"./core/email\\\"),\\n    _ = require(\\\"underscore\\\");\\n\\nvar CHANGE_EVENT = \\\"change\\\";\\n\\nvar activeEmail = null;\\n\\nfunction createNewEmail(mail) {\\n\\tvar email = new Email(mail);\\n    \\n    activeEmail = email;\\n}\\n\\nvar EmailStore = assign({}, EventEmitter.prototype, {\\n  emitChange() {\\n  \\tthis.emit(CHANGE_EVENT);\\n  },\\n  addChangeListener(callback) {\\n  \\tthis.on(CHANGE_EVENT, callback);\\n  },\\n  removeChangeListener(callback) {\\n  \\tthis.removeListener(CHANGE_EVENT, callback);\\n  },\\n  getActiveEmail() {\\n  \\treturn activeEmail;\\n  }\\n});\\n```\\n\\nThe `emitChange`, `addChangeListener`, and `removeChangeListener` are functions you'll see on every store, and are just abstractions to the underlying `EventEmitter` methods `emit`, `on`, and `removeListener`. The `CHANGE_EVENT` just saves a string for the name of the change event.\\n\\nThe `getActiveEmail` method just returns the active email.\\n\\nBacking up again to the dispatcher, remember it exposes a `register` function. After we define the methods for our store as above, we `register` with our dispatcher...\\n\\n```prettyprint lang-js\\nEmailStore.dispatchToken = EmailAppDispatcher.register((payload) => {\\n\\tvar action = payload.action;\\n    \\n\\tswitch (action.type) {\\n    \\tcase ActionTypes.EMAIL_CREATED:\\n        \\tcreateNewEmail(action.mail);\\n            EmailStore.emitChange();\\n            break;\\n        \\t\\n    }\\n});\\n```\\n\\nEvery time that the dispatcher sends out ANY action, the `register` function gets called. However, we only care about the action if the type is in our switch statement, and in this case all we have is `ActionTypes.EMAIL_CREATED`.\\n\\nWhen the action sent out by the dispatcher is `ActionTypes.EMAIL_CREATED`, we'll respond by calling our `createNewEmail` function which merely sets an active email. Then we'll tell the store to emit a change event.\\n\\nGoing full circle, let's step back and add something to our view...\\n\\n```prettyprint lang-js\\nvar EmailStore = require(\\\"../stores/emailStore\\\");\\n\\n/** ... *./\\n{\\n\\tcomponentWillMount() {\\n\\t\\tEmailStore.addChangeListener(this._onChange);\\n\\t},\\n    _onChange() {\\n    \\tthis.setState({\\n        \\tactiveEmail: EmailStore.getActiveEmail()\\n        });\\n    }\\n}\\n```\\n\\nOur `componentWillMount` function will fire when the component is ready. It's in `componentWillMount` that we can add a change listener on our store's change event. Any time that the store changes, `this._onChange` gets called. \\n\\nIn the `_onChange` function we can set the state of the component with the new email that was created!\\n\\nBoom. \\n\\n# TL;DR\\nView Renders -> \\nClick triggers action creator -> \\nGo get data -> \\nCreate action for recieved data ->\\nSend action to dispatcher ->\\nDispacther publishes action ->\\nStore listens for action ->\\nStore updates state ->\\nView updates\\n\\nSo, now you're either thinking...\\n\\n![](http://i.imgur.com/16tx1Ft.gif+)\\n\\nOr...\\n\\n![](http://i.imgur.com/tfyHIaB.gif+)\\n\\nIf you're wanting to flip a table, re-read this article, go look at [these exampes](https://github.com/facebook/flux/blob/master/examples), and try again. You'll get it, and you'll love it.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>I've been really diving into wrapping my brain around <a href=\"http://facebook.github.io/react/\">React.js</a> and <a href=\"http://facebook.github.io/flux/\">Flux</a> architecture the last couple of weeks.</p>\n<p>Not going to lie, I've been avoiding it. When I look at the docs and blog posts about Flux, and React, my brain goes...</p>\n<p><img src=\"http://c2.thejournal.ie/media/2014/10/mark-13.gif\" alt=\"\"></p>\n<p>Things like <code>componentDidMount</code>, and <code>Dispatchers</code>, and <code>ActionCreators</code>, etc etc initially scared me off when I tried to get into it. Just seemed so computer sciency™. After a few days of messing with it, I really like it. A lot.</p>\n<p>Flux in particular took me a few days to really wrap my head around. This image in particular.</p>\n<p><img src=\"http://d.pr/i/1gDAc+\" alt=\"\"></p>\n<p>When I finally started to wrap my head around it though, I decided to come up with a version of my own to help others get around to figuring it out a bit faster.</p>\n<p><img src=\"http://d.pr/i/1inWl+\" alt=\"\"></p>\n<p>Let's break this all down...</p>\n<h3 id=\"views\">Views</h3>\n<blockquote>\n<p>Show some stuff.</p>\n</blockquote>\n<p>This is where your components render. Your component has only a few jobs, and here's what one might look like...</p>\n<pre><code class=\"language-prettyprint\">var NewEmailComponent = React.createClass({\n\tgetInitialState() {\n    \treturn {\n        \tto: &quot;&quot;\n        };\n    },\n\trender() {\n      return (\n              &lt;input name=&quot;to&quot; type=&quot;email&quot; onChange={this.updateToText} /&gt;\n              &lt;button onClick={this.createNewEmail}&gt;New Email&lt;/button&gt;\n          );\n\t},\n    updateToText(event) {\n\t\tthis.setState({\n        \tto: event.target.value \n        });\n\t},\n\tcreateNewEmail(event) {\n\t\tvar to = this.state.to;\n    \tEmailActionCreator.createNewEmail(to);\n\t}\n});\n</code></pre>\n<p>So, every component in React has state. Our <code>NewEmailComponent</code> will initially have just a <code>to: &quot;&quot;</code> in its state.</p>\n<p>Next, <code>render</code> returns JSX to display. Here we have an input, and a button.</p>\n<p>You'll notice the <code>onChange={this.updateToText}</code>, and the <code>onClick={this.createNewEmail}</code>. Both of these are adding event handlers to the component, and calling the respective functions.</p>\n<p>When the text of the <code>to</code> input changes, the state gets changed to reflect that <code>to</code> has changed.</p>\n<h3 id=\"actioncreators\">Action Creators</h3>\n<blockquote>\n<p>Go get some more stuff</p>\n</blockquote>\n<p>The action creator creates an &quot;action&quot;. Yup. It is also here that you'll typically go get some data from the server if you need it.<br>\nSo, let's go back to the view for a sec...</p>\n<p>When you click on the button, the <code>EmailActionCreator.createNewEmail(to)</code> function fires with whatever kind of data you want to pass as <code>to</code>. Could be an ID, name, whatever, in this case it's an email to send to.</p>\n<p>The <code>EmailActionCreator.createNewEmail</code> function will do a couple of things.</p>\n<ol>\n<li>Create an action for creating a new email</li>\n<li>Call an API to create a draft</li>\n</ol>\n<h3 id=\"actions\">Actions</h3>\n<blockquote>\n<p>Do something with stuff</p>\n</blockquote>\n<p>Actions are JavaScript POJOs (plain old javascript objects). Often they will by convention have a <code>type</code>, and some <code>data</code>. Let's step back to how and why they are created in the first place.</p>\n<p>So, our ActionCreator will create an &quot;action&quot;. Typically there is a file that stores an object of all the different possible action types.</p>\n<pre><code class=\"language-prettyprint\">// actions/fooActions.js\nvar keyMirror = require('keymirror');\n\nmodule.exports = keyMirror({\n\tCREATE_EMAIL: null,\n    EMAIL_CREATED: null,\n    SEND_EMAIL: null\n});\n</code></pre>\n<p>You use these <code>actions</code> to define things you can trigger, whether from the UI or from the server.</p>\n<p><a href=\"https://github.com/STRML/keyMirror\"><code>keyMirror</code></a> here is used to make the values of <code>null</code>, mirror the upper case key names. Just a quick short cut library.</p>\n<p>So, back in our <code>EmailActionCreator</code>, we'll use these different action types.</p>\n<pre><code class=\"language-prettyprint\">// actions/emailActionCreator.js\n\nmodule.exports = {\n\tcreateNewEmail(to) {\n        EmailAppDispatcher.handleViewAction({\n        \ttype: ActionTypes.CREATE_EMAIL,\n            to: to\n        });\n        \n        EmailWebService.createEmail({\n          to: to\n        });\n    },\n    emailCreated(mail) {\n    \tEmailAppDispatcher.handleServerAction({\n        \ttype: ActionTypes.EMAIL_CREATED,\n            mail: mail\n        });\n    }\n}\n</code></pre>\n<p>The <code>EmailWebService</code> can hit your API however you want...</p>\n<pre><code class=\"language-prettyprint\">// data/emailWebService.js\nmodule.exports = {\n\tcreateEmail: function(options) {\n\t\t$.ajax({\n        \turl: &quot;/api/email&quot;,\n            type: &quot;POST&quot;\n        }).done(function(id) {\n            var mail = { \n            \tto: options.to, \n                id: id \n            };\n            \n        \tEmailActionCreator.emailCreated(mail);\n        });\n\t};\n};\n</code></pre>\n<p>Here, it's using <code>jQuery.ajax</code> to create a new email. Once the email is done being created, another action is created with <code>EmailActionCreator.emailCreated(mail);</code> to tell everyone that the email has been created. The type of this action is <code>ActionTypes.EMAIL_CREATED</code>.</p>\n<p>Now let's talk about the dispatcher and that <code>handleViewAction</code> and <code>handleServerAction</code> stuff.</p>\n<h3 id=\"dispatcher\">Dispatcher</h3>\n<blockquote>\n<p>Hey Everyone! There's new stuff!</p>\n</blockquote>\n<p>The dispatcher's single job is to publish out some sort of message, or event, or whatever you want to call it, to let anybody who cares know that something just happened.</p>\n<p>For example, when someone first clicked our <code>Create Email</code> button, an action was created with the <code>EmailActionCreator</code>, and then sent over to the dispatcher via the <code>handleViewAction</code> method on the dispatcher.</p>\n<p>The dispatcher is boilerplate code that never really needs to change once it's done...</p>\n<pre><code class=\"language-prettyprint\">var EmailAppDispatcher = assign(new Dispatcher(), {\n  handleServerAction(action) {\n    var payload = {\n      source: PayloadSources.SERVER_ACTION,\n      action: action\n    };\n    this.dispatch(payload);\n  },\n  handleViewAction(action) {\n    var payload = {\n      source: PayloadSources.VIEW_ACTION,\n      action: action\n    };\n    this.dispatch(payload);\n  }\n});\n\nmodule.exports = EmailAppDispatcher;\n</code></pre>\n<p>Flux.js comes with a default dispatcher that has <code>register</code> and <code>dispatch</code> functions among a few others.</p>\n<p>Our <code>EmailAppDispatcher</code> has 2 helper functions, the <code>handleViewAction</code>, and <code>handleServerAction</code>. Two different functions really aren't entirely neccessary, but they allow you to know exactly where an action came from if you need it. Beyond that though, they just call the built in <code>dispatch</code> function from the <a href=\"http://facebook.github.io/flux/docs/dispatcher.html\">default Dispatcher</a> in Flux.</p>\n<p>Elsewhere in the app, any store, which we'll talk about in a second, that uses the Dispatcher's <code>register</code> function will be notified that an action is being dispatched.</p>\n<h3 id=\"store\">Store</h3>\n<blockquote>\n<p>Keep track of stuff</p>\n</blockquote>\n<p>Stores hold application state and business logic. They are also themselves usually event emitters. That means you can listen to events they publish. So, a view will bind to a store's change event, call different store methods to get data, and in turn update their state with the new data.</p>\n<p>Ideally, stores will not make any ajax requests because the actions should send in data, and the store just manages it.</p>\n<p>A store will generally have local variables that hold some kind of data/state. So, in our case below, simply the active email.</p>\n<pre><code class=\"language-prettyprint\">var EventEmitter = require(&quot;events&quot;),\n\tassign = require(&quot;react/lib/assign&quot;),\n    Email = require(&quot;./core/email&quot;),\n    _ = require(&quot;underscore&quot;);\n\nvar CHANGE_EVENT = &quot;change&quot;;\n\nvar activeEmail = null;\n\nfunction createNewEmail(mail) {\n\tvar email = new Email(mail);\n    \n    activeEmail = email;\n}\n\nvar EmailStore = assign({}, EventEmitter.prototype, {\n  emitChange() {\n  \tthis.emit(CHANGE_EVENT);\n  },\n  addChangeListener(callback) {\n  \tthis.on(CHANGE_EVENT, callback);\n  },\n  removeChangeListener(callback) {\n  \tthis.removeListener(CHANGE_EVENT, callback);\n  },\n  getActiveEmail() {\n  \treturn activeEmail;\n  }\n});\n</code></pre>\n<p>The <code>emitChange</code>, <code>addChangeListener</code>, and <code>removeChangeListener</code> are functions you'll see on every store, and are just abstractions to the underlying <code>EventEmitter</code> methods <code>emit</code>, <code>on</code>, and <code>removeListener</code>. The <code>CHANGE_EVENT</code> just saves a string for the name of the change event.</p>\n<p>The <code>getActiveEmail</code> method just returns the active email.</p>\n<p>Backing up again to the dispatcher, remember it exposes a <code>register</code> function. After we define the methods for our store as above, we <code>register</code> with our dispatcher...</p>\n<pre><code class=\"language-prettyprint\">EmailStore.dispatchToken = EmailAppDispatcher.register((payload) =&gt; {\n\tvar action = payload.action;\n    \n\tswitch (action.type) {\n    \tcase ActionTypes.EMAIL_CREATED:\n        \tcreateNewEmail(action.mail);\n            EmailStore.emitChange();\n            break;\n        \t\n    }\n});\n</code></pre>\n<p>Every time that the dispatcher sends out ANY action, the <code>register</code> function gets called. However, we only care about the action if the type is in our switch statement, and in this case all we have is <code>ActionTypes.EMAIL_CREATED</code>.</p>\n<p>When the action sent out by the dispatcher is <code>ActionTypes.EMAIL_CREATED</code>, we'll respond by calling our <code>createNewEmail</code> function which merely sets an active email. Then we'll tell the store to emit a change event.</p>\n<p>Going full circle, let's step back and add something to our view...</p>\n<pre><code class=\"language-prettyprint\">var EmailStore = require(&quot;../stores/emailStore&quot;);\n\n/** ... *./\n{\n\tcomponentWillMount() {\n\t\tEmailStore.addChangeListener(this._onChange);\n\t},\n    _onChange() {\n    \tthis.setState({\n        \tactiveEmail: EmailStore.getActiveEmail()\n        });\n    }\n}\n</code></pre>\n<p>Our <code>componentWillMount</code> function will fire when the component is ready. It's in <code>componentWillMount</code> that we can add a change listener on our store's change event. Any time that the store changes, <code>this._onChange</code> gets called.</p>\n<p>In the <code>_onChange</code> function we can set the state of the component with the new email that was created!</p>\n<p>Boom.</p>\n<h1 id=\"tldr\">TL;DR</h1>\n<p>View Renders -&gt;<br>\nClick triggers action creator -&gt;<br>\nGo get data -&gt;<br>\nCreate action for recieved data -&gt;<br>\nSend action to dispatcher -&gt;<br>\nDispacther publishes action -&gt;<br>\nStore listens for action -&gt;<br>\nStore updates state -&gt;<br>\nView updates</p>\n<p>So, now you're either thinking...</p>\n<p><img src=\"http://i.imgur.com/16tx1Ft.gif+\" alt=\"\"></p>\n<p>Or...</p>\n<p><img src=\"http://i.imgur.com/tfyHIaB.gif+\" alt=\"\"></p>\n<p>If you're wanting to flip a table, re-read this article, go look at <a href=\"https://github.com/facebook/flux/blob/master/examples\">these exampes</a>, and try again. You'll get it, and you'll love it.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"22","plaintext":"I've been really diving into wrapping my brain around React.js\n[http://facebook.github.io/react/] and Flux [http://facebook.github.io/flux/] \narchitecture the last couple of weeks.\n\nNot going to lie, I've been avoiding it. When I look at the docs and blog posts\nabout Flux, and React, my brain goes...\n\n\n\nThings like componentDidMount, and Dispatchers, and ActionCreators, etc etc\ninitially scared me off when I tried to get into it. Just seemed so computer\nsciency™. After a few days of messing with it, I really like it. A lot.\n\nFlux in particular took me a few days to really wrap my head around. This image\nin particular.\n\n\n\nWhen I finally started to wrap my head around it though, I decided to come up\nwith a version of my own to help others get around to figuring it out a bit\nfaster.\n\n\n\nLet's break this all down...\n\nViews\n> Show some stuff.\n\n\nThis is where your components render. Your component has only a few jobs, and\nhere's what one might look like...\n\nvar NewEmailComponent = React.createClass({\n\tgetInitialState() {\n    \treturn {\n        \tto: \"\"\n        };\n    },\n\trender() {\n      return (\n              <input name=\"to\" type=\"email\" onChange={this.updateToText} />\n              <button onClick={this.createNewEmail}>New Email</button>\n          );\n\t},\n    updateToText(event) {\n\t\tthis.setState({\n        \tto: event.target.value \n        });\n\t},\n\tcreateNewEmail(event) {\n\t\tvar to = this.state.to;\n    \tEmailActionCreator.createNewEmail(to);\n\t}\n});\n\n\nSo, every component in React has state. Our NewEmailComponent will initially\nhave just a to: \"\" in its state.\n\nNext, render returns JSX to display. Here we have an input, and a button.\n\nYou'll notice the onChange={this.updateToText}, and the \nonClick={this.createNewEmail}. Both of these are adding event handlers to the\ncomponent, and calling the respective functions.\n\nWhen the text of the to input changes, the state gets changed to reflect that to \nhas changed.\n\nAction Creators\n> Go get some more stuff\n\n\nThe action creator creates an \"action\". Yup. It is also here that you'll\ntypically go get some data from the server if you need it.\nSo, let's go back to the view for a sec...\n\nWhen you click on the button, the EmailActionCreator.createNewEmail(to) function\nfires with whatever kind of data you want to pass as to. Could be an ID, name,\nwhatever, in this case it's an email to send to.\n\nThe EmailActionCreator.createNewEmail function will do a couple of things.\n\n 1. Create an action for creating a new email\n 2. Call an API to create a draft\n\nActions\n> Do something with stuff\n\n\nActions are JavaScript POJOs (plain old javascript objects). Often they will by\nconvention have a type, and some data. Let's step back to how and why they are\ncreated in the first place.\n\nSo, our ActionCreator will create an \"action\". Typically there is a file that\nstores an object of all the different possible action types.\n\n// actions/fooActions.js\nvar keyMirror = require('keymirror');\n\nmodule.exports = keyMirror({\n\tCREATE_EMAIL: null,\n    EMAIL_CREATED: null,\n    SEND_EMAIL: null\n});\n\n\nYou use these actions to define things you can trigger, whether from the UI or\nfrom the server.\n\nkeyMirror [https://github.com/STRML/keyMirror] here is used to make the values\nof null, mirror the upper case key names. Just a quick short cut library.\n\nSo, back in our EmailActionCreator, we'll use these different action types.\n\n// actions/emailActionCreator.js\n\nmodule.exports = {\n\tcreateNewEmail(to) {\n        EmailAppDispatcher.handleViewAction({\n        \ttype: ActionTypes.CREATE_EMAIL,\n            to: to\n        });\n        \n        EmailWebService.createEmail({\n          to: to\n        });\n    },\n    emailCreated(mail) {\n    \tEmailAppDispatcher.handleServerAction({\n        \ttype: ActionTypes.EMAIL_CREATED,\n            mail: mail\n        });\n    }\n}\n\n\nThe EmailWebService can hit your API however you want...\n\n// data/emailWebService.js\nmodule.exports = {\n\tcreateEmail: function(options) {\n\t\t$.ajax({\n        \turl: \"/api/email\",\n            type: \"POST\"\n        }).done(function(id) {\n            var mail = { \n            \tto: options.to, \n                id: id \n            };\n            \n        \tEmailActionCreator.emailCreated(mail);\n        });\n\t};\n};\n\n\nHere, it's using jQuery.ajax to create a new email. Once the email is done being\ncreated, another action is created with EmailActionCreator.emailCreated(mail); \nto tell everyone that the email has been created. The type of this action is \nActionTypes.EMAIL_CREATED.\n\nNow let's talk about the dispatcher and that handleViewAction and \nhandleServerAction stuff.\n\nDispatcher\n> Hey Everyone! There's new stuff!\n\n\nThe dispatcher's single job is to publish out some sort of message, or event, or\nwhatever you want to call it, to let anybody who cares know that something just\nhappened.\n\nFor example, when someone first clicked our Create Email button, an action was\ncreated with the EmailActionCreator, and then sent over to the dispatcher via\nthe handleViewAction method on the dispatcher.\n\nThe dispatcher is boilerplate code that never really needs to change once it's\ndone...\n\nvar EmailAppDispatcher = assign(new Dispatcher(), {\n  handleServerAction(action) {\n    var payload = {\n      source: PayloadSources.SERVER_ACTION,\n      action: action\n    };\n    this.dispatch(payload);\n  },\n  handleViewAction(action) {\n    var payload = {\n      source: PayloadSources.VIEW_ACTION,\n      action: action\n    };\n    this.dispatch(payload);\n  }\n});\n\nmodule.exports = EmailAppDispatcher;\n\n\nFlux.js comes with a default dispatcher that has register and dispatch functions\namong a few others.\n\nOur EmailAppDispatcher has 2 helper functions, the handleViewAction, and \nhandleServerAction. Two different functions really aren't entirely neccessary,\nbut they allow you to know exactly where an action came from if you need it.\nBeyond that though, they just call the built in dispatch function from the \ndefault Dispatcher [http://facebook.github.io/flux/docs/dispatcher.html] in\nFlux.\n\nElsewhere in the app, any store, which we'll talk about in a second, that uses\nthe Dispatcher's register function will be notified that an action is being\ndispatched.\n\nStore\n> Keep track of stuff\n\n\nStores hold application state and business logic. They are also themselves\nusually event emitters. That means you can listen to events they publish. So, a\nview will bind to a store's change event, call different store methods to get\ndata, and in turn update their state with the new data.\n\nIdeally, stores will not make any ajax requests because the actions should send\nin data, and the store just manages it.\n\nA store will generally have local variables that hold some kind of data/state.\nSo, in our case below, simply the active email.\n\nvar EventEmitter = require(\"events\"),\n\tassign = require(\"react/lib/assign\"),\n    Email = require(\"./core/email\"),\n    _ = require(\"underscore\");\n\nvar CHANGE_EVENT = \"change\";\n\nvar activeEmail = null;\n\nfunction createNewEmail(mail) {\n\tvar email = new Email(mail);\n    \n    activeEmail = email;\n}\n\nvar EmailStore = assign({}, EventEmitter.prototype, {\n  emitChange() {\n  \tthis.emit(CHANGE_EVENT);\n  },\n  addChangeListener(callback) {\n  \tthis.on(CHANGE_EVENT, callback);\n  },\n  removeChangeListener(callback) {\n  \tthis.removeListener(CHANGE_EVENT, callback);\n  },\n  getActiveEmail() {\n  \treturn activeEmail;\n  }\n});\n\n\nThe emitChange, addChangeListener, and removeChangeListener are functions you'll\nsee on every store, and are just abstractions to the underlying EventEmitter \nmethods emit, on, and removeListener. The CHANGE_EVENT just saves a string for\nthe name of the change event.\n\nThe getActiveEmail method just returns the active email.\n\nBacking up again to the dispatcher, remember it exposes a register function.\nAfter we define the methods for our store as above, we register with our\ndispatcher...\n\nEmailStore.dispatchToken = EmailAppDispatcher.register((payload) => {\n\tvar action = payload.action;\n    \n\tswitch (action.type) {\n    \tcase ActionTypes.EMAIL_CREATED:\n        \tcreateNewEmail(action.mail);\n            EmailStore.emitChange();\n            break;\n        \t\n    }\n});\n\n\nEvery time that the dispatcher sends out ANY action, the register function gets\ncalled. However, we only care about the action if the type is in our switch\nstatement, and in this case all we have is ActionTypes.EMAIL_CREATED.\n\nWhen the action sent out by the dispatcher is ActionTypes.EMAIL_CREATED, we'll\nrespond by calling our createNewEmail function which merely sets an active\nemail. Then we'll tell the store to emit a change event.\n\nGoing full circle, let's step back and add something to our view...\n\nvar EmailStore = require(\"../stores/emailStore\");\n\n/** ... *./\n{\n\tcomponentWillMount() {\n\t\tEmailStore.addChangeListener(this._onChange);\n\t},\n    _onChange() {\n    \tthis.setState({\n        \tactiveEmail: EmailStore.getActiveEmail()\n        });\n    }\n}\n\n\nOur componentWillMount function will fire when the component is ready. It's in \ncomponentWillMount that we can add a change listener on our store's change\nevent. Any time that the store changes, this._onChange gets called.\n\nIn the _onChange function we can set the state of the component with the new\nemail that was created!\n\nBoom.\n\nTL;DR\nView Renders ->\nClick triggers action creator ->\nGo get data ->\nCreate action for recieved data ->\nSend action to dispatcher ->\nDispacther publishes action ->\nStore listens for action ->\nStore updates state ->\nView updates\n\nSo, now you're either thinking...\n\n\n\nOr...\n\n\n\nIf you're wanting to flip a table, re-read this article, go look at these\nexampes [https://github.com/facebook/flux/blob/master/examples], and try again.\nYou'll get it, and you'll love it.","feature_image":null,"featured":1,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"What the flux?","meta_description":"Flux by Facebook is an architectural pattern for using their React library. This post helps explain flux in easy to understand ways.","author_id":"1","created_at":"2015-01-26 19:26:54","updated_at":"2015-02-17 21:51:58","published_at":"2015-01-27 16:15:53","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220557","uuid":"458cbfdf-4128-4e46-a6a2-26a72f70ad7b","title":"Hadley's First Laughs","slug":"hadleys-first-laughs","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Yesterday my cute baby laughed for the first time! We were playing with the dogs, and she started little giggles, and then just started rolling laughing.\\n\\nWhat a cutie I have!\\n\\n<iframe width=\\\"854\\\" height=\\\"510\\\" src=\\\"//www.youtube.com/embed/NjXduDS3XQo\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Yesterday my cute baby laughed for the first time! We were playing with the dogs, and she started little giggles, and then just started rolling laughing.</p>\n<p>What a cutie I have!</p>\n<iframe width=\"854\" height=\"510\" src=\"//www.youtube.com/embed/NjXduDS3XQo\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"23","plaintext":"Yesterday my cute baby laughed for the first time! We were playing with the\ndogs, and she started little giggles, and then just started rolling laughing.\n\nWhat a cutie I have!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-01-28 14:40:50","updated_at":"2015-01-28 14:42:47","published_at":"2015-01-28 14:42:46","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220558","uuid":"bcecf5f9-d5f7-4bcd-b373-1da41e0caee7","title":"How to manage state in JavaScript components","slug":"how-to-manage-state-in-javascript-components","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* Redux can be used everywhere, not just react\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><ul>\n<li>Redux can be used everywhere, not just react</li>\n</ul>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"24","plaintext":" * Redux can be used everywhere, not just react","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-02-18 21:30:55","updated_at":"2016-09-11 17:28:04","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220559","uuid":"e3b7b35e-17db-4173-b62b-d6b22ef771ab","title":"Advanced WebPack Part 1 - The CommonsChunk Plugin","slug":"advanced-webpack-part-1-the-commonschunk-plugin","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> \\\"As a front end developer, I want to split my assets up into multiple bundles so that I can load only the JavaScript, and CSS needed for a page\\\"\\n\\nFor as long as I can remember in my career as a front end developer, one of the problems I've constantly been faced with was how to properly bundle assets for multi-page applications. There are many approaches to solving this problem, and it seems right now the most common one is to bundle CSS, and JavaScript separately and each into a single file.\\n\\nGenerally through grunt, or gulp, all the CSS (SASS, LESS, etc) and JavaScript each get combined together into separate files, minified, and sent down the client. This is a very good solution to the problem at hand, but there are a few tweaks that I think can help improve things.\\n\\nSome issues of this solution are: \\n\\n* There's only 1 file for ALL the CSS in your app\\n* A larger initial download can slow the time to render your site\\n* Unless you load asynchronously, these large files block downloading\\n\\nEnter WebPack.\\n\\n## WebPack\\nWebPack is a bundler for front end assets. It can bundle lots of things. Not only just JavaScript and CSS either. It can do images, html, coffeescript, typescript, etc. It does this through the use of \\\"loaders\\\". A loader will allow you to target a specific file extension and pass it through that loader.\\n\\n### Multiple Entries for multi-page\\nInstall WebPack as a global node.js module with..\\n\\n```prettyprint lang-js\\nnpm install -g webpack\\n```\\n\\nNow create a `webpack.config.js` file\\n\\n```prettyprint lang-js\\nmodule.exports = {\\n  entry: {\\n    \\\"home\\\": \\\"js/home\\\",\\n    \\\"list\\\": \\\"js/list\\\",\\n    \\\"details\\\": \\\"js/details\\\"\\n  }\\n};\\n```\\n\\n```\\njs/home/index.js\\njs/home/home.scss\\njs/list/index.js\\njs/list/list.scss\\njs/details/index.js\\njs/details/details.scss\\n```\\n\\nHere we'll have 3 pages. A good way to organize things is to put each of these into separate folders...\\n\\nLet's add the [babel-loader](github.com/babel/babel-loader) to webpack so we can use ES2015 modules and classes...\\n\\n\\n```prettyprint lang-js\\nloaders: [{\\n  test: /*.js$/,\\n  exclude: /node_modules/,\\n  loader: \\\"babel\\\"\\n}]\\n```\\n\\nNow let's create a few components to use across our pages. Similar to the page organzation, you can create a folder for components, and one for each component...\\n\\n```\\njs/components/\\njs/components/header/index.js\\njs/components/header/header.scss\\njs/components/search/index.js\\njs/components/search/search.scss\\n...\\n...\\n```\\n\\nThis type of organization will allow you to keep all the code for a given component in the same place.\\n\\nThen the code JS code for a module can look like this...\\n\\n```prettyprint lang-js\\n// components/search/index\\n\\nimport \\\"search.scss\\\"; // WAT\\n\\nexport default class Search {\\n  constructor({ el }) {\\n    this.$el = el;\\n    this.$el.on(\\\"focus\\\", \\\".search__input\\\", this.searchActivate.bind(this));\\n  }\\n  searchActivate() {\\n    // ...\\n  }\\n}\\n```\\n\\nOur header might then import the search component, and it's styles\\n\\n```prettyprint lang-js\\nimport \\\"header.scss\\\";\\nimport Search from \\\"../search\\\";\\n\\nexport default class Header {\\n  constructor({ el }) {\\n    this.$el = el;\\n    \\n    this.search = new Search({\\n      el: this.$el.find(\\\".search\\\")\\n    });\\n  }\\n}\\n```\\n\\nThe search, and header are components that each page would need, so let's import them into each one of our pages...\\n\\n```prettyprint lang-js\\nimport \\\"home.scss\\\";\\nimport Header from \\\"../components/header\\\";\\n\\nconst header = new Header({ el: \\\".header\\\" });\\n```\\n\\nHere's what's great about WebPack, it would seem like since we've used the same module 3 times that when we build the bundle, we'd see it repeated 3 times. That's where WebPack plugins come into play.\\n\\n### WebPack Plugins\\nThere are bunches of different [plugins](http://webpack.github.io/docs/list-of-plugins.html) for WebPack. \\n\\nOne of the coolest ones is the CommonsChunk plugin. WebPack defines each module of your code as a \\\"chunk\\\". The job of the CommonsChunk plugin is to determine which modules (or chunks) of code you use the most, and pull them out into a separate file. That way you can have a common file that contains both CSS and JavaScript that every page in your application needs.\\n\\nTo get started...\\n\\n```prettyprint lang-js\\nvar CommonsPlugin = new require(\\\"webpack/lib/optimize/CommonsChunkPlugin\\\")\\n\\n// ...\\n\\nmodule.exports = {\\n  entry: {\\n    common: [\\\"jquery\\\"]\\n  },\\n  plugins: [\\n    new CommonsPlugin({\\n      minChunks: 3,\\n      name: \\\"common\\\"\\n    });\\n  ]\\n};\\n```\\nRequire the plugin into your webpack.config file, then add a new `common` entry. You can preload the common chunk with stuff like jQuery that you may want on every page.\\n\\nYou then need to create an instance of the plugin down in an array of plugins. You can specify the `minChunk` option in here as well. This option says, if any module is used X or more times, then take it out and pull it into the common chunk. The `name` must match with the key in the `entry` object.\\n\\nNow the next time you run WebPack, you'll have another outputed chunk that contains jQuery as well as any module that you have used 3 or more times. So our header that we've used in every page would be pulled out into the common chunk.\\n\\n### Conclusion\\nIt's always been a challenge to determine what pages need what JavaScript and styles. Thankfully WebPack's CommonsChunk plugin makes it pretty simple to do this out of the box with just a bit of configuration. \\n\\nThis is part 1 of Advanced Webpack. There will be more to come!\\n\\nBe sure and check out the [webpack express starter](https://github.com/jcreamer898/webpack-express-starter) repository which will have some examples of things talked about throughout the series. \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><blockquote>\n<p>&quot;As a front end developer, I want to split my assets up into multiple bundles so that I can load only the JavaScript, and CSS needed for a page&quot;</p>\n</blockquote>\n<p>For as long as I can remember in my career as a front end developer, one of the problems I've constantly been faced with was how to properly bundle assets for multi-page applications. There are many approaches to solving this problem, and it seems right now the most common one is to bundle CSS, and JavaScript separately and each into a single file.</p>\n<p>Generally through grunt, or gulp, all the CSS (SASS, LESS, etc) and JavaScript each get combined together into separate files, minified, and sent down the client. This is a very good solution to the problem at hand, but there are a few tweaks that I think can help improve things.</p>\n<p>Some issues of this solution are:</p>\n<ul>\n<li>There's only 1 file for ALL the CSS in your app</li>\n<li>A larger initial download can slow the time to render your site</li>\n<li>Unless you load asynchronously, these large files block downloading</li>\n</ul>\n<p>Enter WebPack.</p>\n<h2 id=\"webpack\">WebPack</h2>\n<p>WebPack is a bundler for front end assets. It can bundle lots of things. Not only just JavaScript and CSS either. It can do images, html, coffeescript, typescript, etc. It does this through the use of &quot;loaders&quot;. A loader will allow you to target a specific file extension and pass it through that loader.</p>\n<h3 id=\"multipleentriesformultipage\">Multiple Entries for multi-page</h3>\n<p>Install WebPack as a global node.js module with..</p>\n<pre><code class=\"language-prettyprint\">npm install -g webpack\n</code></pre>\n<p>Now create a <code>webpack.config.js</code> file</p>\n<pre><code class=\"language-prettyprint\">module.exports = {\n  entry: {\n    &quot;home&quot;: &quot;js/home&quot;,\n    &quot;list&quot;: &quot;js/list&quot;,\n    &quot;details&quot;: &quot;js/details&quot;\n  }\n};\n</code></pre>\n<pre><code>js/home/index.js\njs/home/home.scss\njs/list/index.js\njs/list/list.scss\njs/details/index.js\njs/details/details.scss\n</code></pre>\n<p>Here we'll have 3 pages. A good way to organize things is to put each of these into separate folders...</p>\n<p>Let's add the <a href=\"github.com/babel/babel-loader\">babel-loader</a> to webpack so we can use ES2015 modules and classes...</p>\n<pre><code class=\"language-prettyprint\">loaders: [{\n  test: /*.js$/,\n  exclude: /node_modules/,\n  loader: &quot;babel&quot;\n}]\n</code></pre>\n<p>Now let's create a few components to use across our pages. Similar to the page organzation, you can create a folder for components, and one for each component...</p>\n<pre><code>js/components/\njs/components/header/index.js\njs/components/header/header.scss\njs/components/search/index.js\njs/components/search/search.scss\n...\n...\n</code></pre>\n<p>This type of organization will allow you to keep all the code for a given component in the same place.</p>\n<p>Then the code JS code for a module can look like this...</p>\n<pre><code class=\"language-prettyprint\">// components/search/index\n\nimport &quot;search.scss&quot;; // WAT\n\nexport default class Search {\n  constructor({ el }) {\n    this.$el = el;\n    this.$el.on(&quot;focus&quot;, &quot;.search__input&quot;, this.searchActivate.bind(this));\n  }\n  searchActivate() {\n    // ...\n  }\n}\n</code></pre>\n<p>Our header might then import the search component, and it's styles</p>\n<pre><code class=\"language-prettyprint\">import &quot;header.scss&quot;;\nimport Search from &quot;../search&quot;;\n\nexport default class Header {\n  constructor({ el }) {\n    this.$el = el;\n    \n    this.search = new Search({\n      el: this.$el.find(&quot;.search&quot;)\n    });\n  }\n}\n</code></pre>\n<p>The search, and header are components that each page would need, so let's import them into each one of our pages...</p>\n<pre><code class=\"language-prettyprint\">import &quot;home.scss&quot;;\nimport Header from &quot;../components/header&quot;;\n\nconst header = new Header({ el: &quot;.header&quot; });\n</code></pre>\n<p>Here's what's great about WebPack, it would seem like since we've used the same module 3 times that when we build the bundle, we'd see it repeated 3 times. That's where WebPack plugins come into play.</p>\n<h3 id=\"webpackplugins\">WebPack Plugins</h3>\n<p>There are bunches of different <a href=\"http://webpack.github.io/docs/list-of-plugins.html\">plugins</a> for WebPack.</p>\n<p>One of the coolest ones is the CommonsChunk plugin. WebPack defines each module of your code as a &quot;chunk&quot;. The job of the CommonsChunk plugin is to determine which modules (or chunks) of code you use the most, and pull them out into a separate file. That way you can have a common file that contains both CSS and JavaScript that every page in your application needs.</p>\n<p>To get started...</p>\n<pre><code class=\"language-prettyprint\">var CommonsPlugin = new require(&quot;webpack/lib/optimize/CommonsChunkPlugin&quot;)\n\n// ...\n\nmodule.exports = {\n  entry: {\n    common: [&quot;jquery&quot;]\n  },\n  plugins: [\n    new CommonsPlugin({\n      minChunks: 3,\n      name: &quot;common&quot;\n    });\n  ]\n};\n</code></pre>\n<p>Require the plugin into your webpack.config file, then add a new <code>common</code> entry. You can preload the common chunk with stuff like jQuery that you may want on every page.</p>\n<p>You then need to create an instance of the plugin down in an array of plugins. You can specify the <code>minChunk</code> option in here as well. This option says, if any module is used X or more times, then take it out and pull it into the common chunk. The <code>name</code> must match with the key in the <code>entry</code> object.</p>\n<p>Now the next time you run WebPack, you'll have another outputed chunk that contains jQuery as well as any module that you have used 3 or more times. So our header that we've used in every page would be pulled out into the common chunk.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>It's always been a challenge to determine what pages need what JavaScript and styles. Thankfully WebPack's CommonsChunk plugin makes it pretty simple to do this out of the box with just a bit of configuration.</p>\n<p>This is part 1 of Advanced Webpack. There will be more to come!</p>\n<p>Be sure and check out the <a href=\"https://github.com/jcreamer898/webpack-express-starter\">webpack express starter</a> repository which will have some examples of things talked about throughout the series.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"25","plaintext":"> \"As a front end developer, I want to split my assets up into multiple bundles so\nthat I can load only the JavaScript, and CSS needed for a page\"\n\n\nFor as long as I can remember in my career as a front end developer, one of the\nproblems I've constantly been faced with was how to properly bundle assets for\nmulti-page applications. There are many approaches to solving this problem, and\nit seems right now the most common one is to bundle CSS, and JavaScript\nseparately and each into a single file.\n\nGenerally through grunt, or gulp, all the CSS (SASS, LESS, etc) and JavaScript\neach get combined together into separate files, minified, and sent down the\nclient. This is a very good solution to the problem at hand, but there are a few\ntweaks that I think can help improve things.\n\nSome issues of this solution are:\n\n * There's only 1 file for ALL the CSS in your app\n * A larger initial download can slow the time to render your site\n * Unless you load asynchronously, these large files block downloading\n\nEnter WebPack.\n\nWebPack\nWebPack is a bundler for front end assets. It can bundle lots of things. Not\nonly just JavaScript and CSS either. It can do images, html, coffeescript,\ntypescript, etc. It does this through the use of \"loaders\". A loader will allow\nyou to target a specific file extension and pass it through that loader.\n\nMultiple Entries for multi-page\nInstall WebPack as a global node.js module with..\n\nnpm install -g webpack\n\n\nNow create a webpack.config.js file\n\nmodule.exports = {\n  entry: {\n    \"home\": \"js/home\",\n    \"list\": \"js/list\",\n    \"details\": \"js/details\"\n  }\n};\n\n\njs/home/index.js\njs/home/home.scss\njs/list/index.js\njs/list/list.scss\njs/details/index.js\njs/details/details.scss\n\n\nHere we'll have 3 pages. A good way to organize things is to put each of these\ninto separate folders...\n\nLet's add the babel-loader [github.com/babel/babel-loader] to webpack so we can\nuse ES2015 modules and classes...\n\nloaders: [{\n  test: /*.js$/,\n  exclude: /node_modules/,\n  loader: \"babel\"\n}]\n\n\nNow let's create a few components to use across our pages. Similar to the page\norganzation, you can create a folder for components, and one for each\ncomponent...\n\njs/components/\njs/components/header/index.js\njs/components/header/header.scss\njs/components/search/index.js\njs/components/search/search.scss\n...\n...\n\n\nThis type of organization will allow you to keep all the code for a given\ncomponent in the same place.\n\nThen the code JS code for a module can look like this...\n\n// components/search/index\n\nimport \"search.scss\"; // WAT\n\nexport default class Search {\n  constructor({ el }) {\n    this.$el = el;\n    this.$el.on(\"focus\", \".search__input\", this.searchActivate.bind(this));\n  }\n  searchActivate() {\n    // ...\n  }\n}\n\n\nOur header might then import the search component, and it's styles\n\nimport \"header.scss\";\nimport Search from \"../search\";\n\nexport default class Header {\n  constructor({ el }) {\n    this.$el = el;\n    \n    this.search = new Search({\n      el: this.$el.find(\".search\")\n    });\n  }\n}\n\n\nThe search, and header are components that each page would need, so let's import\nthem into each one of our pages...\n\nimport \"home.scss\";\nimport Header from \"../components/header\";\n\nconst header = new Header({ el: \".header\" });\n\n\nHere's what's great about WebPack, it would seem like since we've used the same\nmodule 3 times that when we build the bundle, we'd see it repeated 3 times.\nThat's where WebPack plugins come into play.\n\nWebPack Plugins\nThere are bunches of different plugins\n[http://webpack.github.io/docs/list-of-plugins.html] for WebPack.\n\nOne of the coolest ones is the CommonsChunk plugin. WebPack defines each module\nof your code as a \"chunk\". The job of the CommonsChunk plugin is to determine\nwhich modules (or chunks) of code you use the most, and pull them out into a\nseparate file. That way you can have a common file that contains both CSS and\nJavaScript that every page in your application needs.\n\nTo get started...\n\nvar CommonsPlugin = new require(\"webpack/lib/optimize/CommonsChunkPlugin\")\n\n// ...\n\nmodule.exports = {\n  entry: {\n    common: [\"jquery\"]\n  },\n  plugins: [\n    new CommonsPlugin({\n      minChunks: 3,\n      name: \"common\"\n    });\n  ]\n};\n\n\nRequire the plugin into your webpack.config file, then add a new common entry.\nYou can preload the common chunk with stuff like jQuery that you may want on\nevery page.\n\nYou then need to create an instance of the plugin down in an array of plugins.\nYou can specify the minChunk option in here as well. This option says, if any\nmodule is used X or more times, then take it out and pull it into the common\nchunk. The name must match with the key in the entry object.\n\nNow the next time you run WebPack, you'll have another outputed chunk that\ncontains jQuery as well as any module that you have used 3 or more times. So our\nheader that we've used in every page would be pulled out into the common chunk.\n\nConclusion\nIt's always been a challenge to determine what pages need what JavaScript and\nstyles. Thankfully WebPack's CommonsChunk plugin makes it pretty simple to do\nthis out of the box with just a bit of configuration.\n\nThis is part 1 of Advanced Webpack. There will be more to come!\n\nBe sure and check out the webpack express starter\n[https://github.com/jcreamer898/webpack-express-starter] repository which will\nhave some examples of things talked about throughout the series.","feature_image":null,"featured":1,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Advanced WebPack Part 1 - The CommonsChunk Plugin","meta_description":"Part 1 of the Advanced Webpack Series. This post covers using the CommonsChunk plugin to enable you to extract common modules into a single file.","author_id":"1","created_at":"2015-06-03 18:38:04","updated_at":"2015-09-02 03:22:36","published_at":"2015-09-02 03:17:08","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055a","uuid":"7c4719b7-17a2-43d5-b69b-2f0355b3e95b","title":"Comic Con 2015 Friday Highlights","slug":"comic-con-2015-friday-highlights","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Here's some of the highlights of my (SDCC) Comic Con 2015 photos. I'll add some more as I get them uploaded. \\n\\nSeeing the cast of <strong>The Walking Dead</strong> was definitely one of the highlights as there was a huge rush to grab photos of them as they walked by. \\n\\n<object width=\\\"800\\\" height=\\\"600\\\"> <param name=\\\"flashvars\\\" value=\\\"offsite=true&lang=en-us&page_show_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2Fshow%2F&page_show_back_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2F&set_id=72157655749096665&jump_to=\\\"></param> <param name=\\\"movie\\\" value=\\\"https://www.flickr.com/apps/slideshow/show.swf?v=1811922554\\\"></param> <param name=\\\"allowFullScreen\\\" value=\\\"true\\\"></param><embed type=\\\"application/x-shockwave-flash\\\" src=\\\"https://www.flickr.com/apps/slideshow/show.swf?v=1811922554\\\" allowFullScreen=\\\"true\\\" flashvars=\\\"offsite=true&lang=en-us&page_show_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2Fshow%2F&page_show_back_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2F&set_id=72157655749096665&jump_to=\\\" width=\\\"800\\\" height=\\\"600\\\"></embed></object>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Here's some of the highlights of my (SDCC) Comic Con 2015 photos. I'll add some more as I get them uploaded.</p>\n<p>Seeing the cast of <strong>The Walking Dead</strong> was definitely one of the highlights as there was a huge rush to grab photos of them as they walked by.</p>\n<p><object width=\"800\" height=\"600\"> <param name=\"flashvars\" value=\"offsite=true&lang=en-us&page_show_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2Fshow%2F&page_show_back_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2F&set_id=72157655749096665&jump_to=\"></param> <param name=\"movie\" value=\"https://www.flickr.com/apps/slideshow/show.swf?v=1811922554\"></param> <param name=\"allowFullScreen\" value=\"true\"></param><embed type=\"application/x-shockwave-flash\" src=\"https://www.flickr.com/apps/slideshow/show.swf?v=1811922554\" allowFullScreen=\"true\" flashvars=\"offsite=true&lang=en-us&page_show_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2Fshow%2F&page_show_back_url=%2Fphotos%2Fjcreamer%2Fsets%2F72157655749096665%2F&set_id=72157655749096665&jump_to=\" width=\"800\" height=\"600\"></embed></object></p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"26","plaintext":"Here's some of the highlights of my (SDCC) Comic Con 2015 photos. I'll add some\nmore as I get them uploaded.\n\nSeeing the cast of The Walking Dead was definitely one of the highlights as\nthere was a huge rush to grab photos of them as they walked by.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Comic Con 2015 Friday Highlights","meta_description":"Cosplay galore. Xbox lounge. Star Wars. The Walking Dead Cast. Artists. Just some of my 2015 Comic Con Highlights. ","author_id":"1","created_at":"2015-07-11 14:48:31","updated_at":"2015-07-11 15:06:46","published_at":"2015-07-11 15:06:46","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055b","uuid":"5bd7a733-b3ab-45f3-a655-6cc831bc3e4b","title":"Document ES6 with ESDoc","slug":"document-es6-with-esdoc","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've been writing a lot of ES6(ES2015) at Lonely Planet the past few months. It comes with so many welcome changes to JavaScript, and with tools like Babel, you can use almost all of its features and even ES7(ES2016) features as well.\\n\\nTools for documenting ES6+ are now rolling out as well, and one great such tool is called [ESDoc](https://esdoc.org/). ESDoc is itself written in ES6+ code. JSDoc has [issues open](https://github.com/jsdoc3/jsdoc/milestones/3.4.0) for supporting it, but still has a little ways to go.\\n\\nTo use ESDoc, install it as a global...\\n\\n```prettyprint lang-shell\\nnpm install -g esdoc\\n```\\n\\nor local module...\\n \\n```prettyprint lang-shell\\nnpm install esdoc --save-dev\\n```\\n \\nOne thing you can do if you save it as a local module is create a script in your package.json file...\\n\\n```prettyprint lang-json\\n{\\n  \\\"scripts\\\": {\\n    \\\"docs\\\": \\\"./node_modules/.bin/esdoc -c esdoc.json\\\"\\n  }\\n}\\n```\\n\\nThen you run ESDoc from the command line\\n\\n```prettyprint lang-shell\\nesdoc -c esdoc.json\\n\\n# Or if you installed it locally\\n\\n./node_modules/.bin/esdoc -c esdoc.json\\n\\n# then\\nopen path/to/docs/index.html\\n```\\n\\n\\n### Configure\\nYou can actually configure ESDoc with a [JSON file](https://esdoc.org/config.html). The most minimal configuration though is simply...\\n\\n```prettyprint lang-json\\n{\\n  \\\"source\\\": \\\"./path/to/src\\\",\\n  \\\"destination\\\": \\\"./path/to/esdoc\\\"\\n}\\n```\\n\\n### Features\\nESDoc supports many of the same [tags](https://esdoc.org/tags.html) that JSDoc supports.\\n\\nYou can document classes like...\\n\\n```prettyprint lang-js\\n/**\\n * What a great class this is!\\n * @example\\n * let myClass = new MyAwesomeClass();\\n */\\nclass MyAwesomeClass {\\n  /**\\n   * Constructor for my awesome class\\n   * @param {number} foo The foo for my awesome class\\n   * @param {string} bar The bar for my awesome class\\n   */ \\n  constructor(foo, bar) {...}\\n  /**\\n  * @emits {my.event} Emit an event\\n  */\\n  myEvent() {...}\\n}\\n```\\n\\n### Search\\nOut of the box, it comes with a search feature that you can search for specific parts of your code base.\\n\\n#### Tests\\nA really cool feature of ESDoc is it also ties unit tests to documentation.\\n\\nAdd some configuration to the `esdoc.json` file...\\n\\n```prettyprint lang-json\\n{\\n  \\\"source\\\": \\\"./src\\\",\\n  \\\"destination\\\": \\\"./out/esdoc\\\",\\n  \\\"test\\\": {\\n    \\\"type\\\": \\\"mocha\\\",\\n    \\\"source\\\": \\\"./test\\\"\\n  }\\n}\\n```\\n\\nNow when you run ESDoc you'll see the unit tests for a given class...\\n\\n![](http://d.pr/i/1jVnH+)\\n\\n#### Coverage\\nEvery time you run ESDoc it will generate you a coverage report of how well documented your code is as well... \\n\\n![](http://d.pr/i/SGnB+)\\n\\nYou also get a badge you can use to display your coverage when you use the self hosting described below...\\n\\n#### Self Hosting\\nYou can actually go to https://doc.esdoc.org/-/generate.html and generate your documentation all online, and it will be self-hosted on ESDoc!\\n\\nYou're badge will look like...\\n\\n![](http://d.pr/i/19ipr+)\\n\\nAnd will be found at https://doc.esdoc.org/github.com/org/your-repo/badge.svg.\\n\\n## Conclusion\\nDocumentation is a great way to get people up to speed with your code base fast. So, it's important to use some kind of documentation service. ESDoc is still young, but has great potential to be a very useful tool!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>I've been writing a lot of ES6(ES2015) at Lonely Planet the past few months. It comes with so many welcome changes to JavaScript, and with tools like Babel, you can use almost all of its features and even ES7(ES2016) features as well.</p>\n<p>Tools for documenting ES6+ are now rolling out as well, and one great such tool is called <a href=\"https://esdoc.org/\">ESDoc</a>. ESDoc is itself written in ES6+ code. JSDoc has <a href=\"https://github.com/jsdoc3/jsdoc/milestones/3.4.0\">issues open</a> for supporting it, but still has a little ways to go.</p>\n<p>To use ESDoc, install it as a global...</p>\n<pre><code class=\"language-prettyprint\">npm install -g esdoc\n</code></pre>\n<p>or local module...</p>\n<pre><code class=\"language-prettyprint\">npm install esdoc --save-dev\n</code></pre>\n<p>One thing you can do if you save it as a local module is create a script in your package.json file...</p>\n<pre><code class=\"language-prettyprint\">{\n  &quot;scripts&quot;: {\n    &quot;docs&quot;: &quot;./node_modules/.bin/esdoc -c esdoc.json&quot;\n  }\n}\n</code></pre>\n<p>Then you run ESDoc from the command line</p>\n<pre><code class=\"language-prettyprint\">esdoc -c esdoc.json\n\n# Or if you installed it locally\n\n./node_modules/.bin/esdoc -c esdoc.json\n\n# then\nopen path/to/docs/index.html\n</code></pre>\n<h3 id=\"configure\">Configure</h3>\n<p>You can actually configure ESDoc with a <a href=\"https://esdoc.org/config.html\">JSON file</a>. The most minimal configuration though is simply...</p>\n<pre><code class=\"language-prettyprint\">{\n  &quot;source&quot;: &quot;./path/to/src&quot;,\n  &quot;destination&quot;: &quot;./path/to/esdoc&quot;\n}\n</code></pre>\n<h3 id=\"features\">Features</h3>\n<p>ESDoc supports many of the same <a href=\"https://esdoc.org/tags.html\">tags</a> that JSDoc supports.</p>\n<p>You can document classes like...</p>\n<pre><code class=\"language-prettyprint\">/**\n * What a great class this is!\n * @example\n * let myClass = new MyAwesomeClass();\n */\nclass MyAwesomeClass {\n  /**\n   * Constructor for my awesome class\n   * @param {number} foo The foo for my awesome class\n   * @param {string} bar The bar for my awesome class\n   */ \n  constructor(foo, bar) {...}\n  /**\n  * @emits {my.event} Emit an event\n  */\n  myEvent() {...}\n}\n</code></pre>\n<h3 id=\"search\">Search</h3>\n<p>Out of the box, it comes with a search feature that you can search for specific parts of your code base.</p>\n<h4 id=\"tests\">Tests</h4>\n<p>A really cool feature of ESDoc is it also ties unit tests to documentation.</p>\n<p>Add some configuration to the <code>esdoc.json</code> file...</p>\n<pre><code class=\"language-prettyprint\">{\n  &quot;source&quot;: &quot;./src&quot;,\n  &quot;destination&quot;: &quot;./out/esdoc&quot;,\n  &quot;test&quot;: {\n    &quot;type&quot;: &quot;mocha&quot;,\n    &quot;source&quot;: &quot;./test&quot;\n  }\n}\n</code></pre>\n<p>Now when you run ESDoc you'll see the unit tests for a given class...</p>\n<p><img src=\"http://d.pr/i/1jVnH+\" alt=\"\"></p>\n<h4 id=\"coverage\">Coverage</h4>\n<p>Every time you run ESDoc it will generate you a coverage report of how well documented your code is as well...</p>\n<p><img src=\"http://d.pr/i/SGnB+\" alt=\"\"></p>\n<p>You also get a badge you can use to display your coverage when you use the self hosting described below...</p>\n<h4 id=\"selfhosting\">Self Hosting</h4>\n<p>You can actually go to <a href=\"https://doc.esdoc.org/-/generate.html\">https://doc.esdoc.org/-/generate.html</a> and generate your documentation all online, and it will be self-hosted on ESDoc!</p>\n<p>You're badge will look like...</p>\n<p><img src=\"http://d.pr/i/19ipr+\" alt=\"\"></p>\n<p>And will be found at <a href=\"https://doc.esdoc.org/github.com/org/your-repo/badge.svg\">https://doc.esdoc.org/github.com/org/your-repo/badge.svg</a>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Documentation is a great way to get people up to speed with your code base fast. So, it's important to use some kind of documentation service. ESDoc is still young, but has great potential to be a very useful tool!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"27","plaintext":"I've been writing a lot of ES6(ES2015) at Lonely Planet the past few months. It\ncomes with so many welcome changes to JavaScript, and with tools like Babel, you\ncan use almost all of its features and even ES7(ES2016) features as well.\n\nTools for documenting ES6+ are now rolling out as well, and one great such tool\nis called ESDoc [https://esdoc.org/]. ESDoc is itself written in ES6+ code.\nJSDoc has issues open [https://github.com/jsdoc3/jsdoc/milestones/3.4.0] for\nsupporting it, but still has a little ways to go.\n\nTo use ESDoc, install it as a global...\n\nnpm install -g esdoc\n\n\nor local module...\n\nnpm install esdoc --save-dev\n\n\nOne thing you can do if you save it as a local module is create a script in your\npackage.json file...\n\n{\n  \"scripts\": {\n    \"docs\": \"./node_modules/.bin/esdoc -c esdoc.json\"\n  }\n}\n\n\nThen you run ESDoc from the command line\n\nesdoc -c esdoc.json\n\n# Or if you installed it locally\n\n./node_modules/.bin/esdoc -c esdoc.json\n\n# then\nopen path/to/docs/index.html\n\n\nConfigure\nYou can actually configure ESDoc with a JSON file\n[https://esdoc.org/config.html]. The most minimal configuration though is\nsimply...\n\n{\n  \"source\": \"./path/to/src\",\n  \"destination\": \"./path/to/esdoc\"\n}\n\n\nFeatures\nESDoc supports many of the same tags [https://esdoc.org/tags.html] that JSDoc\nsupports.\n\nYou can document classes like...\n\n/**\n * What a great class this is!\n * @example\n * let myClass = new MyAwesomeClass();\n */\nclass MyAwesomeClass {\n  /**\n   * Constructor for my awesome class\n   * @param {number} foo The foo for my awesome class\n   * @param {string} bar The bar for my awesome class\n   */ \n  constructor(foo, bar) {...}\n  /**\n  * @emits {my.event} Emit an event\n  */\n  myEvent() {...}\n}\n\n\nSearch\nOut of the box, it comes with a search feature that you can search for specific\nparts of your code base.\n\nTests\nA really cool feature of ESDoc is it also ties unit tests to documentation.\n\nAdd some configuration to the esdoc.json file...\n\n{\n  \"source\": \"./src\",\n  \"destination\": \"./out/esdoc\",\n  \"test\": {\n    \"type\": \"mocha\",\n    \"source\": \"./test\"\n  }\n}\n\n\nNow when you run ESDoc you'll see the unit tests for a given class...\n\n\n\nCoverage\nEvery time you run ESDoc it will generate you a coverage report of how well\ndocumented your code is as well...\n\n\n\nYou also get a badge you can use to display your coverage when you use the self\nhosting described below...\n\nSelf Hosting\nYou can actually go to https://doc.esdoc.org/-/generate.html and generate your\ndocumentation all online, and it will be self-hosted on ESDoc!\n\nYou're badge will look like...\n\n\n\nAnd will be found at https://doc.esdoc.org/github.com/org/your-repo/badge.svg.\n\nConclusion\nDocumentation is a great way to get people up to speed with your code base fast.\nSo, it's important to use some kind of documentation service. ESDoc is still\nyoung, but has great potential to be a very useful tool!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Document ES6 with ESDoc","meta_description":"It's important for maintainability of a project to keep it well documented. ESDoc is a tool that allows you to document modern ES6+ JavaScript.","author_id":"1","created_at":"2015-07-28 02:40:09","updated_at":"2015-09-29 18:32:40","published_at":"2015-09-29 18:31:57","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055c","uuid":"1d13f2f8-2062-49d3-822e-d912607e3f94","title":"Setup ESLint with ES6 in Sublime Text","slug":"setup-eslint-with-es6-in-sublime-text","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[ESLint](http://eslint.org/) is a JavaScript linter/style checker that has quickly risen in popularity for a number of reasons. First of all, it's easily plugable. Second, it's sort of a hybrid between JSHint, and JSCS. Third, it's written by none other than [Nicholas Zakas](https://twitter.com/slicknet).\\n\\n### Get Started with ESLint\\nIt's super easy to use ESLint. You should already have Node.js installed, and then intsall ESLint...\\n\\n```\\nnpm install -g eslint\\n# Or\\nnpm install eslint\\n```\\n\\nYou can install it either globally or locally. It's easier to just have it globally though.\\n\\n### Configure\\nCreate a `.eslintrc` in the root of your project. Then you can add `globals`, set up your environment with `env`, and add [rules](http://eslint.org/docs/rules/) as well.\\n\\n```prettyprint lang-js\\n{\\n  \\\"globals\\\": {\\n    // Put things like jQuery, etc\\n    \\\"jQuery\\\": true,\\n    \\\"$\\\": true\\n  },\\n  \\\"env\\\": {\\n    // I write for browser\\n    \\\"browser\\\": true,\\n    // in CommonJS\\n    \\\"node\\\": true\\n  },\\n  // To give you an idea how to override rule options:\\n  \\\"rules\\\": {\\n    // Tons of rules you can use, for example...\\n    \\\"quotes\\\": [1, \\\"double\\\"]\\n  }\\n}\\n```\\n\\n#### Rules\\nTo use a rule, add it's name, then pass an array. The array is an array of options. The first is either...\\n\\n* 0 - Disable the rule\\n* 1 - Warn about the rule\\n* 2 - Throw error about the rule\\n\\nThen the next arguments can configure different parameters per rule. In this case, we're saying we want to throw a warning when single quotes are used rather than double quotes.\\n\\nSee the full list of rules [here](http://eslint.org/docs/rules/).\\n\\n## ES6 (2015)\\nSince ESLint is so easily plugable and configurable, there are already ways of using it with the new version of Ecmascript.\\n\\n### Parsers\\nThere are different types of parsers available. One of them is the `babel-eslint`...\\n\\n```prettyprint lang-js\\n\\\"parser\\\": \\\"babel-eslint\\\",\\n```\\n \\n This will allow you to utilize ES6 syntax.\\n \\n## Sublime-Linter\\nThere's a great plugin for Sublime Text called `Sublime-Linter`. Once it is installed, there are a bunch of other plugins for it as well, including one for ESLint! Install it with the `Command+Shift+P` shorcut...\\n\\n![](http://d.pr/i/12f6i+)\\n\\nYou then have to do a bit of configuration to get it actually running against your code. Go to `Sublime Text -> Prefences -> Package Settings -> SublimeLinter -> Settings-User`...\\n\\n![](http://d.pr/i/TtXN+)\\n\\nIn here, you have to tell Sublime-Linter where your `node` is installed using the `paths` option. You can do this by running `which node` on the command line. For example if you use `nvm` your config would look like this.\\n\\n```prettyprint lang-json\\n\\\"paths\\\": {\\n  \\\"linux\\\": [],\\n  \\\"osx\\\": [\\n    \\\"/Users/jonathanc/.nvm/versions/io.js/v2.0.0/bin\\\"\\n  ],\\n  \\\"windows\\\": []\\n},\\n```\\n\\nOne other thing you might have to set depending on your syntax highlighter is an alias for your syntax highlighter. For ES6, Babel has a sublime plugin for syntax highlighting that you can install by searching for `Babel`.\\n\\nThen in your config for the linter...\\n\\n```prettyprint lang-json\\n\\\"syntax_map\\\": {\\n  \\\"JavaScript (Babel)\\\": \\\"javascript\\\",\\n}\\n```\\n\\nNow when you have invalid JavaScript including ES6, you'll see warnings in the code...\\n\\n![](http://d.pr/i/10oU3+)\\n\\nThat should help you get started linting, and writing better JavaScript in Sublime Text!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p><a href=\"http://eslint.org/\">ESLint</a> is a JavaScript linter/style checker that has quickly risen in popularity for a number of reasons. First of all, it's easily plugable. Second, it's sort of a hybrid between JSHint, and JSCS. Third, it's written by none other than <a href=\"https://twitter.com/slicknet\">Nicholas Zakas</a>.</p>\n<h3 id=\"getstartedwitheslint\">Get Started with ESLint</h3>\n<p>It's super easy to use ESLint. You should already have Node.js installed, and then intsall ESLint...</p>\n<pre><code>npm install -g eslint\n# Or\nnpm install eslint\n</code></pre>\n<p>You can install it either globally or locally. It's easier to just have it globally though.</p>\n<h3 id=\"configure\">Configure</h3>\n<p>Create a <code>.eslintrc</code> in the root of your project. Then you can add <code>globals</code>, set up your environment with <code>env</code>, and add <a href=\"http://eslint.org/docs/rules/\">rules</a> as well.</p>\n<pre><code class=\"language-prettyprint\">{\n  &quot;globals&quot;: {\n    // Put things like jQuery, etc\n    &quot;jQuery&quot;: true,\n    &quot;$&quot;: true\n  },\n  &quot;env&quot;: {\n    // I write for browser\n    &quot;browser&quot;: true,\n    // in CommonJS\n    &quot;node&quot;: true\n  },\n  // To give you an idea how to override rule options:\n  &quot;rules&quot;: {\n    // Tons of rules you can use, for example...\n    &quot;quotes&quot;: [1, &quot;double&quot;]\n  }\n}\n</code></pre>\n<h4 id=\"rules\">Rules</h4>\n<p>To use a rule, add it's name, then pass an array. The array is an array of options. The first is either...</p>\n<ul>\n<li>0 - Disable the rule</li>\n<li>1 - Warn about the rule</li>\n<li>2 - Throw error about the rule</li>\n</ul>\n<p>Then the next arguments can configure different parameters per rule. In this case, we're saying we want to throw a warning when single quotes are used rather than double quotes.</p>\n<p>See the full list of rules <a href=\"http://eslint.org/docs/rules/\">here</a>.</p>\n<h2 id=\"es62015\">ES6 (2015)</h2>\n<p>Since ESLint is so easily plugable and configurable, there are already ways of using it with the new version of Ecmascript.</p>\n<h3 id=\"parsers\">Parsers</h3>\n<p>There are different types of parsers available. One of them is the <code>babel-eslint</code>...</p>\n<pre><code class=\"language-prettyprint\">&quot;parser&quot;: &quot;babel-eslint&quot;,\n</code></pre>\n<p>This will allow you to utilize ES6 syntax.</p>\n<h2 id=\"sublimelinter\">Sublime-Linter</h2>\n<p>There's a great plugin for Sublime Text called <code>Sublime-Linter</code>. Once it is installed, there are a bunch of other plugins for it as well, including one for ESLint! Install it with the <code>Command+Shift+P</code> shorcut...</p>\n<p><img src=\"http://d.pr/i/12f6i+\" alt=\"\"></p>\n<p>You then have to do a bit of configuration to get it actually running against your code. Go to <code>Sublime Text -&gt; Prefences -&gt; Package Settings -&gt; SublimeLinter -&gt; Settings-User</code>...</p>\n<p><img src=\"http://d.pr/i/TtXN+\" alt=\"\"></p>\n<p>In here, you have to tell Sublime-Linter where your <code>node</code> is installed using the <code>paths</code> option. You can do this by running <code>which node</code> on the command line. For example if you use <code>nvm</code> your config would look like this.</p>\n<pre><code class=\"language-prettyprint\">&quot;paths&quot;: {\n  &quot;linux&quot;: [],\n  &quot;osx&quot;: [\n    &quot;/Users/jonathanc/.nvm/versions/io.js/v2.0.0/bin&quot;\n  ],\n  &quot;windows&quot;: []\n},\n</code></pre>\n<p>One other thing you might have to set depending on your syntax highlighter is an alias for your syntax highlighter. For ES6, Babel has a sublime plugin for syntax highlighting that you can install by searching for <code>Babel</code>.</p>\n<p>Then in your config for the linter...</p>\n<pre><code class=\"language-prettyprint\">&quot;syntax_map&quot;: {\n  &quot;JavaScript (Babel)&quot;: &quot;javascript&quot;,\n}\n</code></pre>\n<p>Now when you have invalid JavaScript including ES6, you'll see warnings in the code...</p>\n<p><img src=\"http://d.pr/i/10oU3+\" alt=\"\"></p>\n<p>That should help you get started linting, and writing better JavaScript in Sublime Text!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"28","plaintext":"ESLint [http://eslint.org/] is a JavaScript linter/style checker that has\nquickly risen in popularity for a number of reasons. First of all, it's easily\nplugable. Second, it's sort of a hybrid between JSHint, and JSCS. Third, it's\nwritten by none other than Nicholas Zakas [https://twitter.com/slicknet].\n\nGet Started with ESLint\nIt's super easy to use ESLint. You should already have Node.js installed, and\nthen intsall ESLint...\n\nnpm install -g eslint\n# Or\nnpm install eslint\n\n\nYou can install it either globally or locally. It's easier to just have it\nglobally though.\n\nConfigure\nCreate a .eslintrc in the root of your project. Then you can add globals, set up\nyour environment with env, and add rules [http://eslint.org/docs/rules/] as\nwell.\n\n{\n  \"globals\": {\n    // Put things like jQuery, etc\n    \"jQuery\": true,\n    \"$\": true\n  },\n  \"env\": {\n    // I write for browser\n    \"browser\": true,\n    // in CommonJS\n    \"node\": true\n  },\n  // To give you an idea how to override rule options:\n  \"rules\": {\n    // Tons of rules you can use, for example...\n    \"quotes\": [1, \"double\"]\n  }\n}\n\n\nRules\nTo use a rule, add it's name, then pass an array. The array is an array of\noptions. The first is either...\n\n * 0 - Disable the rule\n * 1 - Warn about the rule\n * 2 - Throw error about the rule\n\nThen the next arguments can configure different parameters per rule. In this\ncase, we're saying we want to throw a warning when single quotes are used rather\nthan double quotes.\n\nSee the full list of rules here [http://eslint.org/docs/rules/].\n\nES6 (2015)\nSince ESLint is so easily plugable and configurable, there are already ways of\nusing it with the new version of Ecmascript.\n\nParsers\nThere are different types of parsers available. One of them is the babel-eslint\n...\n\n\"parser\": \"babel-eslint\",\n\n\nThis will allow you to utilize ES6 syntax.\n\nSublime-Linter\nThere's a great plugin for Sublime Text called Sublime-Linter. Once it is\ninstalled, there are a bunch of other plugins for it as well, including one for\nESLint! Install it with the Command+Shift+P shorcut...\n\n\n\nYou then have to do a bit of configuration to get it actually running against\nyour code. Go to Sublime Text -> Prefences -> Package Settings -> SublimeLinter\n-> Settings-User...\n\n\n\nIn here, you have to tell Sublime-Linter where your node is installed using the \npaths option. You can do this by running which node on the command line. For\nexample if you use nvm your config would look like this.\n\n\"paths\": {\n  \"linux\": [],\n  \"osx\": [\n    \"/Users/jonathanc/.nvm/versions/io.js/v2.0.0/bin\"\n  ],\n  \"windows\": []\n},\n\n\nOne other thing you might have to set depending on your syntax highlighter is an\nalias for your syntax highlighter. For ES6, Babel has a sublime plugin for\nsyntax highlighting that you can install by searching for Babel.\n\nThen in your config for the linter...\n\n\"syntax_map\": {\n  \"JavaScript (Babel)\": \"javascript\",\n}\n\n\nNow when you have invalid JavaScript including ES6, you'll see warnings in the\ncode...\n\n\n\nThat should help you get started linting, and writing better JavaScript in\nSublime Text!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-29 20:10:15","updated_at":"2015-07-31 11:16:54","published_at":"2015-07-31 11:16:54","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055d","uuid":"382cfed0-239f-4101-a732-7ee3cf6d8941","title":"Code on the Beach 2015","slug":"code-on-the-beach-2015","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I was honored to be accepted to speak at [Code on the Beach](http://codeonthebeach.com) this year! (2015). Code on the Beach is an amazing conference down in Jacksonville, FL. I can't recommend it enough!\\n\\n### Location\\nThe conference takes place at a 4 star resort called the [One Ocean Resort](oneoceanresort.com). It's a beautiful resort inside and out. There's a mini bar in your room with free drinks, and snacks, turn down service, and the hotel employees are super friendly and will do anything you need.\\n\\n![](/content/images/2015/08/oneocean.jpg)\\n\\nThe town is called Atlantic Beach. Within 100 feet is the Beaches Town Center. There are a bunch of great restaruants, and shops. [Poe's Tavern](http://poestavern.com/atlantic-beach/), [Flying Iguana](http://flyingiguana.com), and [M Shack](www.mshackburgers.com) were our favorite places, but there's a bunch more! [Lemon Bar](lemonbarjax.com) was also a really cool spot to hang and drink Piña Coladas, steps from the beach.\\n\\n### Conference\\nThe conference was a really great time. The whole thing was very chill, yet organized. Registration was fun with all kinds of beach swag like beach balls, and squirt guns. The talks I attended were mostly in the Web and Cloud track and all had fantastic content. I learned a ton about web performance from [Nik Molnar](http://twitter.com/nikmd23), brushed up on my React/Flux skills from [Raymond McDermett](http://twitter.com/developerjesus), and then gave my talk to a PACKED room. \\n\\n<blockquote class=\\\"twitter-tweet\\\" lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Packed house at <a href=\\\"https://twitter.com/jcreamer898\\\">@jcreamer898</a> &#39;s <a href=\\\"https://twitter.com/hashtag/javascript?src=hash\\\">#javascript</a> architecture session at <a href=\\\"https://twitter.com/CodeOnTheBeach\\\">@CodeOnTheBeach</a> . <a href=\\\"http://t.co/Tir5bk3oBi\\\">pic.twitter.com/Tir5bk3oBi</a></p>&mdash; Michael Crump (@mbcrump) <a href=\\\"https://twitter.com/mbcrump/status/629745201276391424\\\">August 7, 2015</a></blockquote>\\n<script async src=\\\"//platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\\nThanks to [Michael Crump](https://twitter.com/mbcrump/) for that tweet. We then ended the day with drinks provided by the conference/One Ocean, and Poe's which is a super fun restaraunt themed after Edgar Allan Poe.\\n\\n![](/content/images/2015/08/IMG_7843.jpg)\\n\\nDay 2 I woke up and had a great breakfast followed by a hilarious keynote by [Stacey Mulcahy](http://twitter.com/bitchwhocodes), followed by a bunch of great sessions from guys like [Cecil Phillip](http://twitter.com/cecilphillip) on ASP.NET MVC6, another by Nik on Azure WebSites, and 2 by my friend [David Neal](http://twitter.com/reverentgeek), one on Node.js, and the other on Kanban. One of the best parts of day 2 though was the 2.5 hour beach break. There was a corn hole tourney, an Ice Cream Sunday bar, and plenty of time to relax by the ocean or the pool.\\n\\nDay 3 got started with a great talk on F# by [Jeremy Abbbot](http://twitter.com/mrjabbott), then a fantastic intro to Aurellia by [Ashley Grant](http://twitter.com/ashleymgrant). The conference was then final keynoted by the always amazing [Elijah Manor](http://twitter.com/elijahmanor) talking about Growing as a Developer.\\n\\n### Conclusion\\nAll in all, Code on the Beach was an amazing conference, and I cannot recommend it enough! Plus, it was my wife and I's 7th year anniversary so we really enjoyed our time together at the One Ocean Resort! I'm already excited to submit a talk next year so I can come again.\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>I was honored to be accepted to speak at <a href=\"http://codeonthebeach.com\">Code on the Beach</a> this year! (2015). Code on the Beach is an amazing conference down in Jacksonville, FL. I can't recommend it enough!</p>\n<h3 id=\"location\">Location</h3>\n<p>The conference takes place at a 4 star resort called the <a href=\"oneoceanresort.com\">One Ocean Resort</a>. It's a beautiful resort inside and out. There's a mini bar in your room with free drinks, and snacks, turn down service, and the hotel employees are super friendly and will do anything you need.</p>\n<p><img src=\"/content/images/2015/08/oneocean.jpg\" alt=\"\"></p>\n<p>The town is called Atlantic Beach. Within 100 feet is the Beaches Town Center. There are a bunch of great restaruants, and shops. <a href=\"http://poestavern.com/atlantic-beach/\">Poe's Tavern</a>, <a href=\"http://flyingiguana.com\">Flying Iguana</a>, and <a href=\"www.mshackburgers.com\">M Shack</a> were our favorite places, but there's a bunch more! <a href=\"lemonbarjax.com\">Lemon Bar</a> was also a really cool spot to hang and drink Piña Coladas, steps from the beach.</p>\n<h3 id=\"conference\">Conference</h3>\n<p>The conference was a really great time. The whole thing was very chill, yet organized. Registration was fun with all kinds of beach swag like beach balls, and squirt guns. The talks I attended were mostly in the Web and Cloud track and all had fantastic content. I learned a ton about web performance from <a href=\"http://twitter.com/nikmd23\">Nik Molnar</a>, brushed up on my React/Flux skills from <a href=\"http://twitter.com/developerjesus\">Raymond McDermett</a>, and then gave my talk to a PACKED room.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Packed house at <a href=\"https://twitter.com/jcreamer898\">@jcreamer898</a> &#39;s <a href=\"https://twitter.com/hashtag/javascript?src=hash\">#javascript</a> architecture session at <a href=\"https://twitter.com/CodeOnTheBeach\">@CodeOnTheBeach</a> . <a href=\"http://t.co/Tir5bk3oBi\">pic.twitter.com/Tir5bk3oBi</a></p>&mdash; Michael Crump (@mbcrump) <a href=\"https://twitter.com/mbcrump/status/629745201276391424\">August 7, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Thanks to <a href=\"https://twitter.com/mbcrump/\">Michael Crump</a> for that tweet. We then ended the day with drinks provided by the conference/One Ocean, and Poe's which is a super fun restaraunt themed after Edgar Allan Poe.</p>\n<p><img src=\"/content/images/2015/08/IMG_7843.jpg\" alt=\"\"></p>\n<p>Day 2 I woke up and had a great breakfast followed by a hilarious keynote by <a href=\"http://twitter.com/bitchwhocodes\">Stacey Mulcahy</a>, followed by a bunch of great sessions from guys like <a href=\"http://twitter.com/cecilphillip\">Cecil Phillip</a> on ASP.NET MVC6, another by Nik on Azure WebSites, and 2 by my friend <a href=\"http://twitter.com/reverentgeek\">David Neal</a>, one on Node.js, and the other on Kanban. One of the best parts of day 2 though was the 2.5 hour beach break. There was a corn hole tourney, an Ice Cream Sunday bar, and plenty of time to relax by the ocean or the pool.</p>\n<p>Day 3 got started with a great talk on F# by <a href=\"http://twitter.com/mrjabbott\">Jeremy Abbbot</a>, then a fantastic intro to Aurellia by <a href=\"http://twitter.com/ashleymgrant\">Ashley Grant</a>. The conference was then final keynoted by the always amazing <a href=\"http://twitter.com/elijahmanor\">Elijah Manor</a> talking about Growing as a Developer.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>All in all, Code on the Beach was an amazing conference, and I cannot recommend it enough! Plus, it was my wife and I's 7th year anniversary so we really enjoyed our time together at the One Ocean Resort! I'm already excited to submit a talk next year so I can come again.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"29","plaintext":"I was honored to be accepted to speak at Code on the Beach\n[http://codeonthebeach.com] this year! (2015). Code on the Beach is an amazing\nconference down in Jacksonville, FL. I can't recommend it enough!\n\nLocation\nThe conference takes place at a 4 star resort called the One Ocean Resort\n[oneoceanresort.com]. It's a beautiful resort inside and out. There's a mini bar\nin your room with free drinks, and snacks, turn down service, and the hotel\nemployees are super friendly and will do anything you need.\n\n\n\nThe town is called Atlantic Beach. Within 100 feet is the Beaches Town Center.\nThere are a bunch of great restaruants, and shops. Poe's Tavern\n[http://poestavern.com/atlantic-beach/], Flying Iguana [http://flyingiguana.com]\n, and M Shack [www.mshackburgers.com] were our favorite places, but there's a\nbunch more! Lemon Bar [lemonbarjax.com] was also a really cool spot to hang and\ndrink Piña Coladas, steps from the beach.\n\nConference\nThe conference was a really great time. The whole thing was very chill, yet\norganized. Registration was fun with all kinds of beach swag like beach balls,\nand squirt guns. The talks I attended were mostly in the Web and Cloud track and\nall had fantastic content. I learned a ton about web performance from Nik Molnar\n[http://twitter.com/nikmd23], brushed up on my React/Flux skills from Raymond\nMcDermett [http://twitter.com/developerjesus], and then gave my talk to a PACKED\nroom.\n\n> Packed house at @jcreamer898 [https://twitter.com/jcreamer898] 's #javascript\n[https://twitter.com/hashtag/javascript?src=hash] architecture session at \n@CodeOnTheBeach [https://twitter.com/CodeOnTheBeach] . \npic.twitter.com/Tir5bk3oBi [http://t.co/Tir5bk3oBi]\n\n— Michael Crump (@mbcrump) August 7, 2015\n[https://twitter.com/mbcrump/status/629745201276391424]\nThanks to Michael Crump [https://twitter.com/mbcrump/] for that tweet. We then\nended the day with drinks provided by the conference/One Ocean, and Poe's which\nis a super fun restaraunt themed after Edgar Allan Poe.\n\n\n\nDay 2 I woke up and had a great breakfast followed by a hilarious keynote by \nStacey Mulcahy [http://twitter.com/bitchwhocodes], followed by a bunch of great\nsessions from guys like Cecil Phillip [http://twitter.com/cecilphillip] on\nASP.NET MVC6, another by Nik on Azure WebSites, and 2 by my friend David Neal\n[http://twitter.com/reverentgeek], one on Node.js, and the other on Kanban. One\nof the best parts of day 2 though was the 2.5 hour beach break. There was a corn\nhole tourney, an Ice Cream Sunday bar, and plenty of time to relax by the ocean\nor the pool.\n\nDay 3 got started with a great talk on F# by Jeremy Abbbot\n[http://twitter.com/mrjabbott], then a fantastic intro to Aurellia by Ashley\nGrant [http://twitter.com/ashleymgrant]. The conference was then final keynoted\nby the always amazing Elijah Manor [http://twitter.com/elijahmanor] talking\nabout Growing as a Developer.\n\nConclusion\nAll in all, Code on the Beach was an amazing conference, and I cannot recommend\nit enough! Plus, it was my wife and I's 7th year anniversary so we really\nenjoyed our time together at the One Ocean Resort! I'm already excited to submit\na talk next year so I can come again.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-09 14:58:27","updated_at":"2015-08-09 23:04:26","published_at":"2015-08-09 23:04:26","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055e","uuid":"d20ea2d6-2765-4419-90bd-5bdd0595f02d","title":"Be a Mentor","slug":"be-a-mentor","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"30","plaintext":null,"feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-31 18:43:14","updated_at":"2015-08-31 18:43:35","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422055f","uuid":"d64a3b14-7396-43d4-882b-beea4c31b8e9","title":"Using ES2016 Decorators to Publish on an Event Bus","slug":"using-es2016-decorators-to-publish-on-an-event-bus","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One stage 1 feature for ES2016 is the idea of [Decorators](https://github.com/wycats/javascript-decorators) proposed by [Yehuda Katz](twitter.com/wycats). They allow you to annotate and modify entire classes, methods, and getters/setters.\\n\\n\\nWe can use ES2016 decorators to attach behavior to methods on a class. With this we can do things like publishing to an event bus when a method is invoked.\\n\\nFirst of all, a decorator is nothing more than a function. This function can optionally take arguments as options and return another function that does the decorating. The decorator function will recieve as arguments the target (which is the constructor the method exists on), the name of the function, and the [descriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) of the function.\\n\\n```prettyprint lang-js\\nimport postal from \\\"postal/lib/postal.lodash\\\";\\n\\nexport default function publish(topic, channel) {\\n  return function(target, name, descriptor) {\\n    const fn = descriptor.value;\\n\\n    descriptor.value = function() {\\n      let value = fn.apply(this, arguments);\\n      postal.channel(channel || target.channel || \\\"/\\\").publish(topic, value);\\n    };\\n  };\\n}\\n```\\n\\nHere we're allowing 2 arguments on the decorator itself, the topic and the channel. Then the decorator function is returned.\\n\\nInside the decorator function we can create a copy of the original method and make it constant. Then we can override the original function and call the original one that was saved. This allows us to recieve the returned value of the function.\\n\\nYou can then publish out on your event bus the returned value on the specified topic and channel.\\n\\n[Postal.js](https://github.com/postaljs/postal.js) is the event bus in these examples which was written by an amazingly talented JavaScript Engineer [Jim Cowart](https://twitter.com/ifandelse)\\n\\nAnd here is how you use the decorator.\\n\\n```prettyprint lang-js\\nimport publish from \\\"path/to/decorators/publish\\\";\\n\\nclass FooComponent () {\\n  @publish(\\\"foo.some.message\\\", \\\"component\\\")\\n  someMethod() {\\n    return {\\n      my: \\\"data\\\"\\n    };\\n  }\\n  @publish(\\\"foo.some.other\\\")\\n  anotherMethod() {\\n    // ...\\n  }\\n}\\n```\\n\\nSo now, when you call `someMethod` or `anotherMethod` it will publish an event...\\n\\n```prettypring lang-js\\nlet foo = new FooComponent();\\n\\nfoo.someMethod(); //  publish \\\"foo.some.message\\\" on \\\"component\\\" channel with { my: \\\"data\\\" }\\nfoo.anotherMethod(); //  publish \\\"foo.some.other\\\" on \\\"/\\\" channel with no data\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>One stage 1 feature for ES2016 is the idea of <a href=\"https://github.com/wycats/javascript-decorators\">Decorators</a> proposed by <a href=\"twitter.com/wycats\">Yehuda Katz</a>. They allow you to annotate and modify entire classes, methods, and getters/setters.</p>\n<p>We can use ES2016 decorators to attach behavior to methods on a class. With this we can do things like publishing to an event bus when a method is invoked.</p>\n<p>First of all, a decorator is nothing more than a function. This function can optionally take arguments as options and return another function that does the decorating. The decorator function will recieve as arguments the target (which is the constructor the method exists on), the name of the function, and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">descriptor</a> of the function.</p>\n<pre><code class=\"language-prettyprint\">import postal from &quot;postal/lib/postal.lodash&quot;;\n\nexport default function publish(topic, channel) {\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      postal.channel(channel || target.channel || &quot;/&quot;).publish(topic, value);\n    };\n  };\n}\n</code></pre>\n<p>Here we're allowing 2 arguments on the decorator itself, the topic and the channel. Then the decorator function is returned.</p>\n<p>Inside the decorator function we can create a copy of the original method and make it constant. Then we can override the original function and call the original one that was saved. This allows us to recieve the returned value of the function.</p>\n<p>You can then publish out on your event bus the returned value on the specified topic and channel.</p>\n<p><a href=\"https://github.com/postaljs/postal.js\">Postal.js</a> is the event bus in these examples which was written by an amazingly talented JavaScript Engineer <a href=\"https://twitter.com/ifandelse\">Jim Cowart</a></p>\n<p>And here is how you use the decorator.</p>\n<pre><code class=\"language-prettyprint\">import publish from &quot;path/to/decorators/publish&quot;;\n\nclass FooComponent () {\n  @publish(&quot;foo.some.message&quot;, &quot;component&quot;)\n  someMethod() {\n    return {\n      my: &quot;data&quot;\n    };\n  }\n  @publish(&quot;foo.some.other&quot;)\n  anotherMethod() {\n    // ...\n  }\n}\n</code></pre>\n<p>So now, when you call <code>someMethod</code> or <code>anotherMethod</code> it will publish an event...</p>\n<pre><code class=\"language-prettypring\">let foo = new FooComponent();\n\nfoo.someMethod(); //  publish &quot;foo.some.message&quot; on &quot;component&quot; channel with { my: &quot;data&quot; }\nfoo.anotherMethod(); //  publish &quot;foo.some.other&quot; on &quot;/&quot; channel with no data\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"31","plaintext":"One stage 1 feature for ES2016 is the idea of Decorators\n[https://github.com/wycats/javascript-decorators] proposed by Yehuda Katz\n[twitter.com/wycats]. They allow you to annotate and modify entire classes,\nmethods, and getters/setters.\n\nWe can use ES2016 decorators to attach behavior to methods on a class. With this\nwe can do things like publishing to an event bus when a method is invoked.\n\nFirst of all, a decorator is nothing more than a function. This function can\noptionally take arguments as options and return another function that does the\ndecorating. The decorator function will recieve as arguments the target (which\nis the constructor the method exists on), the name of the function, and the \ndescriptor\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty] \nof the function.\n\nimport postal from \"postal/lib/postal.lodash\";\n\nexport default function publish(topic, channel) {\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      postal.channel(channel || target.channel || \"/\").publish(topic, value);\n    };\n  };\n}\n\n\nHere we're allowing 2 arguments on the decorator itself, the topic and the\nchannel. Then the decorator function is returned.\n\nInside the decorator function we can create a copy of the original method and\nmake it constant. Then we can override the original function and call the\noriginal one that was saved. This allows us to recieve the returned value of the\nfunction.\n\nYou can then publish out on your event bus the returned value on the specified\ntopic and channel.\n\nPostal.js [https://github.com/postaljs/postal.js] is the event bus in these\nexamples which was written by an amazingly talented JavaScript Engineer Jim\nCowart [https://twitter.com/ifandelse]\n\nAnd here is how you use the decorator.\n\nimport publish from \"path/to/decorators/publish\";\n\nclass FooComponent () {\n  @publish(\"foo.some.message\", \"component\")\n  someMethod() {\n    return {\n      my: \"data\"\n    };\n  }\n  @publish(\"foo.some.other\")\n  anotherMethod() {\n    // ...\n  }\n}\n\n\nSo now, when you call someMethod or anotherMethod it will publish an event...\n\nlet foo = new FooComponent();\n\nfoo.someMethod(); //  publish \"foo.some.message\" on \"component\" channel with { my: \"data\" }\nfoo.anotherMethod(); //  publish \"foo.some.other\" on \"/\" channel with no data","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Using ES2016 Decorators to Publish on an Event Bus","meta_description":"Learn how to use ES2016 decorators to modify the behavior of functions and even automatically publish messages on an event bus like postal.js by Jim Cowart.","author_id":"1","created_at":"2015-09-25 18:16:29","updated_at":"2015-09-25 18:35:40","published_at":"2015-09-25 18:34:50","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220560","uuid":"ac4264bb-91c5-46f5-afa2-4b199f404f71","title":"Advanced WebPack Part 2 - Code Splitting","slug":"advanced-webpack-part-2-code-splitting","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"WebPack has a feature that utilizes the AMD spec called [Code Splitting](https://webpack.github.io/docs/code-splitting.html). What it allows you to do is \\\"split your code\\\" (insert troll face).\\n\\nSeriously, it's an amazing feature. What generally happens when you work with a standard WebPack build is, you'll have a few entry points like...\\n\\n```prettyprint lang-js\\nentry: {\\n  home: \\\"js/home\\\",\\n  tools: \\\"js/tools\\\",\\n  common: [\\\"jquery\\\", \\\"kendo\\\"]\\n},\\nplugins: [new CommonsChunkPlugin({ name: \\\"common\\\" })]\\n```\\n\\nWith a setup like this, you'll potentially end up with 3 files, `home.js`, `tools.js`, and `common.js`. This might work perfectly for you. \\n\\nHowever, if you're working with some sort of very large Web App, or you're wanting to split out your code into the \\\"above the fold\\\" vs \\\"below the fold\\\" code, it would be nice to further split out your output files.\\n\\nThis is what you can utilize Code Splitting to accomplish.\\n\\n### Critical Path\\n\\nPage load speed is an extremly important metric for user happiness, let alone SEO, so let's take the above the fold example. There are great tools out there for determining how quickly your site renders including [Page Speed Insights](https://developers.google.com/speed/pagespeed/insights/), [WebPageTest](webpagetest.org), and even Chrome's native developer tools have a preview of your site's load time.\\n\\n![](http://d.pr/i/zYks+)\\n\\nIdeally your site will show *something* to the user within 2 seconds so that they are not tempted to leave early and increase your site's bounce rate. Even if the ENTIRE page isn't rendered, you need to get something to the user as quickly as you can.\\n\\nThere are a few tools for helping you do this such as Addy Osmani's [critical](https://github.com/addyosmani/critical), and Scott Jehl/FilamentGroup's [CriticalCSS](https://github.com/filamentgroup/criticalCSS).\\n\\nWith WebPack's code splitting though, you can actually create a setup where you're able to generate an above the fold and below the fold set of bundles.\\n\\nOur new design's at Lonely Planet have a really nice new masthead, and navigation which is what the user sees above the fold. We've architected our JavaScript, and SASS in such a way that we are able to know precicely which modules are needed to render that content...\\n\\n![](http://d.pr/i/133ur+)\\n\\nI know that we need our Navigation, Search, Masthead, and SubNav components to be included above the fold.\\n\\n```prettyprint lang-js\\nimport Masthead from \\\"rizzo-next/src/components/masthead\\\";\\nimport rizzo from \\\"rizzo-next\\\";\\nimport \\\"./main\\\";\\n// ...\\nrequire.ensure([\\n  \\\"./below_the_fold\\\"\\n], function(require) {\\n  // Now require it \\\"sync\\\"\\n  require(\\\"./below_the_fold\\\");\\n}, \\\"below_the_fold\\\");\\n```\\n\\nSo, in the entry point of our JS, we include all those components bundled below in `./main`.\\n\\nThen we introduce the code splitting. You can use `require.ensure` to create a \\\"split point\\\" in your code. We have a file called `below_the_fold.js` which import's all the modules that we know appear below the fold. `require.ensure` can also take a 3rd optional argument to name the \\\"chunk\\\" that get's output...\\n\\n![](http://d.pr/i/1lkRC+)\\n\\nAlso, since my `continents.js`, `countries.js`, and `cities.js` files are all including the same `main.js` file, they will get pulled into the `common.js` file thanks to the `CommonChunksPlugin` that was talked about in [Part 1](http://jonathancreamer.com/advanced-webpack-part-1-the-commonschunk-plugin/) of this series! \\n\\n### Splitting up your app\\nYou can also utilize code splitting to simply split up your application into smaller chunks that you can load on demand. You can even split the code up and load it dynamically with some type of event handler...\\n\\n```prettyprint lang-js\\nlet map;\\n$mapButton.on(\\\"click\\\", function() {\\n  if (!mapLoaded) {\\n    require.ensure([\\n      \\\"../map/index\\\"\\n    ], (require) => {\\n      if (map) {\\n        return map.open();\\n      }\\n\\n      let MapComponent = require(\\\"../map/index\\\");\\n      \\n      map = new MapComponent({\\n        el: \\\".map_holder\\\"\\n      });\\n      \\n      map.open();\\n    }, \\\"map\\\");\\n  }\\n});\\n```\\n\\nWebPack will create a bundle called \\\"map\\\" in the output, but it will not actually try to load the bundle until the button is clicked!\\n\\nThis is extremely useful for us at Lonely Planet because we're using React for our map. This means we can make sure to not include React when the page initially loads, but we can defer that load until the user actually wants to interact with the map.\\n\\nYou could apply the principal to any component you may not need initially when your page loads but can be triggered by some sort of user interaction.\\n\\nFeel free to check out my Nodevember talk where I covered this and several more advanced webpack topics!\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/MzVFrIAwwS8\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>WebPack has a feature that utilizes the AMD spec called <a href=\"https://webpack.github.io/docs/code-splitting.html\">Code Splitting</a>. What it allows you to do is &quot;split your code&quot; (insert troll face).</p>\n<p>Seriously, it's an amazing feature. What generally happens when you work with a standard WebPack build is, you'll have a few entry points like...</p>\n<pre><code class=\"language-prettyprint\">entry: {\n  home: &quot;js/home&quot;,\n  tools: &quot;js/tools&quot;,\n  common: [&quot;jquery&quot;, &quot;kendo&quot;]\n},\nplugins: [new CommonsChunkPlugin({ name: &quot;common&quot; })]\n</code></pre>\n<p>With a setup like this, you'll potentially end up with 3 files, <code>home.js</code>, <code>tools.js</code>, and <code>common.js</code>. This might work perfectly for you.</p>\n<p>However, if you're working with some sort of very large Web App, or you're wanting to split out your code into the &quot;above the fold&quot; vs &quot;below the fold&quot; code, it would be nice to further split out your output files.</p>\n<p>This is what you can utilize Code Splitting to accomplish.</p>\n<h3 id=\"criticalpath\">Critical Path</h3>\n<p>Page load speed is an extremly important metric for user happiness, let alone SEO, so let's take the above the fold example. There are great tools out there for determining how quickly your site renders including <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Page Speed Insights</a>, <a href=\"webpagetest.org\">WebPageTest</a>, and even Chrome's native developer tools have a preview of your site's load time.</p>\n<p><img src=\"http://d.pr/i/zYks+\" alt=\"\"></p>\n<p>Ideally your site will show <em>something</em> to the user within 2 seconds so that they are not tempted to leave early and increase your site's bounce rate. Even if the ENTIRE page isn't rendered, you need to get something to the user as quickly as you can.</p>\n<p>There are a few tools for helping you do this such as Addy Osmani's <a href=\"https://github.com/addyosmani/critical\">critical</a>, and Scott Jehl/FilamentGroup's <a href=\"https://github.com/filamentgroup/criticalCSS\">CriticalCSS</a>.</p>\n<p>With WebPack's code splitting though, you can actually create a setup where you're able to generate an above the fold and below the fold set of bundles.</p>\n<p>Our new design's at Lonely Planet have a really nice new masthead, and navigation which is what the user sees above the fold. We've architected our JavaScript, and SASS in such a way that we are able to know precicely which modules are needed to render that content...</p>\n<p><img src=\"http://d.pr/i/133ur+\" alt=\"\"></p>\n<p>I know that we need our Navigation, Search, Masthead, and SubNav components to be included above the fold.</p>\n<pre><code class=\"language-prettyprint\">import Masthead from &quot;rizzo-next/src/components/masthead&quot;;\nimport rizzo from &quot;rizzo-next&quot;;\nimport &quot;./main&quot;;\n// ...\nrequire.ensure([\n  &quot;./below_the_fold&quot;\n], function(require) {\n  // Now require it &quot;sync&quot;\n  require(&quot;./below_the_fold&quot;);\n}, &quot;below_the_fold&quot;);\n</code></pre>\n<p>So, in the entry point of our JS, we include all those components bundled below in <code>./main</code>.</p>\n<p>Then we introduce the code splitting. You can use <code>require.ensure</code> to create a &quot;split point&quot; in your code. We have a file called <code>below_the_fold.js</code> which import's all the modules that we know appear below the fold. <code>require.ensure</code> can also take a 3rd optional argument to name the &quot;chunk&quot; that get's output...</p>\n<p><img src=\"http://d.pr/i/1lkRC+\" alt=\"\"></p>\n<p>Also, since my <code>continents.js</code>, <code>countries.js</code>, and <code>cities.js</code> files are all including the same <code>main.js</code> file, they will get pulled into the <code>common.js</code> file thanks to the <code>CommonChunksPlugin</code> that was talked about in <a href=\"http://jonathancreamer.com/advanced-webpack-part-1-the-commonschunk-plugin/\">Part 1</a> of this series!</p>\n<h3 id=\"splittingupyourapp\">Splitting up your app</h3>\n<p>You can also utilize code splitting to simply split up your application into smaller chunks that you can load on demand. You can even split the code up and load it dynamically with some type of event handler...</p>\n<pre><code class=\"language-prettyprint\">let map;\n$mapButton.on(&quot;click&quot;, function() {\n  if (!mapLoaded) {\n    require.ensure([\n      &quot;../map/index&quot;\n    ], (require) =&gt; {\n      if (map) {\n        return map.open();\n      }\n\n      let MapComponent = require(&quot;../map/index&quot;);\n      \n      map = new MapComponent({\n        el: &quot;.map_holder&quot;\n      });\n      \n      map.open();\n    }, &quot;map&quot;);\n  }\n});\n</code></pre>\n<p>WebPack will create a bundle called &quot;map&quot; in the output, but it will not actually try to load the bundle until the button is clicked!</p>\n<p>This is extremely useful for us at Lonely Planet because we're using React for our map. This means we can make sure to not include React when the page initially loads, but we can defer that load until the user actually wants to interact with the map.</p>\n<p>You could apply the principal to any component you may not need initially when your page loads but can be triggered by some sort of user interaction.</p>\n<p>Feel free to check out my Nodevember talk where I covered this and several more advanced webpack topics!</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MzVFrIAwwS8\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"32","plaintext":"WebPack has a feature that utilizes the AMD spec called Code Splitting\n[https://webpack.github.io/docs/code-splitting.html]. What it allows you to do\nis \"split your code\" (insert troll face).\n\nSeriously, it's an amazing feature. What generally happens when you work with a\nstandard WebPack build is, you'll have a few entry points like...\n\nentry: {\n  home: \"js/home\",\n  tools: \"js/tools\",\n  common: [\"jquery\", \"kendo\"]\n},\nplugins: [new CommonsChunkPlugin({ name: \"common\" })]\n\n\nWith a setup like this, you'll potentially end up with 3 files, home.js, \ntools.js, and common.js. This might work perfectly for you.\n\nHowever, if you're working with some sort of very large Web App, or you're\nwanting to split out your code into the \"above the fold\" vs \"below the fold\"\ncode, it would be nice to further split out your output files.\n\nThis is what you can utilize Code Splitting to accomplish.\n\nCritical Path\nPage load speed is an extremly important metric for user happiness, let alone\nSEO, so let's take the above the fold example. There are great tools out there\nfor determining how quickly your site renders including Page Speed Insights\n[https://developers.google.com/speed/pagespeed/insights/], WebPageTest\n[webpagetest.org], and even Chrome's native developer tools have a preview of\nyour site's load time.\n\n\n\nIdeally your site will show something to the user within 2 seconds so that they\nare not tempted to leave early and increase your site's bounce rate. Even if the\nENTIRE page isn't rendered, you need to get something to the user as quickly as\nyou can.\n\nThere are a few tools for helping you do this such as Addy Osmani's critical\n[https://github.com/addyosmani/critical], and Scott Jehl/FilamentGroup's \nCriticalCSS [https://github.com/filamentgroup/criticalCSS].\n\nWith WebPack's code splitting though, you can actually create a setup where\nyou're able to generate an above the fold and below the fold set of bundles.\n\nOur new design's at Lonely Planet have a really nice new masthead, and\nnavigation which is what the user sees above the fold. We've architected our\nJavaScript, and SASS in such a way that we are able to know precicely which\nmodules are needed to render that content...\n\n\n\nI know that we need our Navigation, Search, Masthead, and SubNav components to\nbe included above the fold.\n\nimport Masthead from \"rizzo-next/src/components/masthead\";\nimport rizzo from \"rizzo-next\";\nimport \"./main\";\n// ...\nrequire.ensure([\n  \"./below_the_fold\"\n], function(require) {\n  // Now require it \"sync\"\n  require(\"./below_the_fold\");\n}, \"below_the_fold\");\n\n\nSo, in the entry point of our JS, we include all those components bundled below\nin ./main.\n\nThen we introduce the code splitting. You can use require.ensure to create a\n\"split point\" in your code. We have a file called below_the_fold.js which\nimport's all the modules that we know appear below the fold. require.ensure can\nalso take a 3rd optional argument to name the \"chunk\" that get's output...\n\n\n\nAlso, since my continents.js, countries.js, and cities.js files are all\nincluding the same main.js file, they will get pulled into the common.js file\nthanks to the CommonChunksPlugin that was talked about in Part 1\n[http://jonathancreamer.com/advanced-webpack-part-1-the-commonschunk-plugin/] of\nthis series!\n\nSplitting up your app\nYou can also utilize code splitting to simply split up your application into\nsmaller chunks that you can load on demand. You can even split the code up and\nload it dynamically with some type of event handler...\n\nlet map;\n$mapButton.on(\"click\", function() {\n  if (!mapLoaded) {\n    require.ensure([\n      \"../map/index\"\n    ], (require) => {\n      if (map) {\n        return map.open();\n      }\n\n      let MapComponent = require(\"../map/index\");\n      \n      map = new MapComponent({\n        el: \".map_holder\"\n      });\n      \n      map.open();\n    }, \"map\");\n  }\n});\n\n\nWebPack will create a bundle called \"map\" in the output, but it will not\nactually try to load the bundle until the button is clicked!\n\nThis is extremely useful for us at Lonely Planet because we're using React for\nour map. This means we can make sure to not include React when the page\ninitially loads, but we can defer that load until the user actually wants to\ninteract with the map.\n\nYou could apply the principal to any component you may not need initially when\nyour page loads but can be triggered by some sort of user interaction.\n\nFeel free to check out my Nodevember talk where I covered this and several more\nadvanced webpack topics!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Advanced WebPack Part 2 - Code Splitting","meta_description":"Learn about how to split up your application with WebPack's Advanced Code Splitting feature. This will help improve your page speed time and SEO.","author_id":"1","created_at":"2015-10-06 15:04:44","updated_at":"2016-01-10 22:32:25","published_at":"2016-01-10 22:30:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220561","uuid":"d93fd5b7-c342-4092-b4fe-e0acfd286602","title":"A letter for my sister and her husband","slug":"a-letter-to-my-sister-and-her-husband","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![](https://storage.googleapis.com/jcstuff.jcreamerlive.com/meandrachel.jpg)\\n\\n### Today is the day.\\n\\nMy little sister will no longer be a Creamer, and will join together for the rest of her life with a great man of God. \\n\\nGrowing up with her has been so much fun. We played together, cried together, and made it through the best of times and the worst of times.\\n\\nRachel, I love you so much and will always be hear for you as your brother and your friend. You have always been there for me, and I will all ways be here for you.\\n\\nEricson, thank you for being a strong and powerful influence. I can tell that you will love my sister with all your heart and will truly lead her first towards the cross, and second towards your heart.\\n\\nTo the both of you, Lynnsey and I will walk together with you through your beautiful marriage and will love on you guys forever.\\n\\nLove y'all,\\n\\nJonathan and Lynnsey\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p><img src=\"https://storage.googleapis.com/jcstuff.jcreamerlive.com/meandrachel.jpg\" alt=\"\"></p>\n<h3 id=\"todayistheday\">Today is the day.</h3>\n<p>My little sister will no longer be a Creamer, and will join together for the rest of her life with a great man of God.</p>\n<p>Growing up with her has been so much fun. We played together, cried together, and made it through the best of times and the worst of times.</p>\n<p>Rachel, I love you so much and will always be hear for you as your brother and your friend. You have always been there for me, and I will all ways be here for you.</p>\n<p>Ericson, thank you for being a strong and powerful influence. I can tell that you will love my sister with all your heart and will truly lead her first towards the cross, and second towards your heart.</p>\n<p>To the both of you, Lynnsey and I will walk together with you through your beautiful marriage and will love on you guys forever.</p>\n<p>Love y'all,</p>\n<p>Jonathan and Lynnsey</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"33","plaintext":"\n\nToday is the day.\nMy little sister will no longer be a Creamer, and will join together for the\nrest of her life with a great man of God.\n\nGrowing up with her has been so much fun. We played together, cried together,\nand made it through the best of times and the worst of times.\n\nRachel, I love you so much and will always be hear for you as your brother and\nyour friend. You have always been there for me, and I will all ways be here for\nyou.\n\nEricson, thank you for being a strong and powerful influence. I can tell that\nyou will love my sister with all your heart and will truly lead her first\ntowards the cross, and second towards your heart.\n\nTo the both of you, Lynnsey and I will walk together with you through your\nbeautiful marriage and will love on you guys forever.\n\nLove y'all,\n\nJonathan and Lynnsey","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-11-07 16:31:42","updated_at":"2015-11-07 16:40:38","published_at":"2015-11-07 16:37:44","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220562","uuid":"4f57bfd2-a56f-496a-a254-fab0d23c02cd","title":"About Me","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"JavaScript and front end technologies are my passion. I also believe that you cannot ever stop learning which is why I stay active in the development community attending user groups like [http://nashjs.org](NashJS), and [NashDotNet](http://www.nashdotnet.org), blogging on [http://jonathancreamer.com](JonathanCreamer.com), [Net Tuts](http://tutsplus.com/authors/jonathan-creamer), and [Smashing Magazine](http://www.smashingmagazine.com/author/jonathancreamer/), tweeting at [jcreamer898](http://twitter.com/jcreamer898) and scouring the internet for as much knowledge I can squeeze into my brain. \\n\\nI work as a Senior Front End Developer at [Lonely Planet](http://www.lonelyplanet.com) and am having a great time inspiring travelers. I am also an [IE MVP](https://mvp.microsoft.com/en-us/PublicProfile/5000770?fullName=Jonathan%20Creamer) and an IE userAgent Please feel free to contact me, I love meeting other devs who are passionate about what they do.\\n\\n### Stuff I know something about\\nJavaScript, HTML, CSS, Node.js, Ruby, Rails, C#, ASP.NET MVC, ColdFusion\\n\\n### Other things\\nMS MVP, Telerik Developer Expert, and IEuserAgent.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>JavaScript and front end technologies are my passion. I also believe that you cannot ever stop learning which is why I stay active in the development community attending user groups like <a href=\"NashJS\">http://nashjs.org</a>, and <a href=\"http://www.nashdotnet.org\">NashDotNet</a>, blogging on <a href=\"JonathanCreamer.com\">http://jonathancreamer.com</a>, <a href=\"http://tutsplus.com/authors/jonathan-creamer\">Net Tuts</a>, and <a href=\"http://www.smashingmagazine.com/author/jonathancreamer/\">Smashing Magazine</a>, tweeting at <a href=\"http://twitter.com/jcreamer898\">jcreamer898</a> and scouring the internet for as much knowledge I can squeeze into my brain.</p>\n<p>I work as a Senior Front End Developer at <a href=\"http://www.lonelyplanet.com\">Lonely Planet</a> and am having a great time inspiring travelers. I am also an <a href=\"https://mvp.microsoft.com/en-us/PublicProfile/5000770?fullName=Jonathan%20Creamer\">IE MVP</a> and an IE userAgent Please feel free to contact me, I love meeting other devs who are passionate about what they do.</p>\n<h3 id=\"stuffiknowsomethingabout\">Stuff I know something about</h3>\n<p>JavaScript, HTML, CSS, Node.js, Ruby, Rails, C#, ASP.NET MVC, ColdFusion</p>\n<h3 id=\"otherthings\">Other things</h3>\n<p>MS MVP, Telerik Developer Expert, and IEuserAgent.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"34","plaintext":"JavaScript and front end technologies are my passion. I also believe that you\ncannot ever stop learning which is why I stay active in the development\ncommunity attending user groups like http://nashjs.org [NashJS], and NashDotNet\n[http://www.nashdotnet.org], blogging on http://jonathancreamer.com\n[JonathanCreamer.com], Net Tuts [http://tutsplus.com/authors/jonathan-creamer],\nand Smashing Magazine [http://www.smashingmagazine.com/author/jonathancreamer/],\ntweeting at jcreamer898 [http://twitter.com/jcreamer898] and scouring the\ninternet for as much knowledge I can squeeze into my brain.\n\nI work as a Senior Front End Developer at Lonely Planet\n[http://www.lonelyplanet.com] and am having a great time inspiring travelers. I\nam also an IE MVP\n[https://mvp.microsoft.com/en-us/PublicProfile/5000770?fullName=Jonathan%20Creamer] \nand an IE userAgent Please feel free to contact me, I love meeting other devs\nwho are passionate about what they do.\n\nStuff I know something about\nJavaScript, HTML, CSS, Node.js, Ruby, Rails, C#, ASP.NET MVC, ColdFusion\n\nOther things\nMS MVP, Telerik Developer Expert, and IEuserAgent.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-14 17:50:10","updated_at":"2016-01-26 03:21:42","published_at":"2015-12-14 17:53:15","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220563","uuid":"f2ac41df-afe8-4dcc-a1b9-1d7cb01d53ff","title":"Not the Christmas Eve we expected","slug":"not-the-christmas-even-i-expected","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\nIt all started as a normal Christmas Eve this year. Woke up, wrapped presents, spent time with my wife and daughter. On my way to my Grandmother's house for our usual Beef on 'Wek Christmas Eve dinner, things got a bit crazy.\\n\\nWhile attempting to explain firearm safety, my mom Roberta Creamer was accidentally struck with a bullet through her arm and across the front of her chest, thankfully avoiding any internal organs.\\n\\nShe was care flighted to the hospital last night in amazingly good spirits and had an exploratory surgery to investigate the damage in her arm as it mostly just grazed the chest area. After a 1.5 hour surgery, she had a few arteries repaired, a bit of nerve damage, but all in all, she will make a full recovery.\\n\\nShe is doing extremely well now and we celebrated a wonderful family Christmas.\\nBeyond the physical wounds my mom has faced, the psychological wounds that my dad Matthew Creamer will have are sure to be great as it was he who accidentally discharged the gun.\\nPlease wrap all your support and prayers around both of them right now as more than ever they need the support of all their loved ones.\\n\\nPray for peace and healing.\\n\\nPaul Baldwin, one of our longtime family friends came up with the idea to run this [campaign](https://www.gofundme.com/phgbdztw) for support of them. I know we would greatly appreciate this message shared, and even if are unable to provide monetary support, please shower them with messages, calls, carrier pigeons, or whatever form of love you can shower on them.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>It all started as a normal Christmas Eve this year. Woke up, wrapped presents, spent time with my wife and daughter. On my way to my Grandmother's house for our usual Beef on 'Wek Christmas Eve dinner, things got a bit crazy.</p>\n<p>While attempting to explain firearm safety, my mom Roberta Creamer was accidentally struck with a bullet through her arm and across the front of her chest, thankfully avoiding any internal organs.</p>\n<p>She was care flighted to the hospital last night in amazingly good spirits and had an exploratory surgery to investigate the damage in her arm as it mostly just grazed the chest area. After a 1.5 hour surgery, she had a few arteries repaired, a bit of nerve damage, but all in all, she will make a full recovery.</p>\n<p>She is doing extremely well now and we celebrated a wonderful family Christmas.<br>\nBeyond the physical wounds my mom has faced, the psychological wounds that my dad Matthew Creamer will have are sure to be great as it was he who accidentally discharged the gun.<br>\nPlease wrap all your support and prayers around both of them right now as more than ever they need the support of all their loved ones.</p>\n<p>Pray for peace and healing.</p>\n<p>Paul Baldwin, one of our longtime family friends came up with the idea to run this <a href=\"https://www.gofundme.com/phgbdztw\">campaign</a> for support of them. I know we would greatly appreciate this message shared, and even if are unable to provide monetary support, please shower them with messages, calls, carrier pigeons, or whatever form of love you can shower on them.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"35","plaintext":"It all started as a normal Christmas Eve this year. Woke up, wrapped presents,\nspent time with my wife and daughter. On my way to my Grandmother's house for\nour usual Beef on 'Wek Christmas Eve dinner, things got a bit crazy.\n\nWhile attempting to explain firearm safety, my mom Roberta Creamer was\naccidentally struck with a bullet through her arm and across the front of her\nchest, thankfully avoiding any internal organs.\n\nShe was care flighted to the hospital last night in amazingly good spirits and\nhad an exploratory surgery to investigate the damage in her arm as it mostly\njust grazed the chest area. After a 1.5 hour surgery, she had a few arteries\nrepaired, a bit of nerve damage, but all in all, she will make a full recovery.\n\nShe is doing extremely well now and we celebrated a wonderful family Christmas.\nBeyond the physical wounds my mom has faced, the psychological wounds that my\ndad Matthew Creamer will have are sure to be great as it was he who accidentally\ndischarged the gun.\nPlease wrap all your support and prayers around both of them right now as more\nthan ever they need the support of all their loved ones.\n\nPray for peace and healing.\n\nPaul Baldwin, one of our longtime family friends came up with the idea to run\nthis campaign [https://www.gofundme.com/phgbdztw] for support of them. I know we\nwould greatly appreciate this message shared, and even if are unable to provide\nmonetary support, please shower them with messages, calls, carrier pigeons, or\nwhatever form of love you can shower on them.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-26 16:38:31","updated_at":"2015-12-26 16:42:04","published_at":"2015-12-26 16:42:04","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220564","uuid":"d4080461-e55e-4c32-b62d-7fe7e2289e1a","title":"WebPack Code splitting with ES6 and Babel 6","slug":"webpack-code-splitting-with-es6-and-babel-6","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Today is the day that finally, we decided it was time to make the move from Babel 5 to 6. It's been on our Technical Debt list for quite a while now.\\n\\nHere's what we had to do to get it working!\\n\\n### Update the package.json\\nFirst and foremost was to get all the latest and greatest from the Babel folks...\\n\\n![](http://d.pr/i/15CP5+)\\n\\n```prettyprint lang-js\\ndependencies: {\\n  \\\"babel-core\\\": \\\"^6.5.2\\\",\\n  \\\"babel-polyfill\\\": \\\"^6.3.14\\\",\\n  ...\\n},\\ndevDependencies: {\\n  \\\"babel-loader\\\": \\\"^6.2.3\\\",\\n  \\\"babel-plugin-transform-decorators-legacy\\\": \\\"^1.3.4\\\",\\n  \\\"babel-preset-es2015\\\": \\\"^6.5.0\\\",\\n  \\\"babel-preset-react\\\": \\\"^6.5.0\\\",\\n  ...\\n}\\n```\\n\\nThat's easy enough.\\n\\n### Update webpack.config.js\\nIn case you hadn't yet yeard, Babel 6 is quite a bit different in it's philosophy. What started out as 6to5 whose job it was to merely transpile ES6 to ES5, Babel has now evolved into a transpiler of all the things. Highly plugable, faster, and easier to configure, Babel 6 is a fantastic way to usher in a new era of JavaScript tooling.\\n\\nOk, so in order to get Babel 6 working with your webpack setup, you have to change the loader...\\n\\n```prettyprint lang-js\\ntest: /(\\\\.jsx?)$/,\\nloader: \\\"babel\\\",\\nexclude: /node_modules/,\\nquery: {\\n    \\\"plugins\\\": [\\\"transform-decorators-legacy\\\"],\\n    \\\"presets\\\": [\\\"es2015\\\", \\\"react\\\"]\\n}\\n```\\n\\nThat should get you most of the way there now.\\n\\n### A thing we ran in to\\nAs we were doing the upgrade, we ran into an interesting challenge. We use [Code Splitting](http://jonathancreamer.com/advanced-webpack-part-2-code-splitting/) to divide up our app into multiple smaller modules. As soon as the webpack and npm updates were in place, everything compiled just fine, however, when it came to the browser, something a bit strange happened.\\n\\nWe use ES6 modules for all our JavaScript code. More often than not, we use `export default`. I spent about an hour banging my head on the desk as the modules I was importing during my code splitting just were NOT working.\\n\\nTurns out Kent C. Dodds has a fantastic article on why this was happening... https://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0#.wrsu2x6c5\\n\\nThis is how we're splitting our code up...\\n\\n```prettypring lang-js\\nrequire([\\n  \\\"rizzo-next/src/components/things_to_do\\\",\\n  \\\"rizzo-next/src/components/sights\\\"\\n  /* ... */\\n], function(ThingsToDo, Sights, /*...*/) {\\n\\n  rizzo.renderComponent(Sights, \\\".sights\\\");\\n  rizzo.renderComponent(ThingsToDo, \\\".ttd\\\");\\n});\\n```\\n\\nAll that code worked just fine in Babel 5, but apparently, thanks to Kent's article, I learned that we were all apparently using ES6 modules incorrectly and Babel 6 for better or worse let us know that. Turns out though, the solution was actually not so bad...\\n\\n```prettyprint lang-js\\nrizzo.renderComponent(Sights.default, \\\".sights\\\");\\nrizzo.renderComponent(ThingsToDo.default, \\\".ttd\\\");\\n```\\n\\nThe only way to use CodeSplitting in WebPack v1 is with the require syntax. That should change in v2, but that's not out yet.\\n\\nTL;DR\\n\\nDon't mix ES6 and Require syntax in WebPack v1, but if you want to use Code Splitting, add `.default` to your imported modules.\\n\\n### npm link\\nAnother hang up we had was, we like to `npm link` to our main component repository `rizzo-next`. Well, apparently if you `npm link` things, it gets all screwy when it comes to where loaders load things from.\\n\\nThere are 2 ways to solve this problem...\\n\\n1. Install all the same tools in the other repository, aka all teh bablez in both places\\n2. Use `require.resolve` in the `query` options in WebPack\\n\\n```prettyprint lang-js\\nquery: {\\n  \\\"plugins\\\": [require.resolve(\\\"babel-plugin-transform-decorators-legacy\\\")],\\n  \\\"presets\\\": [require.resolve(\\\"babel-preset-es2015\\\")]\\n}\\n```\\n\\n\\n### Conclusion\\nAll in all, it wasn't a hugely painful upgrade. After all, we knew going into it that it was a major version uprade so there'd most likely be hiccups. After just a few hours, everything was transpiling as it was in Babel 5 and we were on our way!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Today is the day that finally, we decided it was time to make the move from Babel 5 to 6. It's been on our Technical Debt list for quite a while now.</p>\n<p>Here's what we had to do to get it working!</p>\n<h3 id=\"updatethepackagejson\">Update the package.json</h3>\n<p>First and foremost was to get all the latest and greatest from the Babel folks...</p>\n<p><img src=\"http://d.pr/i/15CP5+\" alt=\"\"></p>\n<pre><code class=\"language-prettyprint\">dependencies: {\n  &quot;babel-core&quot;: &quot;^6.5.2&quot;,\n  &quot;babel-polyfill&quot;: &quot;^6.3.14&quot;,\n  ...\n},\ndevDependencies: {\n  &quot;babel-loader&quot;: &quot;^6.2.3&quot;,\n  &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,\n  &quot;babel-preset-es2015&quot;: &quot;^6.5.0&quot;,\n  &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,\n  ...\n}\n</code></pre>\n<p>That's easy enough.</p>\n<h3 id=\"updatewebpackconfigjs\">Update webpack.config.js</h3>\n<p>In case you hadn't yet yeard, Babel 6 is quite a bit different in it's philosophy. What started out as 6to5 whose job it was to merely transpile ES6 to ES5, Babel has now evolved into a transpiler of all the things. Highly plugable, faster, and easier to configure, Babel 6 is a fantastic way to usher in a new era of JavaScript tooling.</p>\n<p>Ok, so in order to get Babel 6 working with your webpack setup, you have to change the loader...</p>\n<pre><code class=\"language-prettyprint\">test: /(\\.jsx?)$/,\nloader: &quot;babel&quot;,\nexclude: /node_modules/,\nquery: {\n    &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;],\n    &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;]\n}\n</code></pre>\n<p>That should get you most of the way there now.</p>\n<h3 id=\"athingweraninto\">A thing we ran in to</h3>\n<p>As we were doing the upgrade, we ran into an interesting challenge. We use <a href=\"http://jonathancreamer.com/advanced-webpack-part-2-code-splitting/\">Code Splitting</a> to divide up our app into multiple smaller modules. As soon as the webpack and npm updates were in place, everything compiled just fine, however, when it came to the browser, something a bit strange happened.</p>\n<p>We use ES6 modules for all our JavaScript code. More often than not, we use <code>export default</code>. I spent about an hour banging my head on the desk as the modules I was importing during my code splitting just were NOT working.</p>\n<p>Turns out Kent C. Dodds has a fantastic article on why this was happening... <a href=\"https://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0#.wrsu2x6c5\">https://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0#.wrsu2x6c5</a></p>\n<p>This is how we're splitting our code up...</p>\n<pre><code class=\"language-prettypring\">require([\n  &quot;rizzo-next/src/components/things_to_do&quot;,\n  &quot;rizzo-next/src/components/sights&quot;\n  /* ... */\n], function(ThingsToDo, Sights, /*...*/) {\n\n  rizzo.renderComponent(Sights, &quot;.sights&quot;);\n  rizzo.renderComponent(ThingsToDo, &quot;.ttd&quot;);\n});\n</code></pre>\n<p>All that code worked just fine in Babel 5, but apparently, thanks to Kent's article, I learned that we were all apparently using ES6 modules incorrectly and Babel 6 for better or worse let us know that. Turns out though, the solution was actually not so bad...</p>\n<pre><code class=\"language-prettyprint\">rizzo.renderComponent(Sights.default, &quot;.sights&quot;);\nrizzo.renderComponent(ThingsToDo.default, &quot;.ttd&quot;);\n</code></pre>\n<p>The only way to use CodeSplitting in WebPack v1 is with the require syntax. That should change in v2, but that's not out yet.</p>\n<p>TL;DR</p>\n<p>Don't mix ES6 and Require syntax in WebPack v1, but if you want to use Code Splitting, add <code>.default</code> to your imported modules.</p>\n<h3 id=\"npmlink\">npm link</h3>\n<p>Another hang up we had was, we like to <code>npm link</code> to our main component repository <code>rizzo-next</code>. Well, apparently if you <code>npm link</code> things, it gets all screwy when it comes to where loaders load things from.</p>\n<p>There are 2 ways to solve this problem...</p>\n<ol>\n<li>Install all the same tools in the other repository, aka all teh bablez in both places</li>\n<li>Use <code>require.resolve</code> in the <code>query</code> options in WebPack</li>\n</ol>\n<pre><code class=\"language-prettyprint\">query: {\n  &quot;plugins&quot;: [require.resolve(&quot;babel-plugin-transform-decorators-legacy&quot;)],\n  &quot;presets&quot;: [require.resolve(&quot;babel-preset-es2015&quot;)]\n}\n</code></pre>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>All in all, it wasn't a hugely painful upgrade. After all, we knew going into it that it was a major version uprade so there'd most likely be hiccups. After just a few hours, everything was transpiling as it was in Babel 5 and we were on our way!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"36","plaintext":"Today is the day that finally, we decided it was time to make the move from\nBabel 5 to 6. It's been on our Technical Debt list for quite a while now.\n\nHere's what we had to do to get it working!\n\nUpdate the package.json\nFirst and foremost was to get all the latest and greatest from the Babel\nfolks...\n\n\n\ndependencies: {\n  \"babel-core\": \"^6.5.2\",\n  \"babel-polyfill\": \"^6.3.14\",\n  ...\n},\ndevDependencies: {\n  \"babel-loader\": \"^6.2.3\",\n  \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n  \"babel-preset-es2015\": \"^6.5.0\",\n  \"babel-preset-react\": \"^6.5.0\",\n  ...\n}\n\n\nThat's easy enough.\n\nUpdate webpack.config.js\nIn case you hadn't yet yeard, Babel 6 is quite a bit different in it's\nphilosophy. What started out as 6to5 whose job it was to merely transpile ES6 to\nES5, Babel has now evolved into a transpiler of all the things. Highly plugable,\nfaster, and easier to configure, Babel 6 is a fantastic way to usher in a new\nera of JavaScript tooling.\n\nOk, so in order to get Babel 6 working with your webpack setup, you have to\nchange the loader...\n\ntest: /(\\.jsx?)$/,\nloader: \"babel\",\nexclude: /node_modules/,\nquery: {\n    \"plugins\": [\"transform-decorators-legacy\"],\n    \"presets\": [\"es2015\", \"react\"]\n}\n\n\nThat should get you most of the way there now.\n\nA thing we ran in to\nAs we were doing the upgrade, we ran into an interesting challenge. We use Code\nSplitting [http://jonathancreamer.com/advanced-webpack-part-2-code-splitting/] \nto divide up our app into multiple smaller modules. As soon as the webpack and\nnpm updates were in place, everything compiled just fine, however, when it came\nto the browser, something a bit strange happened.\n\nWe use ES6 modules for all our JavaScript code. More often than not, we use \nexport default. I spent about an hour banging my head on the desk as the modules\nI was importing during my code splitting just were NOT working.\n\nTurns out Kent C. Dodds has a fantastic article on why this was happening... \nhttps://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0#.wrsu2x6c5\n\nThis is how we're splitting our code up...\n\nrequire([\n  \"rizzo-next/src/components/things_to_do\",\n  \"rizzo-next/src/components/sights\"\n  /* ... */\n], function(ThingsToDo, Sights, /*...*/) {\n\n  rizzo.renderComponent(Sights, \".sights\");\n  rizzo.renderComponent(ThingsToDo, \".ttd\");\n});\n\n\nAll that code worked just fine in Babel 5, but apparently, thanks to Kent's\narticle, I learned that we were all apparently using ES6 modules incorrectly and\nBabel 6 for better or worse let us know that. Turns out though, the solution was\nactually not so bad...\n\nrizzo.renderComponent(Sights.default, \".sights\");\nrizzo.renderComponent(ThingsToDo.default, \".ttd\");\n\n\nThe only way to use CodeSplitting in WebPack v1 is with the require syntax. That\nshould change in v2, but that's not out yet.\n\nTL;DR\n\nDon't mix ES6 and Require syntax in WebPack v1, but if you want to use Code\nSplitting, add .default to your imported modules.\n\nnpm link\nAnother hang up we had was, we like to npm link to our main component repository \nrizzo-next. Well, apparently if you npm link things, it gets all screwy when it\ncomes to where loaders load things from.\n\nThere are 2 ways to solve this problem...\n\n 1. Install all the same tools in the other repository, aka all teh bablez in\n    both places\n 2. Use require.resolve in the query options in WebPack\n\nquery: {\n  \"plugins\": [require.resolve(\"babel-plugin-transform-decorators-legacy\")],\n  \"presets\": [require.resolve(\"babel-preset-es2015\")]\n}\n\n\nConclusion\nAll in all, it wasn't a hugely painful upgrade. After all, we knew going into it\nthat it was a major version uprade so there'd most likely be hiccups. After just\na few hours, everything was transpiling as it was in Babel 5 and we were on our\nway!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"WebPack Code splitting with ES6 and Babel 6","meta_description":"Moving from Babel 5 to Babel 6 for transpiling ES6 was easy, but not without a few struggles working with WebPack. Particularly around Code Splitting.","author_id":"1","created_at":"2016-02-25 16:53:34","updated_at":"2016-02-25 17:22:41","published_at":"2016-02-25 17:11:11","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220565","uuid":"ceb75361-90d2-4f34-a5a0-eb6440224b86","title":"Running a node + mongo app with Docker Compose","slug":"running-a-node-mongo-app-with-docker-compose","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"37","plaintext":null,"feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-06-01 15:15:56","updated_at":"2016-06-01 16:28:11","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220566","uuid":"71895df5-bdd5-46fa-a72c-87845cbc8cbb","title":"Advanced WebPack Part 3 - Creating a custom notifier plugin","slug":"advanced-webpack-part-3-creating-a-custom-notifier-plugin","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"At Lonely Planet we use the heck out of WebPack. It's an incredibly powerful tool.\\n\\nSometimes it takes a while though. I decided today that rather than watching the command line while it compiles to know when I'm good to refresh the browser, I'd just learn how to write a plugin to notify me about it.\\n\\nTurns out it's pretty darn simple.\\n\\n```prettyprint lang-js\\n// ./notifier.js\\n\\\"use strict\\\";\\n\\nclass Notifier {\\n  apply(compiler) {\\n    compiler.plugin(\\\"done\\\", (stats) => {\\n      const pkg = require(\\\"./package.json\\\");\\n      const notifier = require(\\\"node-notifier\\\");\\n      const time = ((stats.endTime - stats.startTime) / 1000).toFixed(2);\\n\\n      notifier.notify({\\n        title: pkg.name,\\n        message: `WebPack is done!\\\\n${stats.compilation.errors.length} errors in ${time}s`,\\n        contentImage: \\\"https://path/to/your/logo.png\\\",\\n      });\\n    });\\n  }\\n}\\n\\nmodule.exports = Notifier;\\n```\\n\\nAny `class` or `function` or even `object` with an `apply` function defined will automtically recieve an instance of the WebPack [Compiler](https://github.com/webpack/webpack/blob/master/lib/Compiler.js).\\n\\nYou can then hook into one of many different [lifecycle events](https://webpack.github.io/docs/plugins.html).\\n\\nThen in your `webpack.config.js`...\\n\\n```prettyprint lang-js\\nconst Notifier = require(\\\"./notifier\\\");\\n\\n// ...\\n{\\n  plugins: [new Notifier()]\\n}  \\n```\\n\\nThere's a whole lot of cool things you can do by creating your own WebPack plugins!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>At Lonely Planet we use the heck out of WebPack. It's an incredibly powerful tool.</p>\n<p>Sometimes it takes a while though. I decided today that rather than watching the command line while it compiles to know when I'm good to refresh the browser, I'd just learn how to write a plugin to notify me about it.</p>\n<p>Turns out it's pretty darn simple.</p>\n<pre><code class=\"language-prettyprint\">// ./notifier.js\n&quot;use strict&quot;;\n\nclass Notifier {\n  apply(compiler) {\n    compiler.plugin(&quot;done&quot;, (stats) =&gt; {\n      const pkg = require(&quot;./package.json&quot;);\n      const notifier = require(&quot;node-notifier&quot;);\n      const time = ((stats.endTime - stats.startTime) / 1000).toFixed(2);\n\n      notifier.notify({\n        title: pkg.name,\n        message: `WebPack is done!\\n${stats.compilation.errors.length} errors in ${time}s`,\n        contentImage: &quot;https://path/to/your/logo.png&quot;,\n      });\n    });\n  }\n}\n\nmodule.exports = Notifier;\n</code></pre>\n<p>Any <code>class</code> or <code>function</code> or even <code>object</code> with an <code>apply</code> function defined will automtically recieve an instance of the WebPack <a href=\"https://github.com/webpack/webpack/blob/master/lib/Compiler.js\">Compiler</a>.</p>\n<p>You can then hook into one of many different <a href=\"https://webpack.github.io/docs/plugins.html\">lifecycle events</a>.</p>\n<p>Then in your <code>webpack.config.js</code>...</p>\n<pre><code class=\"language-prettyprint\">const Notifier = require(&quot;./notifier&quot;);\n\n// ...\n{\n  plugins: [new Notifier()]\n}  \n</code></pre>\n<p>There's a whole lot of cool things you can do by creating your own WebPack plugins!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"38","plaintext":"At Lonely Planet we use the heck out of WebPack. It's an incredibly powerful\ntool.\n\nSometimes it takes a while though. I decided today that rather than watching the\ncommand line while it compiles to know when I'm good to refresh the browser, I'd\njust learn how to write a plugin to notify me about it.\n\nTurns out it's pretty darn simple.\n\n// ./notifier.js\n\"use strict\";\n\nclass Notifier {\n  apply(compiler) {\n    compiler.plugin(\"done\", (stats) => {\n      const pkg = require(\"./package.json\");\n      const notifier = require(\"node-notifier\");\n      const time = ((stats.endTime - stats.startTime) / 1000).toFixed(2);\n\n      notifier.notify({\n        title: pkg.name,\n        message: `WebPack is done!\\n${stats.compilation.errors.length} errors in ${time}s`,\n        contentImage: \"https://path/to/your/logo.png\",\n      });\n    });\n  }\n}\n\nmodule.exports = Notifier;\n\n\nAny class or function or even object with an apply function defined will\nautomtically recieve an instance of the WebPack Compiler\n[https://github.com/webpack/webpack/blob/master/lib/Compiler.js].\n\nYou can then hook into one of many different lifecycle events\n[https://webpack.github.io/docs/plugins.html].\n\nThen in your webpack.config.js...\n\nconst Notifier = require(\"./notifier\");\n\n// ...\n{\n  plugins: [new Notifier()]\n}  \n\n\nThere's a whole lot of cool things you can do by creating your own WebPack\nplugins!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Advanced WebPack Part 3 - Creating a custom notifier plugin","meta_description":"Learn how to create custom plugins for WebPack with an example of creating a notifier.","author_id":"1","created_at":"2016-06-08 16:39:48","updated_at":"2016-06-08 16:55:13","published_at":"2016-06-08 16:54:12","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220567","uuid":"698f76e2-e2dc-4b89-9889-a0a0a37fe2fa","title":"Universal Apps Lessons From the Trenches","slug":"untitled","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"name: intro\\nclass: center, middle\\n\\n# Universal Apps Lessons from the Trenches\\n\\n---\\nclass: center, middle\\n\\n# whoami\\n\\n### Jonathan Creamer\\n\\n<img src=\\\"images/family.jpg\\\" style=\\\"width: 80%;\\\" />\\n\\n---\\n\\n# whoami\\n\\n* Currently Senior Front End Engineer at [Lonely Planet](http://lonelyplanet.com)\\n* Past JavaScript Engineer appendTo\\n* Nashville, TN\\n\\n<img src=\\\"images/lonelyplanet_bw.png\\\" style=\\\"width: 10em\\\" />\\n\\n* Love JavaScript, tweet at [@jcreamer898](http://twitter.com/jcreamer898), blog at [jonathancreamer.com](http://jonathancreamer.com)\\n* [Microsoft MVP](https://mvp.microsoft.com/en-us/MyProfile/Preview?previewAs=Public)\\n\\n???\\n\\nclass: center, middle\\n\\n---\\n\\n### Agenga\\n\\n1. What is this Universal App thing all about?\\n1. How to get started\\n1. Back End\\n1. Front End\\n1. Testing\\n\\n???\\n\\n- Middleware for react router\\n- Can you even universal app bro?\\n- Unit test EVERY SINGLE state change\\n- Be careful passing anonymous functions\\n- Use Enzyme\\n- Memoize selectors to be sure you don’t change more state than you realize\\n- Passing in state through props is an anti-pattern\\n- Don't over use route params with react router because you can rightly couple logic to your business logic\\n- Use flow\\n\\n---\\nclass: center, middle\\n\\n### Universal React Apps\\n\\n![](images/jsall.jpg)\\n\\n---\\n\\n### Can you even universal app bro?\\n\\n* ~~Isomorphic~~\\n* One code base\\n* JavaScript everywhere\\n\\n???\\n\\nWho's heard of \\\"Isomorphic\\\"? Universal?\\nWho's actually USING it?\\n\\n---\\n\\n### Ask yourself...\\n\\n* DO YOU NEED IT?\\n* It's tough\\n* But, worth it...\\n\\n???\\n\\nIt's tough\\n\\n---\\n\\n### Progressive enhancement\\n\\n* SEO\\n* User feedback\\n* Not just about \\\"no javascript\\\"\\n\\n---\\n\\n### Progressive enhancement\\n\\n<img src=\\\"images/progressive.png\\\" style=\\\"width:60%\\\" />\\n\\n* < 2s\\n* Give users quick feedback\\n\\n---\\n\\n### SPA\\n\\n* Everybody loves a good spa\\n* Why not get a bit of both?\\n\\n---\\nclass: center, middle\\n\\n# Getting Started\\n\\n---\\n\\nclass: center, middle\\n\\n### When you google for React Universal Starters...\\n\\n![](images/loud.gif)\\n\\n---\\n\\n### Getting started\\n\\n* Lots and lots of starters\\n\\n--\\n* lots...\\n--\\n\\n* https://github.com/kriasoft/react-starter-kit\\n--\\n\\n* and lots...\\n--\\n\\n* https://github.com/davezuko/react-redux-starter-kit\\n--\\n\\n* and lots...\\n--\\n\\n* https://github.com/facebookincubator/create-react-app\\n--\\n\\n* and lots...\\n--\\n\\n* https://github.com/erikras/react-redux-universal-hot-example\\n--\\n\\n* ...\\n---\\nclass: center, middle\\n\\n### How it feels to look at React Starters...\\n\\n![](images/firehose.gif)\\n\\n---\\n\\n### Walk before you crawl\\n\\n* Learn the basics\\n* KISS (keep it simple stupid)\\n* Avoid unnecessary complexity\\n\\n???\\n\\nAt least at first\\n\\n---\\n\\n### Walk before you crawl\\n\\n<blockquote data-conversation=\\\"none\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Learn React in the right order: <a href=\\\"https://t.co/RhzRGzEIe0\\\">https://t.co/RhzRGzEIe0</a> <a href=\\\"https://t.co/uVdrYW2dbo\\\">pic.twitter.com/uVdrYW2dbo</a></p>&mdash; Dan Abramov (@dan_abramov) <a href=\\\"https://twitter.com/dan_abramov/status/703214489387327488\\\">February 26, 2016</a></blockquote>\\n\\n---\\nclass: center, middle\\n\\n# Frontend\\n\\n---\\n\\n### Start simple...ish\\n\\n* What do you \\\"need\\\"\\n* babel, babel-es2015\\n* react\\n* redux\\n* react-router\\n* react-router-redux\\n\\n---\\n\\n### Start with an App component\\n\\n```js\\nimport React from \\\"react\\\";\\nimport Helmet from \\\"react-helmet\\\";\\nimport { connect } from \\\"react-redux\\\";\\n\\nexport default class App extends React.Component {\\n  static propTypes = {\\n    title: React.PropTypes.string,\\n    children: React.PropTypes.node,\\n  };\\n\\n  render() {\\n    // ...\\n  }\\n}\\n\\nconst mapStateToProps = state => ({ title: state.title });\\nconst connected = connect(mapStateToProps)(App);\\nexport { connected };\\n```\\n\\n* Default export for testing, connected for render\\n\\n---\\n\\n### App Render\\n\\n```js\\nrender() {\\n  const { children, title } = this.props;\\n\\n  return (\\n    <div className=\\\"App\\\">\\n        <Helmet title={title} />\\n        {children}\\n    </div>\\n  );\\n}\\n```\\n\\n* Use React Helmet for meta\\n\\n---\\n\\n### Containers\\n\\n```js\\nexport default function Home() {\\n  return (\\n    <div className=\\\"Home\\\">\\n      // ...\\n    </div>\\n  );\\n}\\n```\\n\\n---\\n\\n### Routing\\n\\n```js\\nimport Home from \\\"./components/home\\\";\\nimport Users from \\\"./components/users\\\";\\n\\nconst routes = {\\n  path: \\\"\\\",\\n  component: AppComponent,\\n  childRoutes: [\\n    {\\n      path: \\\"/\\\",\\n      component: Home,\\n    },\\n    {\\n      path: `/users`,\\n      component: Users,\\n    },\\n  ],\\n};\\n\\nexport default routes;\\n```\\n\\n* Use a JS Object for routes\\n\\n---\\n\\n### Mount the App\\n\\n```js\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Router, browserHistory } from \\\"react-router\\\";\\nimport { syncHistoryWithStore } from \\\"react-router-redux\\\";\\nimport { Provider } from \\\"react-redux\\\";\\nimport configureStore from \\\"./store\\\";\\nimport routes from \\\"./routes\\\";\\n\\nexport default function configureClient(initialState, element = \\\"app\\\") {\\n  const store = configureStore(initialState);\\n  const history = syncHistoryWithStore(browserHistory, store);\\n\\n  ReactDOM.render(\\n    <Provider store={store}>\\n      <Router routes={routes} history={history} />\\n    </Provider>,\\n    document.getElementById(element)\\n  );\\n}\\n```\\n\\n* Export as a function\\n* syncHistoryWithStore adds history to state\\n\\n---\\nclass: center, middle\\n\\n# Backend\\n\\n---\\n\\n### Super basic backend\\n\\n```js\\nimport { renderToString } from \\\"react-dom/server\\\";\\nimport App from \\\"../public/javascripts/components/app\\\";\\nimport React from \\\"react\\\";\\n\\n/* GET home page. */\\nrouter.get(\\\"/\\\", function(req, res) {\\n  // This is the magic sauce\\n  const markup = renderToString(<App />);\\n\\n  res.render(\\\"index\\\", {\\n    title: \\\"Express\\\",\\n    markup\\n  });\\n});\\n```\\n\\n* Express? Hapi? ...?\\n* ReactDOM/renderToString\\n\\n---\\n\\n### State\\n\\n```js\\nimport { createStore, applyMiddleware } from \\\"redux\\\";\\nimport App from \\\"./containers/app\\\";\\nimport reducers from \\\"./reducers\\\";\\n\\nrouter.get(\\\"/\\\", function(req, res) {\\n  // ...\\n  const initialState = {\\n    hello: \\\"world\\\"\\n  };\\n\\n  const store = createStore(\\n    reducers,\\n    initialState,\\n    applyMiddleware(/*...*/)\\n  );\\n\\n  const markup = renderToString(<App />);\\n\\n  res.render(\\\"index\\\", {\\n    title: \\\"Express\\\",\\n    markup,\\n    initialState\\n  });\\n});\\n```\\n\\n* Setup initial state\\n\\n---\\n\\n### state\\n\\n```html\\n<script type=\\\"text/javascript\\\">\\n  window.__initialState = {{{initialState}}};\\n</script>\\n```\\n\\n* HBS view engine, or even JSX\\n\\n---\\nclass: center, middle\\n\\n# Testing\\n\\n---\\n\\n# Thanks!\\n\\n![](images/balmer.gif)\\n\\n### [@jcreamer898](http://twitter.com/jcreamer898)\\n### [jonathancreamer.com](http://jonathancreamer.com)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>name: intro<br>\nclass: center, middle</p>\n<h1 id=\"universalappslessonsfromthetrenches\">Universal Apps Lessons from the Trenches</h1>\n<hr>\n<p>class: center, middle</p>\n<h1 id=\"whoami\">whoami</h1>\n<h3 id=\"jonathancreamer\">Jonathan Creamer</h3>\n<img src=\"images/family.jpg\" style=\"width: 80%;\" />\n<hr>\n<h1 id=\"whoami\">whoami</h1>\n<ul>\n<li>Currently Senior Front End Engineer at <a href=\"http://lonelyplanet.com\">Lonely Planet</a></li>\n<li>Past JavaScript Engineer appendTo</li>\n<li>Nashville, TN</li>\n</ul>\n<img src=\"images/lonelyplanet_bw.png\" style=\"width: 10em\" />\n<ul>\n<li>Love JavaScript, tweet at <a href=\"http://twitter.com/jcreamer898\">@jcreamer898</a>, blog at <a href=\"http://jonathancreamer.com\">jonathancreamer.com</a></li>\n<li><a href=\"https://mvp.microsoft.com/en-us/MyProfile/Preview?previewAs=Public\">Microsoft MVP</a></li>\n</ul>\n<p>???</p>\n<p>class: center, middle</p>\n<hr>\n<h3 id=\"agenga\">Agenga</h3>\n<ol>\n<li>What is this Universal App thing all about?</li>\n<li>How to get started</li>\n<li>Back End</li>\n<li>Front End</li>\n<li>Testing</li>\n</ol>\n<p>???</p>\n<ul>\n<li>Middleware for react router</li>\n<li>Can you even universal app bro?</li>\n<li>Unit test EVERY SINGLE state change</li>\n<li>Be careful passing anonymous functions</li>\n<li>Use Enzyme</li>\n<li>Memoize selectors to be sure you don’t change more state than you realize</li>\n<li>Passing in state through props is an anti-pattern</li>\n<li>Don't over use route params with react router because you can rightly couple logic to your business logic</li>\n<li>Use flow</li>\n</ul>\n<hr>\n<p>class: center, middle</p>\n<h3 id=\"universalreactapps\">Universal React Apps</h3>\n<p><img src=\"images/jsall.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"canyouevenuniversalappbro\">Can you even universal app bro?</h3>\n<ul>\n<li><s>Isomorphic</s></li>\n<li>One code base</li>\n<li>JavaScript everywhere</li>\n</ul>\n<p>???</p>\n<p>Who's heard of &quot;Isomorphic&quot;? Universal?<br>\nWho's actually USING it?</p>\n<hr>\n<h3 id=\"askyourself\">Ask yourself...</h3>\n<ul>\n<li>DO YOU NEED IT?</li>\n<li>It's tough</li>\n<li>But, worth it...</li>\n</ul>\n<p>???</p>\n<p>It's tough</p>\n<hr>\n<h3 id=\"progressiveenhancement\">Progressive enhancement</h3>\n<ul>\n<li>SEO</li>\n<li>User feedback</li>\n<li>Not just about &quot;no javascript&quot;</li>\n</ul>\n<hr>\n<h3 id=\"progressiveenhancement\">Progressive enhancement</h3>\n<img src=\"images/progressive.png\" style=\"width:60%\" />\n<ul>\n<li>&lt; 2s</li>\n<li>Give users quick feedback</li>\n</ul>\n<hr>\n<h3 id=\"spa\">SPA</h3>\n<ul>\n<li>Everybody loves a good spa</li>\n<li>Why not get a bit of both?</li>\n</ul>\n<hr>\n<p>class: center, middle</p>\n<h1 id=\"gettingstarted\">Getting Started</h1>\n<hr>\n<p>class: center, middle</p>\n<h3 id=\"whenyougoogleforreactuniversalstarters\">When you google for React Universal Starters...</h3>\n<p><img src=\"images/loud.gif\" alt=\"\"></p>\n<hr>\n<h3 id=\"gettingstarted\">Getting started</h3>\n<ul>\n<li>Lots and lots of starters</li>\n</ul>\n<p>--</p>\n<ul>\n<li>\n<p>lots...<br>\n--</p>\n</li>\n<li>\n<p><a href=\"https://github.com/kriasoft/react-starter-kit\">https://github.com/kriasoft/react-starter-kit</a><br>\n--</p>\n</li>\n<li>\n<p>and lots...<br>\n--</p>\n</li>\n<li>\n<p><a href=\"https://github.com/davezuko/react-redux-starter-kit\">https://github.com/davezuko/react-redux-starter-kit</a><br>\n--</p>\n</li>\n<li>\n<p>and lots...<br>\n--</p>\n</li>\n<li>\n<p><a href=\"https://github.com/facebookincubator/create-react-app\">https://github.com/facebookincubator/create-react-app</a><br>\n--</p>\n</li>\n<li>\n<p>and lots...<br>\n--</p>\n</li>\n<li>\n<p><a href=\"https://github.com/erikras/react-redux-universal-hot-example\">https://github.com/erikras/react-redux-universal-hot-example</a><br>\n--</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n<hr>\n<p>class: center, middle</p>\n<h3 id=\"howitfeelstolookatreactstarters\">How it feels to look at React Starters...</h3>\n<p><img src=\"images/firehose.gif\" alt=\"\"></p>\n<hr>\n<h3 id=\"walkbeforeyoucrawl\">Walk before you crawl</h3>\n<ul>\n<li>Learn the basics</li>\n<li>KISS (keep it simple stupid)</li>\n<li>Avoid unnecessary complexity</li>\n</ul>\n<p>???</p>\n<p>At least at first</p>\n<hr>\n<h3 id=\"walkbeforeyoucrawl\">Walk before you crawl</h3>\n<blockquote data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Learn React in the right order: <a href=\"https://t.co/RhzRGzEIe0\">https://t.co/RhzRGzEIe0</a> <a href=\"https://t.co/uVdrYW2dbo\">pic.twitter.com/uVdrYW2dbo</a></p>&mdash; Dan Abramov (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/703214489387327488\">February 26, 2016</a></blockquote>\n<hr>\n<p>class: center, middle</p>\n<h1 id=\"frontend\">Frontend</h1>\n<hr>\n<h3 id=\"startsimpleish\">Start simple...ish</h3>\n<ul>\n<li>What do you &quot;need&quot;</li>\n<li>babel, babel-es2015</li>\n<li>react</li>\n<li>redux</li>\n<li>react-router</li>\n<li>react-router-redux</li>\n</ul>\n<hr>\n<h3 id=\"startwithanappcomponent\">Start with an App component</h3>\n<pre><code class=\"language-js\">import React from &quot;react&quot;;\nimport Helmet from &quot;react-helmet&quot;;\nimport { connect } from &quot;react-redux&quot;;\n\nexport default class App extends React.Component {\n  static propTypes = {\n    title: React.PropTypes.string,\n    children: React.PropTypes.node,\n  };\n\n  render() {\n    // ...\n  }\n}\n\nconst mapStateToProps = state =&gt; ({ title: state.title });\nconst connected = connect(mapStateToProps)(App);\nexport { connected };\n</code></pre>\n<ul>\n<li>Default export for testing, connected for render</li>\n</ul>\n<hr>\n<h3 id=\"apprender\">App Render</h3>\n<pre><code class=\"language-js\">render() {\n  const { children, title } = this.props;\n\n  return (\n    &lt;div className=&quot;App&quot;&gt;\n        &lt;Helmet title={title} /&gt;\n        {children}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<ul>\n<li>Use React Helmet for meta</li>\n</ul>\n<hr>\n<h3 id=\"containers\">Containers</h3>\n<pre><code class=\"language-js\">export default function Home() {\n  return (\n    &lt;div className=&quot;Home&quot;&gt;\n      // ...\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<hr>\n<h3 id=\"routing\">Routing</h3>\n<pre><code class=\"language-js\">import Home from &quot;./components/home&quot;;\nimport Users from &quot;./components/users&quot;;\n\nconst routes = {\n  path: &quot;&quot;,\n  component: AppComponent,\n  childRoutes: [\n    {\n      path: &quot;/&quot;,\n      component: Home,\n    },\n    {\n      path: `/users`,\n      component: Users,\n    },\n  ],\n};\n\nexport default routes;\n</code></pre>\n<ul>\n<li>Use a JS Object for routes</li>\n</ul>\n<hr>\n<h3 id=\"mounttheapp\">Mount the App</h3>\n<pre><code class=\"language-js\">import ReactDOM from &quot;react-dom&quot;;\nimport { Router, browserHistory } from &quot;react-router&quot;;\nimport { syncHistoryWithStore } from &quot;react-router-redux&quot;;\nimport { Provider } from &quot;react-redux&quot;;\nimport configureStore from &quot;./store&quot;;\nimport routes from &quot;./routes&quot;;\n\nexport default function configureClient(initialState, element = &quot;app&quot;) {\n  const store = configureStore(initialState);\n  const history = syncHistoryWithStore(browserHistory, store);\n\n  ReactDOM.render(\n    &lt;Provider store={store}&gt;\n      &lt;Router routes={routes} history={history} /&gt;\n    &lt;/Provider&gt;,\n    document.getElementById(element)\n  );\n}\n</code></pre>\n<ul>\n<li>Export as a function</li>\n<li>syncHistoryWithStore adds history to state</li>\n</ul>\n<hr>\n<p>class: center, middle</p>\n<h1 id=\"backend\">Backend</h1>\n<hr>\n<h3 id=\"superbasicbackend\">Super basic backend</h3>\n<pre><code class=\"language-js\">import { renderToString } from &quot;react-dom/server&quot;;\nimport App from &quot;../public/javascripts/components/app&quot;;\nimport React from &quot;react&quot;;\n\n/* GET home page. */\nrouter.get(&quot;/&quot;, function(req, res) {\n  // This is the magic sauce\n  const markup = renderToString(&lt;App /&gt;);\n\n  res.render(&quot;index&quot;, {\n    title: &quot;Express&quot;,\n    markup\n  });\n});\n</code></pre>\n<ul>\n<li>Express? Hapi? ...?</li>\n<li>ReactDOM/renderToString</li>\n</ul>\n<hr>\n<h3 id=\"state\">State</h3>\n<pre><code class=\"language-js\">import { createStore, applyMiddleware } from &quot;redux&quot;;\nimport App from &quot;./containers/app&quot;;\nimport reducers from &quot;./reducers&quot;;\n\nrouter.get(&quot;/&quot;, function(req, res) {\n  // ...\n  const initialState = {\n    hello: &quot;world&quot;\n  };\n\n  const store = createStore(\n    reducers,\n    initialState,\n    applyMiddleware(/*...*/)\n  );\n\n  const markup = renderToString(&lt;App /&gt;);\n\n  res.render(&quot;index&quot;, {\n    title: &quot;Express&quot;,\n    markup,\n    initialState\n  });\n});\n</code></pre>\n<ul>\n<li>Setup initial state</li>\n</ul>\n<hr>\n<h3 id=\"state\">state</h3>\n<pre><code class=\"language-html\">&lt;script type=&quot;text/javascript&quot;&gt;\n  window.__initialState = {{{initialState}}};\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>HBS view engine, or even JSX</li>\n</ul>\n<hr>\n<p>class: center, middle</p>\n<h1 id=\"testing\">Testing</h1>\n<hr>\n<h1 id=\"thanks\">Thanks!</h1>\n<p><img src=\"images/balmer.gif\" alt=\"\"></p>\n<h3 id=\"jcreamer898\"><a href=\"http://twitter.com/jcreamer898\">@jcreamer898</a></h3>\n<h3 id=\"jonathancreamercom\"><a href=\"http://jonathancreamer.com\">jonathancreamer.com</a></h3>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"39","plaintext":"name: intro\nclass: center, middle\n\nUniversal Apps Lessons from the Trenches\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nwhoami\nJonathan Creamer\n\n--------------------------------------------------------------------------------\n\nwhoami\n * Currently Senior Front End Engineer at Lonely Planet\n   [http://lonelyplanet.com]\n * Past JavaScript Engineer appendTo\n * Nashville, TN\n\n * Love JavaScript, tweet at @jcreamer898 [http://twitter.com/jcreamer898], blog\n   at jonathancreamer.com [http://jonathancreamer.com]\n * Microsoft MVP\n   [https://mvp.microsoft.com/en-us/MyProfile/Preview?previewAs=Public]\n\n???\n\nclass: center, middle\n\n\n--------------------------------------------------------------------------------\n\nAgenga\n 1. What is this Universal App thing all about?\n 2. How to get started\n 3. Back End\n 4. Front End\n 5. Testing\n\n???\n\n * Middleware for react router\n * Can you even universal app bro?\n * Unit test EVERY SINGLE state change\n * Be careful passing anonymous functions\n * Use Enzyme\n * Memoize selectors to be sure you don’t change more state than you realize\n * Passing in state through props is an anti-pattern\n * Don't over use route params with react router because you can rightly couple\n   logic to your business logic\n * Use flow\n\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nUniversal React Apps\n\n\n\n--------------------------------------------------------------------------------\n\nCan you even universal app bro?\n * Isomorphic\n * One code base\n * JavaScript everywhere\n\n???\n\nWho's heard of \"Isomorphic\"? Universal?\nWho's actually USING it?\n\n\n--------------------------------------------------------------------------------\n\nAsk yourself...\n * DO YOU NEED IT?\n * It's tough\n * But, worth it...\n\n???\n\nIt's tough\n\n\n--------------------------------------------------------------------------------\n\nProgressive enhancement\n * SEO\n * User feedback\n * Not just about \"no javascript\"\n\n\n--------------------------------------------------------------------------------\n\nProgressive enhancement\n * < 2s\n * Give users quick feedback\n\n\n--------------------------------------------------------------------------------\n\nSPA\n * Everybody loves a good spa\n * Why not get a bit of both?\n\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nGetting Started\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nWhen you google for React Universal Starters...\n\n\n\n--------------------------------------------------------------------------------\n\nGetting started\n * Lots and lots of starters\n\n--\n\n * lots...\n   --\n   \n   \n * https://github.com/kriasoft/react-starter-kit\n   --\n   \n   \n * and lots...\n   --\n   \n   \n * https://github.com/davezuko/react-redux-starter-kit\n   --\n   \n   \n * and lots...\n   --\n   \n   \n * https://github.com/facebookincubator/create-react-app\n   --\n   \n   \n * and lots...\n   --\n   \n   \n * https://github.com/erikras/react-redux-universal-hot-example\n   --\n   \n   \n * ...\n   \n   \n\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nHow it feels to look at React Starters...\n\n\n\n--------------------------------------------------------------------------------\n\nWalk before you crawl\n * Learn the basics\n * KISS (keep it simple stupid)\n * Avoid unnecessary complexity\n\n???\n\nAt least at first\n\n\n--------------------------------------------------------------------------------\n\nWalk before you crawl\n> Learn React in the right order: https://t.co/RhzRGzEIe0 \npic.twitter.com/uVdrYW2dbo [https://t.co/uVdrYW2dbo]\n\n— Dan Abramov (@dan_abramov) February 26, 2016\n[https://twitter.com/dan_abramov/status/703214489387327488]\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nFrontend\n\n--------------------------------------------------------------------------------\n\nStart simple...ish\n * What do you \"need\"\n * babel, babel-es2015\n * react\n * redux\n * react-router\n * react-router-redux\n\n\n--------------------------------------------------------------------------------\n\nStart with an App component\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { connect } from \"react-redux\";\n\nexport default class App extends React.Component {\n  static propTypes = {\n    title: React.PropTypes.string,\n    children: React.PropTypes.node,\n  };\n\n  render() {\n    // ...\n  }\n}\n\nconst mapStateToProps = state => ({ title: state.title });\nconst connected = connect(mapStateToProps)(App);\nexport { connected };\n\n\n * Default export for testing, connected for render\n\n\n--------------------------------------------------------------------------------\n\nApp Render\nrender() {\n  const { children, title } = this.props;\n\n  return (\n    <div className=\"App\">\n        <Helmet title={title} />\n        {children}\n    </div>\n  );\n}\n\n\n * Use React Helmet for meta\n\n\n--------------------------------------------------------------------------------\n\nContainers\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      // ...\n    </div>\n  );\n}\n\n\n\n--------------------------------------------------------------------------------\n\nRouting\nimport Home from \"./components/home\";\nimport Users from \"./components/users\";\n\nconst routes = {\n  path: \"\",\n  component: AppComponent,\n  childRoutes: [\n    {\n      path: \"/\",\n      component: Home,\n    },\n    {\n      path: `/users`,\n      component: Users,\n    },\n  ],\n};\n\nexport default routes;\n\n\n * Use a JS Object for routes\n\n\n--------------------------------------------------------------------------------\n\nMount the App\nimport ReactDOM from \"react-dom\";\nimport { Router, browserHistory } from \"react-router\";\nimport { syncHistoryWithStore } from \"react-router-redux\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport routes from \"./routes\";\n\nexport default function configureClient(initialState, element = \"app\") {\n  const store = configureStore(initialState);\n  const history = syncHistoryWithStore(browserHistory, store);\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router routes={routes} history={history} />\n    </Provider>,\n    document.getElementById(element)\n  );\n}\n\n\n * Export as a function\n * syncHistoryWithStore adds history to state\n\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nBackend\n\n--------------------------------------------------------------------------------\n\nSuper basic backend\nimport { renderToString } from \"react-dom/server\";\nimport App from \"../public/javascripts/components/app\";\nimport React from \"react\";\n\n/* GET home page. */\nrouter.get(\"/\", function(req, res) {\n  // This is the magic sauce\n  const markup = renderToString(<App />);\n\n  res.render(\"index\", {\n    title: \"Express\",\n    markup\n  });\n});\n\n\n * Express? Hapi? ...?\n * ReactDOM/renderToString\n\n\n--------------------------------------------------------------------------------\n\nState\nimport { createStore, applyMiddleware } from \"redux\";\nimport App from \"./containers/app\";\nimport reducers from \"./reducers\";\n\nrouter.get(\"/\", function(req, res) {\n  // ...\n  const initialState = {\n    hello: \"world\"\n  };\n\n  const store = createStore(\n    reducers,\n    initialState,\n    applyMiddleware(/*...*/)\n  );\n\n  const markup = renderToString(<App />);\n\n  res.render(\"index\", {\n    title: \"Express\",\n    markup,\n    initialState\n  });\n});\n\n\n * Setup initial state\n\n\n--------------------------------------------------------------------------------\n\nstate\n<script type=\"text/javascript\">\n  window.__initialState = {{{initialState}}};\n</script>\n\n\n * HBS view engine, or even JSX\n\n\n--------------------------------------------------------------------------------\n\nclass: center, middle\n\nTesting\n\n--------------------------------------------------------------------------------\n\nThanks!\n\n\n@jcreamer898 [http://twitter.com/jcreamer898]\njonathancreamer.com [http://jonathancreamer.com]","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-11-03 03:44:57","updated_at":"2016-11-03 03:45:19","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220568","uuid":"76fa2457-2c8c-4e73-9cb1-7a1597217854","title":"Creating a simple express REST API with Docker, Node.js, and Postgres","slug":"creating-a-simple-express-rest-api-with-docker-node-js-and-postgres","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"40","plaintext":null,"feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-15 03:07:52","updated_at":"2016-12-15 03:12:05","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220569","uuid":"7865a259-203b-4776-8651-85653155f93c","title":"How to explain JavaScript to your parents","slug":"how-to-explain-javascript-to-your-parents","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"As a JavaScript developer, and someone who spends a lot of time in the online \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>As a JavaScript developer, and someone who spends a lot of time in the online</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"41","plaintext":"As a JavaScript developer, and someone who spends a lot of time in the online","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-02 00:43:58","updated_at":"2017-01-02 00:44:21","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056a","uuid":"92f4f7fc-1650-4a67-918b-3d62cbc38195","title":"Demystifying the React Lifecycle Events","slug":"demystifying-the-react-lifecycle-events","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"React has a relatively small API surface when you compare it to things like Ember and Angular. However, there's still a few semi-confusing things in there. One of the things I struggled with early on was understanding how and when to use each of the lifecycle hooks available in a React component.\\n\\nIf you're new to React, you may be thinking... \\n\\n![](/content/images/2017/01/dafuqreact.jpg)\\n\\nWell... \\n\\n![](/content/images/2017/01/lemmesplain.gif)\\n\\n## Lifecycle Events\\nBelow is the list of all of them...\\n\\n* `constructor`\\n* `componentWillMount`\\n* `componentDidMount`\\n* `componentWillReceiveProps`\\n* `shouldComponentUpdate`\\n* `componentWillUpdate`\\n* `componentDidUpdate`\\n* `componentWillUnmount`\\n\\nTLDR;\\n\\n* `constructor`\\n  * Only called once\\n  * Very first thing a class does before it's usable, set some stuff basic stuff up here\\n* `componentWillMount`\\n  * Only called once **before** this component gets assigned to a DOM element\\n  * Use to do any calculations you may need to do right before `render` gets called\\n* `componentDidMount`\\n  * Nicely done, you're component is now in the DOM! \\n  * Here you can attach all your jQuery plugins (trollface)\\n  * Called only on the client side if you're doing server rendering\\n* `componentWillReceiveProps`\\n  * Ok, so, *something* caused either the state or props to change\\n  * Compare old stuff to new stuff to decide if you need to make any additional state changes in here\\n* `shouldComponentUpdate`\\n  * Hmm, I see my props or state changed, should I re-render? kthnkxbye\\n* `componentWillUpdate`\\n  * Hells yeah, I'm getting some updates, but I haven't re ndered quite yet!\\n* `componentDidUpdate`\\n* `componentWillUnmount`\\n\\n## Deep dive...\\n\\n### `constructor`\\nWhen creating a React component via an es2015 `class`, you extend the `React.Component` class...\\n\\n```prettyprint lang-js\\nclass MyComponent extends React.Component {\\n  render() {\\n    //...\\n  }\\n}\\n```\\n\\nUnder the covers, this class has a `constructor` property that fires when the instance of this component gets created.\\n\\nIf you want, you can \\\"[override](https://en.wikipedia.org/wiki/Method_overriding)\\\" the constructor. This allows you to do some basic setup before anything else happens in this component. A couple of important notes here...\\n\\n**Do NOT forget to call `super`!**\\n\\nWhy may you ask? Well, if you don't, the stuff that React does behind the curtains to get your Component ready for primetime won't work, so it's super important to call `super`. (See what I did there).\\n\\n```prettyprint lang-js\\nclass MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n}\\n```\\n\\nIn here you'll often see basic setup things like...\\n\\n```\\n  this.state = {\\n    isOpened: false,\\n  };\\n\\n  this.onClick = this.onClick.bind(this);\\n```\\n\\nLittle more than that type of setup should be done in the constructor.\\n\\n### `componentWillMount`\\nAt this point in the lifecycle, React will have your `props`, and `state` ready for you. In here is where you'll usually check and see if you need to retrieve any data or do any kind of re-jiggering of your state now that your props are available.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>React has a relatively small API surface when you compare it to things like Ember and Angular. However, there's still a few semi-confusing things in there. One of the things I struggled with early on was understanding how and when to use each of the lifecycle hooks available in a React component.</p>\n<p>If you're new to React, you may be thinking...</p>\n<p><img src=\"/content/images/2017/01/dafuqreact.jpg\" alt=\"\"></p>\n<p>Well...</p>\n<p><img src=\"/content/images/2017/01/lemmesplain.gif\" alt=\"\"></p>\n<h2 id=\"lifecycleevents\">Lifecycle Events</h2>\n<p>Below is the list of all of them...</p>\n<ul>\n<li><code>constructor</code></li>\n<li><code>componentWillMount</code></li>\n<li><code>componentDidMount</code></li>\n<li><code>componentWillReceiveProps</code></li>\n<li><code>shouldComponentUpdate</code></li>\n<li><code>componentWillUpdate</code></li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code></li>\n</ul>\n<p>TLDR;</p>\n<ul>\n<li><code>constructor</code>\n<ul>\n<li>Only called once</li>\n<li>Very first thing a class does before it's usable, set some stuff basic stuff up here</li>\n</ul>\n</li>\n<li><code>componentWillMount</code>\n<ul>\n<li>Only called once <strong>before</strong> this component gets assigned to a DOM element</li>\n<li>Use to do any calculations you may need to do right before <code>render</code> gets called</li>\n</ul>\n</li>\n<li><code>componentDidMount</code>\n<ul>\n<li>Nicely done, you're component is now in the DOM!</li>\n<li>Here you can attach all your jQuery plugins (trollface)</li>\n<li>Called only on the client side if you're doing server rendering</li>\n</ul>\n</li>\n<li><code>componentWillReceiveProps</code>\n<ul>\n<li>Ok, so, <em>something</em> caused either the state or props to change</li>\n<li>Compare old stuff to new stuff to decide if you need to make any additional state changes in here</li>\n</ul>\n</li>\n<li><code>shouldComponentUpdate</code>\n<ul>\n<li>Hmm, I see my props or state changed, should I re-render? kthnkxbye</li>\n</ul>\n</li>\n<li><code>componentWillUpdate</code>\n<ul>\n<li>Hells yeah, I'm getting some updates, but I haven't re ndered quite yet!</li>\n</ul>\n</li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code></li>\n</ul>\n<h2 id=\"deepdive\">Deep dive...</h2>\n<h3 id=\"constructorfunction Object() { [native code] }1\"><code>constructor</code></h3>\n<p>When creating a React component via an es2015 <code>class</code>, you extend the <code>React.Component</code> class...</p>\n<pre><code class=\"language-prettyprint\">class MyComponent extends React.Component {\n  render() {\n    //...\n  }\n}\n</code></pre>\n<p>Under the covers, this class has a <code>constructor</code> property that fires when the instance of this component gets created.</p>\n<p>If you want, you can &quot;<a href=\"https://en.wikipedia.org/wiki/Method_overriding\">override</a>&quot; the constructor. This allows you to do some basic setup before anything else happens in this component. A couple of important notes here...</p>\n<p><strong>Do NOT forget to call <code>super</code>!</strong></p>\n<p>Why may you ask? Well, if you don't, the stuff that React does behind the curtains to get your Component ready for primetime won't work, so it's super important to call <code>super</code>. (See what I did there).</p>\n<pre><code class=\"language-prettyprint\">class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n}\n</code></pre>\n<p>In here you'll often see basic setup things like...</p>\n<pre><code>  this.state = {\n    isOpened: false,\n  };\n\n  this.onClick = this.onClick.bind(this);\n</code></pre>\n<p>Little more than that type of setup should be done in the constructor.</p>\n<h3 id=\"componentwillmount\"><code>componentWillMount</code></h3>\n<p>At this point in the lifecycle, React will have your <code>props</code>, and <code>state</code> ready for you. In here is where you'll usually check and see if you need to retrieve any data or do any kind of re-jiggering of your state now that your props are available.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"42","plaintext":"React has a relatively small API surface when you compare it to things like\nEmber and Angular. However, there's still a few semi-confusing things in there.\nOne of the things I struggled with early on was understanding how and when to\nuse each of the lifecycle hooks available in a React component.\n\nIf you're new to React, you may be thinking...\n\n\n\nWell...\n\n\n\nLifecycle Events\nBelow is the list of all of them...\n\n * constructor\n * componentWillMount\n * componentDidMount\n * componentWillReceiveProps\n * shouldComponentUpdate\n * componentWillUpdate\n * componentDidUpdate\n * componentWillUnmount\n\nTLDR;\n\n * constructor * Only called once\n    * Very first thing a class does before it's usable, set some\n      stuff basic stuff up here\n   \n   \n * componentWillMount * Only called once before this component gets assigned to a DOM element\n    * Use to do any calculations you may need to do right\n      before render gets called\n   \n   \n * componentDidMount * Nicely done, you're component is now in the DOM!\n    * Here you can attach all your jQuery plugins (trollface)\n    * Called only on the client side if you're doing server\n      rendering\n   \n   \n * componentWillReceiveProps * Ok, so, something caused either the state or props to change\n    * Compare old stuff to new stuff to decide if you\n      need to make any additional state changes in here\n   \n   \n * shouldComponentUpdate * Hmm, I see my props or state changed, should I\n      re-render? kthnkxbye\n   \n   \n * componentWillUpdate * Hells yeah, I'm getting some updates, but I haven't re\n      ndered quite yet!\n   \n   \n * componentDidUpdate\n * componentWillUnmount\n\nDeep dive...\nconstructor\nWhen creating a React component via an es2015 class, you extend the \nReact.Component class...\n\nclass MyComponent extends React.Component {\n  render() {\n    //...\n  }\n}\n\n\nUnder the covers, this class has a constructor property that fires when the\ninstance of this component gets created.\n\nIf you want, you can \"override [https://en.wikipedia.org/wiki/Method_overriding]\n\" the constructor. This allows you to do some basic setup before anything else\nhappens in this component. A couple of important notes here...\n\nDo NOT forget to call super!\n\nWhy may you ask? Well, if you don't, the stuff that React does behind the\ncurtains to get your Component ready for primetime won't work, so it's super\nimportant to call super. (See what I did there).\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n}\n\n\nIn here you'll often see basic setup things like...\n\n  this.state = {\n    isOpened: false,\n  };\n\n  this.onClick = this.onClick.bind(this);\n\n\nLittle more than that type of setup should be done in the constructor.\n\ncomponentWillMount\nAt this point in the lifecycle, React will have your props, and state ready for\nyou. In here is where you'll usually check and see if you need to retrieve any\ndata or do any kind of re-jiggering of your state now that your props are\navailable.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-05 00:16:51","updated_at":"2017-04-26 02:46:11","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056b","uuid":"4b8e7ba3-75c5-4971-b7d4-0e6b16b70c50","title":"How to quickly edit your hosts file on macOS","slug":"how-to-quickly-edit-your-hosts-file-on-macos","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I had a friend ask me the other day how to edit his hosts file for local development. It's something I take for granted because I'm so used to doing it, but for him it was something he hadn't done before. # Use arrow keys to move to what you want. I decided I'd throw together a quick 60 second video on how to do it...\\n\\n<video src=\\\"http://d.pr/v/ozML+\\\" style=\\\"width:100%\\\" controls></video>\\n\\nHere are the commands I used...\\n\\n```prettyprint\\nsudo vim /etc/hosts\\n```\\n\\nThen use `i` for entering edit mode, move your cursor to where you want to edit. Enter the IP address and the hostname.\\n\\nThen it's `escape` to exit insert mode, `wq` to save and quit.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>I had a friend ask me the other day how to edit his hosts file for local development. It's something I take for granted because I'm so used to doing it, but for him it was something he hadn't done before. # Use arrow keys to move to what you want. I decided I'd throw together a quick 60 second video on how to do it...</p>\n<p><video src=\"http://d.pr/v/ozML+\" style=\"width:100%\" controls></video></p>\n<p>Here are the commands I used...</p>\n<pre><code class=\"language-prettyprint\">sudo vim /etc/hosts\n</code></pre>\n<p>Then use <code>i</code> for entering edit mode, move your cursor to where you want to edit. Enter the IP address and the hostname.</p>\n<p>Then it's <code>escape</code> to exit insert mode, <code>wq</code> to save and quit.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"43","plaintext":"I had a friend ask me the other day how to edit his hosts file for local\ndevelopment. It's something I take for granted because I'm so used to doing it,\nbut for him it was something he hadn't done before. # Use arrow keys to move to\nwhat you want. I decided I'd throw together a quick 60 second video on how to do\nit...\n\n\n\nHere are the commands I used...\n\nsudo vim /etc/hosts\n\n\nThen use i for entering edit mode, move your cursor to where you want to edit.\nEnter the IP address and the hostname.\n\nThen it's escape to exit insert mode, wq to save and quit.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"How to quickly edit your hosts file on macOS","meta_description":"It's important to be able to quickly edit your hosts file for doing some forms of local development. Using VIM it can be done easily and quickly.","author_id":"1","created_at":"2017-01-17 21:27:23","updated_at":"2017-01-17 21:36:06","published_at":"2017-01-17 21:34:58","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056c","uuid":"39aa0752-776a-4c88-92c4-b39d2a12f566","title":"Fetching data in a universal react router app with async actions","slug":"fetching-data-in-a-universal-react-router-app-with-async-actions","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One of the most difficult things when working in a universal app is fetching data on the client side. With es2017 and the React lifecycle, it can be done easily.\\n\\nI love `async` and `await` in [es2017](http://www.2ality.com/2016/02/async-functions.html). If you haven't started using them yet. Do it NAOW.\\n\\nIt even works in a lot of browsers natively now too! Including Microsoft Edge, Chrome, and node version 8... http://kangax.github.io/compat-table/es2016plus/#test-async_functions\\n\\n![](/content/images/2017/01/asyncarnold.jpeg)\\n\\nFetching data after a route transition in React Router can be confusing at first, but there's a fairly easy solution using the React lifecyle event `componentDidMount`. If you're working with a universal app, when you hit a component straight at it's url, say `/me/friends`, you'll already have the data via the initial state. But, when you come to that page via a client side react router render, how do you grab the data?\\n\\nFor example, on http://www.lonelyplanet.com/usa/nashville/restaurants/a/poi-eat/362228 you'll get a list of some of the best places to eat in Nashville. The list was rendered on the server side.\\n\\n![](/content/images/2017/01/list-1.png)\\n\\nNow when I click [Hattie B's](https://www.lonelyplanet.com/usa/nashville/restaurants/hattie-bs/a/poi-eat/1513072/362228), we're going to use React Router to transition to a detail page for Hattie B's.\\n\\nAll of that rendering will be done on the client side.\\n\\n![](/content/images/2017/01/hattieb.png)\\n\\nThis is all done via the client side, and no full page render happens. Somehow though, we have to get the JSON data for Hattie B's so React has the data to render.\\n\\n```prettyprint lang-js\\n// user.js\\nimport React from \\\"react\\\";\\nimport { connect } from \\\"react-redux\\\";\\nimport Poi from \\\"./poi\\\";\\nimport { fetchPoi } from \\\"./actions\\\";\\n\\nexport default class Restaurant extends Component {\\n  componentDidMount() {\\n    if (!this.props.poi) {\\n      this.props.fetchPoi();\\n    }\\n  }\\n  render() {\\n    return (\\n      <Poi poi={this.props.poi} />\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = (state) => ({\\n  poi: state.poi,\\n});\\n\\nconst mapDispatchToProps = dispatch => bindActionCreators({\\n  fetchPoi,\\n}, dispatch);\\n\\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Restaurant);\\nexport { connected };\\n```\\n\\nThe `componentDidMount` method only fires when the component renders on the client side. This means if you go directly to the Hattie B's page, the data will already have been fetch server side, so the `this.props.poi` will already be defined and passed through the page's `intitialState`.\\n\\nHowever, when you come to the detail page via the list, the POI will be empty because it hasn't been fetch yet. Now we can talk about how to use `async` and `await` from `es2017` to create a nice clean actionCreator. Make sure you have `babel-polyfill`, and either `babel-env` or `babel-preset-es2017` available to be able to use the `async await` goodies.\\n\\n```prettyprint lang-js\\nimport { createAction } from \\\"redux-actions\\\";\\nexport const FETCH_POI = \\\"FETCH_POI\\\";\\nexport const FETCH_POI_DONE = \\\"FETCH_POI_DONE\\\";\\n\\nconst fetchPoiAction = createAction(FETCH_POI);\\nconst fetchPoiDoneAction = createAction(FETCH_POI_DONE);\\n\\nconst fetchPoi = () => async (dispatch) => {\\n  dispatch(fetchPoiAction());\\n  \\n  const response = await fetch(\\\"/path/to/poi.json\\\");\\n  const poi = await response.json();\\n\\n  dispatch(fetchPoiDoneAction(poi));\\n};\\n\\nexport {\\n  fetchPoi,\\n};\\n```\\n\\nSo here we create an `async` arrow function. We can use `redux-thunk` to get `dispatch` passed in as an argument. Then use the new [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API to `await` for the `response`, `await` for the JSON to be downloaded, and then dispatch the final data so the reducer can add the POI to the state.\\n\\nFrom their `connect` simply passes the POI into the component.\\n\\n### Conclusion\\nHopefully if you're working on a universal app with React Router, this will help you get your components loaded with data on the client side. Universal apps can definitely be tricky, but in the end, they're extremely powerful and fun to work with!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>One of the most difficult things when working in a universal app is fetching data on the client side. With es2017 and the React lifecycle, it can be done easily.</p>\n<p>I love <code>async</code> and <code>await</code> in <a href=\"http://www.2ality.com/2016/02/async-functions.html\">es2017</a>. If you haven't started using them yet. Do it NAOW.</p>\n<p>It even works in a lot of browsers natively now too! Including Microsoft Edge, Chrome, and node version 8... <a href=\"http://kangax.github.io/compat-table/es2016plus/#test-async_functions\">http://kangax.github.io/compat-table/es2016plus/#test-async_functions</a></p>\n<p><img src=\"/content/images/2017/01/asyncarnold.jpeg\" alt=\"\"></p>\n<p>Fetching data after a route transition in React Router can be confusing at first, but there's a fairly easy solution using the React lifecyle event <code>componentDidMount</code>. If you're working with a universal app, when you hit a component straight at it's url, say <code>/me/friends</code>, you'll already have the data via the initial state. But, when you come to that page via a client side react router render, how do you grab the data?</p>\n<p>For example, on <a href=\"http://www.lonelyplanet.com/usa/nashville/restaurants/a/poi-eat/362228\">http://www.lonelyplanet.com/usa/nashville/restaurants/a/poi-eat/362228</a> you'll get a list of some of the best places to eat in Nashville. The list was rendered on the server side.</p>\n<p><img src=\"/content/images/2017/01/list-1.png\" alt=\"\"></p>\n<p>Now when I click <a href=\"https://www.lonelyplanet.com/usa/nashville/restaurants/hattie-bs/a/poi-eat/1513072/362228\">Hattie B's</a>, we're going to use React Router to transition to a detail page for Hattie B's.</p>\n<p>All of that rendering will be done on the client side.</p>\n<p><img src=\"/content/images/2017/01/hattieb.png\" alt=\"\"></p>\n<p>This is all done via the client side, and no full page render happens. Somehow though, we have to get the JSON data for Hattie B's so React has the data to render.</p>\n<pre><code class=\"language-prettyprint\">// user.js\nimport React from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport Poi from &quot;./poi&quot;;\nimport { fetchPoi } from &quot;./actions&quot;;\n\nexport default class Restaurant extends Component {\n  componentDidMount() {\n    if (!this.props.poi) {\n      this.props.fetchPoi();\n    }\n  }\n  render() {\n    return (\n      &lt;Poi poi={this.props.poi} /&gt;\n    );\n  }\n}\n\nconst mapStateToProps = (state) =&gt; ({\n  poi: state.poi,\n});\n\nconst mapDispatchToProps = dispatch =&gt; bindActionCreators({\n  fetchPoi,\n}, dispatch);\n\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Restaurant);\nexport { connected };\n</code></pre>\n<p>The <code>componentDidMount</code> method only fires when the component renders on the client side. This means if you go directly to the Hattie B's page, the data will already have been fetch server side, so the <code>this.props.poi</code> will already be defined and passed through the page's <code>intitialState</code>.</p>\n<p>However, when you come to the detail page via the list, the POI will be empty because it hasn't been fetch yet. Now we can talk about how to use <code>async</code> and <code>await</code> from <code>es2017</code> to create a nice clean actionCreator. Make sure you have <code>babel-polyfill</code>, and either <code>babel-env</code> or <code>babel-preset-es2017</code> available to be able to use the <code>async await</code> goodies.</p>\n<pre><code class=\"language-prettyprint\">import { createAction } from &quot;redux-actions&quot;;\nexport const FETCH_POI = &quot;FETCH_POI&quot;;\nexport const FETCH_POI_DONE = &quot;FETCH_POI_DONE&quot;;\n\nconst fetchPoiAction = createAction(FETCH_POI);\nconst fetchPoiDoneAction = createAction(FETCH_POI_DONE);\n\nconst fetchPoi = () =&gt; async (dispatch) =&gt; {\n  dispatch(fetchPoiAction());\n  \n  const response = await fetch(&quot;/path/to/poi.json&quot;);\n  const poi = await response.json();\n\n  dispatch(fetchPoiDoneAction(poi));\n};\n\nexport {\n  fetchPoi,\n};\n</code></pre>\n<p>So here we create an <code>async</code> arrow function. We can use <code>redux-thunk</code> to get <code>dispatch</code> passed in as an argument. Then use the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch</a> API to <code>await</code> for the <code>response</code>, <code>await</code> for the JSON to be downloaded, and then dispatch the final data so the reducer can add the POI to the state.</p>\n<p>From their <code>connect</code> simply passes the POI into the component.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Hopefully if you're working on a universal app with React Router, this will help you get your components loaded with data on the client side. Universal apps can definitely be tricky, but in the end, they're extremely powerful and fun to work with!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"44","plaintext":"One of the most difficult things when working in a universal app is fetching\ndata on the client side. With es2017 and the React lifecycle, it can be done\neasily.\n\nI love async and await in es2017\n[http://www.2ality.com/2016/02/async-functions.html]. If you haven't started\nusing them yet. Do it NAOW.\n\nIt even works in a lot of browsers natively now too! Including Microsoft Edge,\nChrome, and node version 8... \nhttp://kangax.github.io/compat-table/es2016plus/#test-async_functions\n\n\n\nFetching data after a route transition in React Router can be confusing at\nfirst, but there's a fairly easy solution using the React lifecyle event \ncomponentDidMount. If you're working with a universal app, when you hit a\ncomponent straight at it's url, say /me/friends, you'll already have the data\nvia the initial state. But, when you come to that page via a client side react\nrouter render, how do you grab the data?\n\nFor example, on \nhttp://www.lonelyplanet.com/usa/nashville/restaurants/a/poi-eat/362228 you'll\nget a list of some of the best places to eat in Nashville. The list was rendered\non the server side.\n\n\n\nNow when I click Hattie B's\n[https://www.lonelyplanet.com/usa/nashville/restaurants/hattie-bs/a/poi-eat/1513072/362228]\n, we're going to use React Router to transition to a detail page for Hattie B's.\n\nAll of that rendering will be done on the client side.\n\n\n\nThis is all done via the client side, and no full page render happens. Somehow\nthough, we have to get the JSON data for Hattie B's so React has the data to\nrender.\n\n// user.js\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Poi from \"./poi\";\nimport { fetchPoi } from \"./actions\";\n\nexport default class Restaurant extends Component {\n  componentDidMount() {\n    if (!this.props.poi) {\n      this.props.fetchPoi();\n    }\n  }\n  render() {\n    return (\n      <Poi poi={this.props.poi} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  poi: state.poi,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchPoi,\n}, dispatch);\n\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Restaurant);\nexport { connected };\n\n\nThe componentDidMount method only fires when the component renders on the client\nside. This means if you go directly to the Hattie B's page, the data will\nalready have been fetch server side, so the this.props.poi will already be\ndefined and passed through the page's intitialState.\n\nHowever, when you come to the detail page via the list, the POI will be empty\nbecause it hasn't been fetch yet. Now we can talk about how to use async and \nawait from es2017 to create a nice clean actionCreator. Make sure you have \nbabel-polyfill, and either babel-env or babel-preset-es2017 available to be able\nto use the async await goodies.\n\nimport { createAction } from \"redux-actions\";\nexport const FETCH_POI = \"FETCH_POI\";\nexport const FETCH_POI_DONE = \"FETCH_POI_DONE\";\n\nconst fetchPoiAction = createAction(FETCH_POI);\nconst fetchPoiDoneAction = createAction(FETCH_POI_DONE);\n\nconst fetchPoi = () => async (dispatch) => {\n  dispatch(fetchPoiAction());\n  \n  const response = await fetch(\"/path/to/poi.json\");\n  const poi = await response.json();\n\n  dispatch(fetchPoiDoneAction(poi));\n};\n\nexport {\n  fetchPoi,\n};\n\n\nSo here we create an async arrow function. We can use redux-thunk to get \ndispatch passed in as an argument. Then use the new fetch\n[https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API] API to await for\nthe response, await for the JSON to be downloaded, and then dispatch the final\ndata so the reducer can add the POI to the state.\n\nFrom their connect simply passes the POI into the component.\n\nConclusion\nHopefully if you're working on a universal app with React Router, this will help\nyou get your components loaded with data on the client side. Universal apps can\ndefinitely be tricky, but in the end, they're extremely powerful and fun to work\nwith!","feature_image":null,"featured":1,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Fetching data in a universal react router app with async actions","meta_description":"One of the most difficult things when working in a universal app is fetching data on the client side. With es2017 and the React lifecycle, it can be done easily.","author_id":"1","created_at":"2017-01-31 21:31:22","updated_at":"2017-06-12 16:19:42","published_at":"2017-01-31 22:42:51","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056d","uuid":"5234531e-c51b-41e2-a194-fe11f0646357","title":"Chrome back button in express caching issue solved","slug":"chrome-back-button-in-express-caching-issue-solved","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"While working in a React/express universal app, I created an express route that serves both JSON and HTML sort of like how Rails has a `respond_to` block. That way if I just add `.json` on to the end of some of my requests it will give me the JSON used to render that page.\\n\\nThis caused an interesting issue in production. Occasionally when I was surfing, I would click on a link, and go forward in our universal app. Then, when I hit the back button, rather than seeing HTML I saw the JSON for the page? \\n\\n![](/content/images/2017/02/excuseme.gif)\\n\\nWelp, turns out, Chrome doesn't take the headers into account for caching unless you tell it to. It usually only will use the URL and the request method (get, put, etc). In order for Chrome to cache differently based on the content/type, you have to add a header...\\n\\n```prettyprint lang-js\\napp.use((req, res, next) => {\\n  res.header(\\\"Vary\\\", \\\"X-Requested-With\\\");\\n  next();\\n});\\n```\\n\\nThis will allow chrome to cache both the HTML and the JSON pages separately and prevent the issue from happening.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>While working in a React/express universal app, I created an express route that serves both JSON and HTML sort of like how Rails has a <code>respond_to</code> block. That way if I just add <code>.json</code> on to the end of some of my requests it will give me the JSON used to render that page.</p>\n<p>This caused an interesting issue in production. Occasionally when I was surfing, I would click on a link, and go forward in our universal app. Then, when I hit the back button, rather than seeing HTML I saw the JSON for the page?</p>\n<p><img src=\"/content/images/2017/02/excuseme.gif\" alt=\"\"></p>\n<p>Welp, turns out, Chrome doesn't take the headers into account for caching unless you tell it to. It usually only will use the URL and the request method (get, put, etc). In order for Chrome to cache differently based on the content/type, you have to add a header...</p>\n<pre><code class=\"language-prettyprint\">app.use((req, res, next) =&gt; {\n  res.header(&quot;Vary&quot;, &quot;X-Requested-With&quot;);\n  next();\n});\n</code></pre>\n<p>This will allow chrome to cache both the HTML and the JSON pages separately and prevent the issue from happening.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"45","plaintext":"While working in a React/express universal app, I created an express route that\nserves both JSON and HTML sort of like how Rails has a respond_to block. That\nway if I just add .json on to the end of some of my requests it will give me the\nJSON used to render that page.\n\nThis caused an interesting issue in production. Occasionally when I was surfing,\nI would click on a link, and go forward in our universal app. Then, when I hit\nthe back button, rather than seeing HTML I saw the JSON for the page?\n\n\n\nWelp, turns out, Chrome doesn't take the headers into account for caching unless\nyou tell it to. It usually only will use the URL and the request method (get,\nput, etc). In order for Chrome to cache differently based on the content/type,\nyou have to add a header...\n\napp.use((req, res, next) => {\n  res.header(\"Vary\", \"X-Requested-With\");\n  next();\n});\n\n\nThis will allow chrome to cache both the HTML and the JSON pages separately and\nprevent the issue from happening.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-02-13 22:08:19","updated_at":"2017-02-13 22:17:27","published_at":"2017-02-13 22:17:27","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056e","uuid":"756e3727-5f82-4176-bbd6-9a11cdf1f806","title":"Upgrading to WebPack 2 and React Hot Loader 3 with React Router 3","slug":"setting-up-webpack-2-and-react-hot-loader3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One of the reasons I got into React in the first place was because of Dan Abramov's amazing [Time Travel Talk](https://www.youtube.com/watch?v=xsSnOQynTHs) from React Europe a couple years back. The idea that I could code and have only certain parts of my app reload without the browser refreshing blew my mind, and I wanted so badly to work in that environment.\\n\\nFast forward to 2017, and I've been WebPack 1.x React Hot Loader 1.x for a while now which has been GREAT. I finally decided the other day though that it was time to start working with WebPack 2 because of all the great work that the WebPack community has been doing. So, I figured why not go ahead and go to RHL v3.0 at the same time!\\n\\n### Upgrading to WebPack 2\\n\\nThe first thing to do is to get WebPack 2 up and rolling. There's a fantastic guide on most of what needs to happen [right here](https://webpack.js.org/guides/migrating/).\\n\\nThe biggest changes in my webpack.config file were...\\n\\n#### Loaders is now rules\\n`module.loaders` is now `module.rules`.\\n\\n```prettyprint lang-js\\nmodule: {\\n  rules: [{\\n    // ...\\n  }] \\n}\\n```\\n\\nAnd each rule changes slightly depending on if you have multiple loaders involved or not...\\n\\n```prettyprint lang-js\\nmodule: {\\n  rules: [{\\n    test: /\\\\.css$/,\\n    loader: ExtractTextPlugin.extract({\\n      fallbackLoader: \\\"style-loader\\\",\\n      loader: \\\"css-loader\\\",\\n    }),\\n  }] \\n}\\n```\\n\\nHowever, if you're going to chain multiple loaders together, you now use the `use` syntax...\\n\\n```prettyprint lang-js\\n{\\n  test: /\\\\.css$/,\\n  use: [\\n    \\\"style-loader\\\",\\n    \\\"css-loader\\\",\\n  ],\\n}\\n```\\n\\nOr if you need to pass options...\\n\\n```prettyprint lang-js\\n{\\n  test: /\\\\.css$/,\\n  use: [{\\n    loader: \\\"style-loader\\\",\\n  }, {\\n    loader: \\\"css-loader\\\",\\n    options: {\\n      modules: true,\\n    }\\n  }],\\n}\\n```\\n\\n**NOTE: DO NOT FORGET TO ADD `-loader` TO THE LOADER NAMES**. Because as of WebPack 2, it will not work unless you do that.\\n\\nThat for us, was the biggest things. There were a few other small changes from the migration guide so make sure to check that out.\\n\\n### Get Hot Module Reload (HMR) setup correctly\\nThe guide setup here on the new WebPack Docs site is quite good https://webpack.js.org/guides/hmr-react/ so definitely check it out. \\n\\n```prettyprint lang-js\\nplugins: [\\n  new webpack.HotModuleReplacementPlugin(),\\n]\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>One of the reasons I got into React in the first place was because of Dan Abramov's amazing <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">Time Travel Talk</a> from React Europe a couple years back. The idea that I could code and have only certain parts of my app reload without the browser refreshing blew my mind, and I wanted so badly to work in that environment.</p>\n<p>Fast forward to 2017, and I've been WebPack 1.x React Hot Loader 1.x for a while now which has been GREAT. I finally decided the other day though that it was time to start working with WebPack 2 because of all the great work that the WebPack community has been doing. So, I figured why not go ahead and go to RHL v3.0 at the same time!</p>\n<h3 id=\"upgradingtowebpack2\">Upgrading to WebPack 2</h3>\n<p>The first thing to do is to get WebPack 2 up and rolling. There's a fantastic guide on most of what needs to happen <a href=\"https://webpack.js.org/guides/migrating/\">right here</a>.</p>\n<p>The biggest changes in my webpack.config file were...</p>\n<h4 id=\"loadersisnowrules\">Loaders is now rules</h4>\n<p><code>module.loaders</code> is now <code>module.rules</code>.</p>\n<pre><code class=\"language-prettyprint\">module: {\n  rules: [{\n    // ...\n  }] \n}\n</code></pre>\n<p>And each rule changes slightly depending on if you have multiple loaders involved or not...</p>\n<pre><code class=\"language-prettyprint\">module: {\n  rules: [{\n    test: /\\.css$/,\n    loader: ExtractTextPlugin.extract({\n      fallbackLoader: &quot;style-loader&quot;,\n      loader: &quot;css-loader&quot;,\n    }),\n  }] \n}\n</code></pre>\n<p>However, if you're going to chain multiple loaders together, you now use the <code>use</code> syntax...</p>\n<pre><code class=\"language-prettyprint\">{\n  test: /\\.css$/,\n  use: [\n    &quot;style-loader&quot;,\n    &quot;css-loader&quot;,\n  ],\n}\n</code></pre>\n<p>Or if you need to pass options...</p>\n<pre><code class=\"language-prettyprint\">{\n  test: /\\.css$/,\n  use: [{\n    loader: &quot;style-loader&quot;,\n  }, {\n    loader: &quot;css-loader&quot;,\n    options: {\n      modules: true,\n    }\n  }],\n}\n</code></pre>\n<p><strong>NOTE: DO NOT FORGET TO ADD <code>-loader</code> TO THE LOADER NAMES</strong>. Because as of WebPack 2, it will not work unless you do that.</p>\n<p>That for us, was the biggest things. There were a few other small changes from the migration guide so make sure to check that out.</p>\n<h3 id=\"gethotmodulereloadhmrsetupcorrectly\">Get Hot Module Reload (HMR) setup correctly</h3>\n<p>The guide setup here on the new WebPack Docs site is quite good <a href=\"https://webpack.js.org/guides/hmr-react/\">https://webpack.js.org/guides/hmr-react/</a> so definitely check it out.</p>\n<pre><code class=\"language-prettyprint\">plugins: [\n  new webpack.HotModuleReplacementPlugin(),\n]\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"46","plaintext":"One of the reasons I got into React in the first place was because of Dan\nAbramov's amazing Time Travel Talk [https://www.youtube.com/watch?v=xsSnOQynTHs] \nfrom React Europe a couple years back. The idea that I could code and have only\ncertain parts of my app reload without the browser refreshing blew my mind, and\nI wanted so badly to work in that environment.\n\nFast forward to 2017, and I've been WebPack 1.x React Hot Loader 1.x for a while\nnow which has been GREAT. I finally decided the other day though that it was\ntime to start working with WebPack 2 because of all the great work that the\nWebPack community has been doing. So, I figured why not go ahead and go to RHL\nv3.0 at the same time!\n\nUpgrading to WebPack 2\nThe first thing to do is to get WebPack 2 up and rolling. There's a fantastic\nguide on most of what needs to happen right here\n[https://webpack.js.org/guides/migrating/].\n\nThe biggest changes in my webpack.config file were...\n\nLoaders is now rules\nmodule.loaders is now module.rules.\n\nmodule: {\n  rules: [{\n    // ...\n  }] \n}\n\n\nAnd each rule changes slightly depending on if you have multiple loaders\ninvolved or not...\n\nmodule: {\n  rules: [{\n    test: /\\.css$/,\n    loader: ExtractTextPlugin.extract({\n      fallbackLoader: \"style-loader\",\n      loader: \"css-loader\",\n    }),\n  }] \n}\n\n\nHowever, if you're going to chain multiple loaders together, you now use the use \nsyntax...\n\n{\n  test: /\\.css$/,\n  use: [\n    \"style-loader\",\n    \"css-loader\",\n  ],\n}\n\n\nOr if you need to pass options...\n\n{\n  test: /\\.css$/,\n  use: [{\n    loader: \"style-loader\",\n  }, {\n    loader: \"css-loader\",\n    options: {\n      modules: true,\n    }\n  }],\n}\n\n\nNOTE: DO NOT FORGET TO ADD -loader TO THE LOADER NAMES. Because as of WebPack 2,\nit will not work unless you do that.\n\nThat for us, was the biggest things. There were a few other small changes from\nthe migration guide so make sure to check that out.\n\nGet Hot Module Reload (HMR) setup correctly\nThe guide setup here on the new WebPack Docs site is quite good \nhttps://webpack.js.org/guides/hmr-react/ so definitely check it out.\n\nplugins: [\n  new webpack.HotModuleReplacementPlugin(),\n]","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-02-20 22:46:16","updated_at":"2017-02-20 23:14:17","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422056f","uuid":"ecedf3b4-6b54-48fb-8953-74c3633ed5c0","title":"Testing typescript classes with Jest and Jest Mocks","slug":"testing-typescript-classes-with-jest-and-jest-mocks","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Typescript is a powerful way to build applications. It offers type checking to catch errors before they make it to the browser. On top of just utilizing typescript to catch bugs, it's still important to make sure Typescript code is tested.\\n\\nFacebook released a testing framework called Jest a while ago as  that contains many built in features. You can kind of compare Jest to Mocha in saying that Jest is to Mocha as Angular is to React. Jest is an entire test framework with built in mocking, code coverage, watching, assertions, etc.\\n\\nWith a bit of config, you can easily begin testing Typescript with Jest, including setting up Mocks for testing classes.\\n\\nLet's say we want to create an `EmailService`...\\n\\n```prettyprint lang-js\\nexport class EmailService implements ICommunicator<IEmail> {\\n  sender: ICommunicator<IEmail>;\\n  \\n  constructor(sender: ICommunicator<IEmail>) {\\n    this.sender = sender;\\n  }\\n\\n  send(item: IEmail) {\\n    this.sender.send(item);\\n  }\\n}\\n```\\n\\nHere we're implementing an interface called `ICommunicator<Email>`...\\n\\n```prettyprint lang-js\\nexport interface ICommunicator<T> {\\n  send: (item: T) => void,\\n}\\n```\\n\\nThis will allow us to implement any kind of communication interface, in the case we'll one for sending emails with `IEmail`...\\n\\n```prettyprint lang-js\\nexport interface IEmail {\\n  to: string,\\n  from: string,\\n  subject: string,\\n  contents: string,\\n}\\n\\nexport class Email implements IEmail {\\n  to: string;\\n  from: string;\\n  subject: string;\\n  contents: string;\\n  \\n  constructor(to: string, from: string, subject: string, contents: string) {\\n    this.to = to;\\n    this.from = from;\\n    this.subject = subject;\\n    this.contents = contents;\\n  }\\n}\\n```\\n\\nSo, in a unit test we want to test and make sure that when we create an `EmailService` that it will call the `ICommunicator`'s send method...\\n\\nFirst of all, let's get Jest setup.\\n\\n```\\nyarn add -D jest @types/jest\\n```\\n\\nThen you need to add a few things to the `package.json`...\\n\\n```\\n\\\"jest\\\": {\\n  \\\"moduleFileExtensions\\\": [\\n    \\\"ts\\\",\\n    \\\"tsx\\\",\\n    \\\"js\\\"\\n  ],\\n  \\\"transform\\\": {\\n    \\\"^.+\\\\\\\\.(ts|tsx)$\\\": \\\"<rootDir>/preprocessor.js\\\"\\n  },\\n  \\\"testMatch\\\": [\\n    \\\"**/__tests__/*.(ts|tsx)\\\"\\n  ]\\n}\\n```\\n\\nFinally, create a `preprocesser.js` file...\\n\\n```prettyprint lang-js\\nconst tsc = require('typescript');\\nconst tsConfig = require('./tsconfig.json');\\n\\nmodule.exports = {\\n  process(src, path) {\\n    if (path.endsWith('.ts') || path.endsWith('.tsx')) {\\n      return tsc.transpile(\\n        src,\\n        tsConfig.compilerOptions,\\n        path,\\n        []\\n      );\\n    }\\n    return src;\\n  },\\n};\\n```\\n\\nNow we'll be able to start writing some tests!\\n\\n```prettyprint lang-js\\nimport { EmailService, ICommunicator, IEmail, Email } from \\\"../\\\";\\n\\ndescribe(\\\"EmailService\\\", () => {\\n  it(\\\"should send emails\\\", () => {\\n    const Mock = jest.fn<ICommunicator<IEmail>>(() => ({\\n      send: jest.fn(),\\n    }));\\n    const mock = new Mock();\\n    const instance = new EmailService(mock);\\n    instance.send(new Email(\\\"to@foo.com\\\", \\\"from@foo.com\\\", \\\"oh hai\\\", \\\"Some foo email...\\\"));\\n\\n    expect(mock.send).toHaveBeenCalled();\\n  });\\n});\\n```\\n\\nFirst of all, we'll create a Mock implementation of an Email communicator with...\\n\\n```prettyprint lang-js\\nconst Mock = jest.fn<ICommunicator<IEmail>>(() => ({\\n  send: jest.fn(),\\n}));\\n```\\n\\nThen create a couple of instances and call the `send` method...\\n\\n```prettyprint lang-js\\nconst mock = new Mock();\\nconst emailService = new EmailService(mock);\\nconst email = new Email(\\\"to@foo.com\\\", \\\"from@foo.com\\\", \\\"oh hai\\\", \\\"Some foo email...\\\");\\nemailService.send(email);\\n```\\n\\nLastly, we'll make sure that by calling `emailService.send` calls the mock implementation of the `ICommunicator<Email>`...\\n\\n```prettyprint lang-js\\nexpect(mock.send).toHaveBeenCalled();\\n```\\n\\nHopefully that will help anyone looking to get started with Jest and Typescript!\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Typescript is a powerful way to build applications. It offers type checking to catch errors before they make it to the browser. On top of just utilizing typescript to catch bugs, it's still important to make sure Typescript code is tested.</p>\n<p>Facebook released a testing framework called Jest a while ago as  that contains many built in features. You can kind of compare Jest to Mocha in saying that Jest is to Mocha as Angular is to React. Jest is an entire test framework with built in mocking, code coverage, watching, assertions, etc.</p>\n<p>With a bit of config, you can easily begin testing Typescript with Jest, including setting up Mocks for testing classes.</p>\n<p>Let's say we want to create an <code>EmailService</code>...</p>\n<pre><code class=\"language-prettyprint\">export class EmailService implements ICommunicator&lt;IEmail&gt; {\n  sender: ICommunicator&lt;IEmail&gt;;\n  \n  constructor(sender: ICommunicator&lt;IEmail&gt;) {\n    this.sender = sender;\n  }\n\n  send(item: IEmail) {\n    this.sender.send(item);\n  }\n}\n</code></pre>\n<p>Here we're implementing an interface called <code>ICommunicator&lt;Email&gt;</code>...</p>\n<pre><code class=\"language-prettyprint\">export interface ICommunicator&lt;T&gt; {\n  send: (item: T) =&gt; void,\n}\n</code></pre>\n<p>This will allow us to implement any kind of communication interface, in the case we'll one for sending emails with <code>IEmail</code>...</p>\n<pre><code class=\"language-prettyprint\">export interface IEmail {\n  to: string,\n  from: string,\n  subject: string,\n  contents: string,\n}\n\nexport class Email implements IEmail {\n  to: string;\n  from: string;\n  subject: string;\n  contents: string;\n  \n  constructor(to: string, from: string, subject: string, contents: string) {\n    this.to = to;\n    this.from = from;\n    this.subject = subject;\n    this.contents = contents;\n  }\n}\n</code></pre>\n<p>So, in a unit test we want to test and make sure that when we create an <code>EmailService</code> that it will call the <code>ICommunicator</code>'s send method...</p>\n<p>First of all, let's get Jest setup.</p>\n<pre><code>yarn add -D jest @types/jest\n</code></pre>\n<p>Then you need to add a few things to the <code>package.json</code>...</p>\n<pre><code>&quot;jest&quot;: {\n  &quot;moduleFileExtensions&quot;: [\n    &quot;ts&quot;,\n    &quot;tsx&quot;,\n    &quot;js&quot;\n  ],\n  &quot;transform&quot;: {\n    &quot;^.+\\\\.(ts|tsx)$&quot;: &quot;&lt;rootDir&gt;/preprocessor.js&quot;\n  },\n  &quot;testMatch&quot;: [\n    &quot;**/__tests__/*.(ts|tsx)&quot;\n  ]\n}\n</code></pre>\n<p>Finally, create a <code>preprocesser.js</code> file...</p>\n<pre><code class=\"language-prettyprint\">const tsc = require('typescript');\nconst tsConfig = require('./tsconfig.json');\n\nmodule.exports = {\n  process(src, path) {\n    if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n      return tsc.transpile(\n        src,\n        tsConfig.compilerOptions,\n        path,\n        []\n      );\n    }\n    return src;\n  },\n};\n</code></pre>\n<p>Now we'll be able to start writing some tests!</p>\n<pre><code class=\"language-prettyprint\">import { EmailService, ICommunicator, IEmail, Email } from &quot;../&quot;;\n\ndescribe(&quot;EmailService&quot;, () =&gt; {\n  it(&quot;should send emails&quot;, () =&gt; {\n    const Mock = jest.fn&lt;ICommunicator&lt;IEmail&gt;&gt;(() =&gt; ({\n      send: jest.fn(),\n    }));\n    const mock = new Mock();\n    const instance = new EmailService(mock);\n    instance.send(new Email(&quot;to@foo.com&quot;, &quot;from@foo.com&quot;, &quot;oh hai&quot;, &quot;Some foo email...&quot;));\n\n    expect(mock.send).toHaveBeenCalled();\n  });\n});\n</code></pre>\n<p>First of all, we'll create a Mock implementation of an Email communicator with...</p>\n<pre><code class=\"language-prettyprint\">const Mock = jest.fn&lt;ICommunicator&lt;IEmail&gt;&gt;(() =&gt; ({\n  send: jest.fn(),\n}));\n</code></pre>\n<p>Then create a couple of instances and call the <code>send</code> method...</p>\n<pre><code class=\"language-prettyprint\">const mock = new Mock();\nconst emailService = new EmailService(mock);\nconst email = new Email(&quot;to@foo.com&quot;, &quot;from@foo.com&quot;, &quot;oh hai&quot;, &quot;Some foo email...&quot;);\nemailService.send(email);\n</code></pre>\n<p>Lastly, we'll make sure that by calling <code>emailService.send</code> calls the mock implementation of the <code>ICommunicator&lt;Email&gt;</code>...</p>\n<pre><code class=\"language-prettyprint\">expect(mock.send).toHaveBeenCalled();\n</code></pre>\n<p>Hopefully that will help anyone looking to get started with Jest and Typescript!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"47","plaintext":"Typescript is a powerful way to build applications. It offers type checking to\ncatch errors before they make it to the browser. On top of just utilizing\ntypescript to catch bugs, it's still important to make sure Typescript code is\ntested.\n\nFacebook released a testing framework called Jest a while ago as that contains\nmany built in features. You can kind of compare Jest to Mocha in saying that\nJest is to Mocha as Angular is to React. Jest is an entire test framework with\nbuilt in mocking, code coverage, watching, assertions, etc.\n\nWith a bit of config, you can easily begin testing Typescript with Jest,\nincluding setting up Mocks for testing classes.\n\nLet's say we want to create an EmailService...\n\nexport class EmailService implements ICommunicator<IEmail> {\n  sender: ICommunicator<IEmail>;\n  \n  constructor(sender: ICommunicator<IEmail>) {\n    this.sender = sender;\n  }\n\n  send(item: IEmail) {\n    this.sender.send(item);\n  }\n}\n\n\nHere we're implementing an interface called ICommunicator<Email>...\n\nexport interface ICommunicator<T> {\n  send: (item: T) => void,\n}\n\n\nThis will allow us to implement any kind of communication interface, in the case\nwe'll one for sending emails with IEmail...\n\nexport interface IEmail {\n  to: string,\n  from: string,\n  subject: string,\n  contents: string,\n}\n\nexport class Email implements IEmail {\n  to: string;\n  from: string;\n  subject: string;\n  contents: string;\n  \n  constructor(to: string, from: string, subject: string, contents: string) {\n    this.to = to;\n    this.from = from;\n    this.subject = subject;\n    this.contents = contents;\n  }\n}\n\n\nSo, in a unit test we want to test and make sure that when we create an \nEmailService that it will call the ICommunicator's send method...\n\nFirst of all, let's get Jest setup.\n\nyarn add -D jest @types/jest\n\n\nThen you need to add a few things to the package.json...\n\n\"jest\": {\n  \"moduleFileExtensions\": [\n    \"ts\",\n    \"tsx\",\n    \"js\"\n  ],\n  \"transform\": {\n    \"^.+\\\\.(ts|tsx)$\": \"<rootDir>/preprocessor.js\"\n  },\n  \"testMatch\": [\n    \"**/__tests__/*.(ts|tsx)\"\n  ]\n}\n\n\nFinally, create a preprocesser.js file...\n\nconst tsc = require('typescript');\nconst tsConfig = require('./tsconfig.json');\n\nmodule.exports = {\n  process(src, path) {\n    if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n      return tsc.transpile(\n        src,\n        tsConfig.compilerOptions,\n        path,\n        []\n      );\n    }\n    return src;\n  },\n};\n\n\nNow we'll be able to start writing some tests!\n\nimport { EmailService, ICommunicator, IEmail, Email } from \"../\";\n\ndescribe(\"EmailService\", () => {\n  it(\"should send emails\", () => {\n    const Mock = jest.fn<ICommunicator<IEmail>>(() => ({\n      send: jest.fn(),\n    }));\n    const mock = new Mock();\n    const instance = new EmailService(mock);\n    instance.send(new Email(\"to@foo.com\", \"from@foo.com\", \"oh hai\", \"Some foo email...\"));\n\n    expect(mock.send).toHaveBeenCalled();\n  });\n});\n\n\nFirst of all, we'll create a Mock implementation of an Email communicator\nwith...\n\nconst Mock = jest.fn<ICommunicator<IEmail>>(() => ({\n  send: jest.fn(),\n}));\n\n\nThen create a couple of instances and call the send method...\n\nconst mock = new Mock();\nconst emailService = new EmailService(mock);\nconst email = new Email(\"to@foo.com\", \"from@foo.com\", \"oh hai\", \"Some foo email...\");\nemailService.send(email);\n\n\nLastly, we'll make sure that by calling emailService.send calls the mock\nimplementation of the ICommunicator<Email>...\n\nexpect(mock.send).toHaveBeenCalled();\n\n\nHopefully that will help anyone looking to get started with Jest and Typescript!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Testing typescript classes with Jest and Jest Mocks","meta_description":"Typescript is a powerful way to build applications. Combining Jest and Typescript can help prevent many different types of bugs in applications.","author_id":"1","created_at":"2017-04-13 02:36:18","updated_at":"2017-04-13 02:55:06","published_at":"2017-04-13 02:53:15","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220570","uuid":"f0200179-adb0-400f-b93a-a588ca0b2fcb","title":"Store objects by ID in redux stores","slug":"store-objects-by-id-in-redux-stores","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"48","plaintext":null,"feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-08-30 19:30:40","updated_at":"2017-08-30 19:30:49","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220571","uuid":"5459f013-61b4-440f-a6f3-41587b83608d","title":"Getting started with TypeScript, WebPack, and React","slug":"getting-started-with-typescript-webpack-and-react","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"We've been integrating TypeScript more and more into our workflow at Lonely Planet.\\n\\nI wanted to just quickly share how easy it is to get started working with TypeScript and Webpack! \\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/ZyoVZ6cLvpI\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\\nIt takes a very simple webpack.config...\\n\\n```prettyprint lang-js\\nmodule.exports = {\\n  entry: \\\"./src/index.tsx\\\",\\n  devtool: \\\"source-map\\\",\\n  output: {\\n    filename: \\\"./dist/bundle.js\\\",\\n  },\\n  resolve: {\\n    extensions: [\\\".ts\\\", \\\".tsx\\\", \\\".js\\\", \\\".jsx\\\"],\\n  },\\n  module: {\\n    rules: [{\\n      test: /\\\\.tsx?$/,\\n      loader: \\\"ts-loader\\\"\\n    }],\\n  },\\n};\\n```\\n\\nAnd a few `npm install`s...\\n\\n```\\n\\\"devDependencies\\\": {\\n  \\\"@types/react\\\": \\\"^16.0.5\\\",\\n  \\\"@types/react-dom\\\": \\\"^15.5.4\\\",\\n  \\\"react\\\": \\\"^15.6.1\\\",\\n  \\\"react-dom\\\": \\\"^15.6.1\\\",\\n  \\\"ts-loader\\\": \\\"^2.3.4\\\",\\n  \\\"typescript\\\": \\\"^2.5.2\\\",\\n  \\\"webpack\\\": \\\"^3.5.5\\\",\\n  \\\"webpack-dev-server\\\": \\\"^2.7.1\\\"\\n}\\n```\\n\\nThen start writing TypeScript and React!\\n\\nFull code of the starter at https://github.com/jcreamer898/typescript-webpack-react.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>We've been integrating TypeScript more and more into our workflow at Lonely Planet.</p>\n<p>I wanted to just quickly share how easy it is to get started working with TypeScript and Webpack!</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZyoVZ6cLvpI\" frameborder=\"0\" allowfullscreen></iframe>\n<p>It takes a very simple webpack.config...</p>\n<pre><code class=\"language-prettyprint\">module.exports = {\n  entry: &quot;./src/index.tsx&quot;,\n  devtool: &quot;source-map&quot;,\n  output: {\n    filename: &quot;./dist/bundle.js&quot;,\n  },\n  resolve: {\n    extensions: [&quot;.ts&quot;, &quot;.tsx&quot;, &quot;.js&quot;, &quot;.jsx&quot;],\n  },\n  module: {\n    rules: [{\n      test: /\\.tsx?$/,\n      loader: &quot;ts-loader&quot;\n    }],\n  },\n};\n</code></pre>\n<p>And a few <code>npm install</code>s...</p>\n<pre><code>&quot;devDependencies&quot;: {\n  &quot;@types/react&quot;: &quot;^16.0.5&quot;,\n  &quot;@types/react-dom&quot;: &quot;^15.5.4&quot;,\n  &quot;react&quot;: &quot;^15.6.1&quot;,\n  &quot;react-dom&quot;: &quot;^15.6.1&quot;,\n  &quot;ts-loader&quot;: &quot;^2.3.4&quot;,\n  &quot;typescript&quot;: &quot;^2.5.2&quot;,\n  &quot;webpack&quot;: &quot;^3.5.5&quot;,\n  &quot;webpack-dev-server&quot;: &quot;^2.7.1&quot;\n}\n</code></pre>\n<p>Then start writing TypeScript and React!</p>\n<p>Full code of the starter at <a href=\"https://github.com/jcreamer898/typescript-webpack-react\">https://github.com/jcreamer898/typescript-webpack-react</a>.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"49","plaintext":"We've been integrating TypeScript more and more into our workflow at Lonely\nPlanet.\n\nI wanted to just quickly share how easy it is to get started working with\nTypeScript and Webpack!\n\nIt takes a very simple webpack.config...\n\nmodule.exports = {\n  entry: \"./src/index.tsx\",\n  devtool: \"source-map\",\n  output: {\n    filename: \"./dist/bundle.js\",\n  },\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"],\n  },\n  module: {\n    rules: [{\n      test: /\\.tsx?$/,\n      loader: \"ts-loader\"\n    }],\n  },\n};\n\n\nAnd a few npm installs...\n\n\"devDependencies\": {\n  \"@types/react\": \"^16.0.5\",\n  \"@types/react-dom\": \"^15.5.4\",\n  \"react\": \"^15.6.1\",\n  \"react-dom\": \"^15.6.1\",\n  \"ts-loader\": \"^2.3.4\",\n  \"typescript\": \"^2.5.2\",\n  \"webpack\": \"^3.5.5\",\n  \"webpack-dev-server\": \"^2.7.1\"\n}\n\n\nThen start writing TypeScript and React!\n\nFull code of the starter at \nhttps://github.com/jcreamer898/typescript-webpack-react.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Screencast and some code of just how easy it is to get started with TypeScript, WebPack, and React.","author_id":"1","created_at":"2017-09-06 15:31:27","updated_at":"2017-09-07 18:14:45","published_at":"2017-09-06 15:47:09","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220572","uuid":"59f77c16-1bf3-4233-9ab3-ea1aa479489c","title":"Debugging node and Jest tests with VS Code's debugger","slug":"debugging-node-and-jest-tests-with-vs-codes-debuggger","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[VS Code](https://code.visualstudio.com/) has become my favorite IDE for pretty much everything these days. There are so many great features it has to offer including the ability to debug node.js.\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/ZvIzxXv1dJU\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\\nHere is the `launch.json` I used to get the debugger working for me.\\n\\n<script src=\\\"https://gist.github.com/jcreamer898/7049b358dcd500370218ea6c0fcfa597.js\\\"></script>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p><a href=\"https://code.visualstudio.com/\">VS Code</a> has become my favorite IDE for pretty much everything these days. There are so many great features it has to offer including the ability to debug node.js.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZvIzxXv1dJU\" frameborder=\"0\" allowfullscreen></iframe>\n<p>Here is the <code>launch.json</code> I used to get the debugger working for me.</p>\n<script src=\"https://gist.github.com/jcreamer898/7049b358dcd500370218ea6c0fcfa597.js\"></script><!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"50","plaintext":"VS Code [https://code.visualstudio.com/] has become my favorite IDE for pretty\nmuch everything these days. There are so many great features it has to offer\nincluding the ability to debug node.js.\n\nHere is the launch.json I used to get the debugger working for me.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"Debugging node and Jest tests with VS Code's debugger","meta_description":"There are so many great features it has to offer including the ability to debug node.js. This post is a quick screencast of how to use VS Code's debugger.","author_id":"1","created_at":"2017-09-20 14:39:49","updated_at":"2017-09-20 14:57:35","published_at":"2017-09-20 14:42:32","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220573","uuid":"3389217a-65dc-4650-97c8-630f7b8414ba","title":"How Typescript's ts-check improved my redux store written in JavaScript","slug":"how-typescripts-ts-check-improved-my-redux-store-written-in-javascript","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"It can help you make sure you build your redux state correctly...\\n\\n```\\n// index.d.ts\\nimport { ISomething } from \\\"something\\\";\\nimport { Reducer } from \\\"redux\\\";\\n\\ndeclare global {\\n  interface IAppState {\\n    foo: string;\\n    something: ISomething;\\n  }\\n\\n  interface IAppReducer extends Reducer<IAppState> {}\\n}\\n```\\n\\n```\\n// @ts-check\\n/**\\n* @returns {Promise<IAppState>}\\n*/\\nconst buildInitialState = async () => {\\n  const something = await getSomething();\\n  return {\\n    foo: \\\"bar\\\",\\n    something,\\n  };\\n}\\n```\\n\\n\\nMy App reducer can use the `IAppReducer` interface so it knows what the state is.\\n\\n```\\n// @ts-check\\nimport { createStore } from \\\"redux\\\";\\n\\n/**\\n* @type {IAppReducer}\\n*/\\nfunction AppReducer(state, action) {\\n  switch (action.type) {\\n    // ...\\n  }\\n}\\n```\\n\\nIf you use `combineReducers` to break up your state into multiple reducers you can further break that down by adding some more reducer types to your `index.d.ts`...\\n\\n```\\ndeclare global {\\n  // ...\\n  interface IFooState {\\n    bar: string;\\n  }\\n\\n  interface IFooReducer extends Reducer<IFooState> {}\\n}\\n```\\n\\nThen in your `/foo/reducer/index.js`...\\n\\n```\\n/**\\n* @type\\n*/\\nfunction FooReducer(state) {\\n\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>It can help you make sure you build your redux state correctly...</p>\n<pre><code>// index.d.ts\nimport { ISomething } from &quot;something&quot;;\nimport { Reducer } from &quot;redux&quot;;\n\ndeclare global {\n  interface IAppState {\n    foo: string;\n    something: ISomething;\n  }\n\n  interface IAppReducer extends Reducer&lt;IAppState&gt; {}\n}\n</code></pre>\n<pre><code>// @ts-check\n/**\n* @returns {Promise&lt;IAppState&gt;}\n*/\nconst buildInitialState = async () =&gt; {\n  const something = await getSomething();\n  return {\n    foo: &quot;bar&quot;,\n    something,\n  };\n}\n</code></pre>\n<p>My App reducer can use the <code>IAppReducer</code> interface so it knows what the state is.</p>\n<pre><code>// @ts-check\nimport { createStore } from &quot;redux&quot;;\n\n/**\n* @type {IAppReducer}\n*/\nfunction AppReducer(state, action) {\n  switch (action.type) {\n    // ...\n  }\n}\n</code></pre>\n<p>If you use <code>combineReducers</code> to break up your state into multiple reducers you can further break that down by adding some more reducer types to your <code>index.d.ts</code>...</p>\n<pre><code>declare global {\n  // ...\n  interface IFooState {\n    bar: string;\n  }\n\n  interface IFooReducer extends Reducer&lt;IFooState&gt; {}\n}\n</code></pre>\n<p>Then in your <code>/foo/reducer/index.js</code>...</p>\n<pre><code>/**\n* @type\n*/\nfunction FooReducer(state) {\n\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"51","plaintext":"It can help you make sure you build your redux state correctly...\n\n// index.d.ts\nimport { ISomething } from \"something\";\nimport { Reducer } from \"redux\";\n\ndeclare global {\n  interface IAppState {\n    foo: string;\n    something: ISomething;\n  }\n\n  interface IAppReducer extends Reducer<IAppState> {}\n}\n\n\n// @ts-check\n/**\n* @returns {Promise<IAppState>}\n*/\nconst buildInitialState = async () => {\n  const something = await getSomething();\n  return {\n    foo: \"bar\",\n    something,\n  };\n}\n\n\nMy App reducer can use the IAppReducer interface so it knows what the state is.\n\n// @ts-check\nimport { createStore } from \"redux\";\n\n/**\n* @type {IAppReducer}\n*/\nfunction AppReducer(state, action) {\n  switch (action.type) {\n    // ...\n  }\n}\n\n\nIf you use combineReducers to break up your state into multiple reducers you can\nfurther break that down by adding some more reducer types to your index.d.ts...\n\ndeclare global {\n  // ...\n  interface IFooState {\n    bar: string;\n  }\n\n  interface IFooReducer extends Reducer<IFooState> {}\n}\n\n\nThen in your /foo/reducer/index.js...\n\n/**\n* @type\n*/\nfunction FooReducer(state) {\n\n}","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-09-25 22:03:05","updated_at":"2017-09-28 20:16:27","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220574","uuid":"0caf11d9-0245-4691-a237-c7573c19e34a","title":"Using do expressions in redux reducers","slug":"using-do-expressions-in-redux-reducers","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There's an interesting proposal that's stage 1 currently (as of 9/26/2017) called `do expressions`. Thanks to the magic that is Babel, you can already go ahead and try this out with the do expression transform... https://babeljs.io/docs/plugins/transform-do-expressions/.\\n\\nThe basic idea is that you can have a block of code such as a few `if` statements, or a `try catch`, wrap them in a `do { }`, and whatever the final statement evaluates to, can be returned.\\n\\nFor example, have a look at a standard if block...\\n\\n```prettyprint lang-js\\nfunction fizzBuzz() {\\n  let str;\\n\\n  for (var i=1; i <= 20; i++) {\\n    if (i % 15 == 0) {\\n      str = \\\"FizzBuzz\\\";\\n    } else if (i % 3 == 0) {\\n      str = \\\"Fizz\\\";\\n    } else if (i % 5 == 0) {\\n      str = \\\"Buzz\\\";\\n    } else {\\n      str = i;\\n    }\\n  }\\n\\n  return str;\\n}\\n```\\n\\nHere you have to initialize str to something, then reassign it in each `if` block.\\n\\nWith `do expressions`, you can do the following...\\n\\n```prettyprint lang-js\\nfunction fizzBuzz() {\\n  return do {\\n    for (var i=1; i <= 20; i++) {\\n      if (i % 15 == 0) {\\n        \\\"FizzBuzz\\\";\\n      } else if (i % 3 == 0) {\\n        \\\"Fizz\\\";\\n      } else if (i % 5 == 0) {\\n        \\\"Buzz\\\";\\n      } else {\\n        i;\\n      }\\n    }\\n  }\\n}\\n```\\n\\nWith `do expressions`, you don't need to initialize `str`, you can simply return the entire `do expression`. Each `if` gets evaluated, and the one that ends up being truthy simply returns its value out of the expression.\\n\\nSo, how about for a Redux reducer?\\n\\nWell, most Redux reducer's are written in `switch` statements. Not a big deal, but I was curious if I could use a `do` and some `if` statements since I'm not the biggest fan of `switch` statements.\\n\\nFor example, this code is taken from a todomvc example...\\n\\n```prettyprint lang-js\\nfunction todos(state = initialState, action) {\\n  switch (action.type) {\\n    case ADD_TODO: {\\n      return [...state, {\\n        id: state.reduce((maxId, todo) =>\\n          Math.max(todo.id, maxId), -1) + 1,\\n        completed: false,\\n        text: action.text\\n      }];\\n    }\\n    case DELETE_TODO: {\\n      return state.filter(todo =>\\n        todo.id !== action.id\\n      );\\n    }\\n    default:\\n      return state;\\n  }\\n}\\n```\\n\\nPretty straightforward, now check out the same reducer with `if`'s inside of a `do expression`...\\n\\n```prettyprint lang-js\\nfunction todos(state = initialState, { type, text, id }) {\\n  return do {\\n    if (type === ADD_TODO) { \\n      [...state, {\\n        id: state.reduce((maxId, todo) =>\\n          Math.max(todo.id, maxId), -1) + 1,\\n        completed: false,\\n        text\\n      }];\\n    }\\n\\n    if (type === DELETE_TODO) {\\n      state.filter(todo => todo.id !== id);\\n    }\\n\\n    state;\\n  }\\n}\\n```\\n\\nIt's nice that you don't have to see `return ` but once, and we've gotten rid of the `switch`. Not sure which one is better, but it's cool to have different options to build reducers in.\\n\\nFeel free to discuss in the comments below!\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>There's an interesting proposal that's stage 1 currently (as of 9/26/2017) called <code>do expressions</code>. Thanks to the magic that is Babel, you can already go ahead and try this out with the do expression transform... <a href=\"https://babeljs.io/docs/plugins/transform-do-expressions/\">https://babeljs.io/docs/plugins/transform-do-expressions/</a>.</p>\n<p>The basic idea is that you can have a block of code such as a few <code>if</code> statements, or a <code>try catch</code>, wrap them in a <code>do { }</code>, and whatever the final statement evaluates to, can be returned.</p>\n<p>For example, have a look at a standard if block...</p>\n<pre><code class=\"language-prettyprint\">function fizzBuzz() {\n  let str;\n\n  for (var i=1; i &lt;= 20; i++) {\n    if (i % 15 == 0) {\n      str = &quot;FizzBuzz&quot;;\n    } else if (i % 3 == 0) {\n      str = &quot;Fizz&quot;;\n    } else if (i % 5 == 0) {\n      str = &quot;Buzz&quot;;\n    } else {\n      str = i;\n    }\n  }\n\n  return str;\n}\n</code></pre>\n<p>Here you have to initialize str to something, then reassign it in each <code>if</code> block.</p>\n<p>With <code>do expressions</code>, you can do the following...</p>\n<pre><code class=\"language-prettyprint\">function fizzBuzz() {\n  return do {\n    for (var i=1; i &lt;= 20; i++) {\n      if (i % 15 == 0) {\n        &quot;FizzBuzz&quot;;\n      } else if (i % 3 == 0) {\n        &quot;Fizz&quot;;\n      } else if (i % 5 == 0) {\n        &quot;Buzz&quot;;\n      } else {\n        i;\n      }\n    }\n  }\n}\n</code></pre>\n<p>With <code>do expressions</code>, you don't need to initialize <code>str</code>, you can simply return the entire <code>do expression</code>. Each <code>if</code> gets evaluated, and the one that ends up being truthy simply returns its value out of the expression.</p>\n<p>So, how about for a Redux reducer?</p>\n<p>Well, most Redux reducer's are written in <code>switch</code> statements. Not a big deal, but I was curious if I could use a <code>do</code> and some <code>if</code> statements since I'm not the biggest fan of <code>switch</code> statements.</p>\n<p>For example, this code is taken from a todomvc example...</p>\n<pre><code class=\"language-prettyprint\">function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      return [...state, {\n        id: state.reduce((maxId, todo) =&gt;\n          Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text: action.text\n      }];\n    }\n    case DELETE_TODO: {\n      return state.filter(todo =&gt;\n        todo.id !== action.id\n      );\n    }\n    default:\n      return state;\n  }\n}\n</code></pre>\n<p>Pretty straightforward, now check out the same reducer with <code>if</code>'s inside of a <code>do expression</code>...</p>\n<pre><code class=\"language-prettyprint\">function todos(state = initialState, { type, text, id }) {\n  return do {\n    if (type === ADD_TODO) { \n      [...state, {\n        id: state.reduce((maxId, todo) =&gt;\n          Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text\n      }];\n    }\n\n    if (type === DELETE_TODO) {\n      state.filter(todo =&gt; todo.id !== id);\n    }\n\n    state;\n  }\n}\n</code></pre>\n<p>It's nice that you don't have to see <code>return </code> but once, and we've gotten rid of the <code>switch</code>. Not sure which one is better, but it's cool to have different options to build reducers in.</p>\n<p>Feel free to discuss in the comments below!</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"52","plaintext":"There's an interesting proposal that's stage 1 currently (as of 9/26/2017)\ncalled do expressions. Thanks to the magic that is Babel, you can already go\nahead and try this out with the do expression transform... \nhttps://babeljs.io/docs/plugins/transform-do-expressions/.\n\nThe basic idea is that you can have a block of code such as a few if statements,\nor a try catch, wrap them in a do { }, and whatever the final statement\nevaluates to, can be returned.\n\nFor example, have a look at a standard if block...\n\nfunction fizzBuzz() {\n  let str;\n\n  for (var i=1; i <= 20; i++) {\n    if (i % 15 == 0) {\n      str = \"FizzBuzz\";\n    } else if (i % 3 == 0) {\n      str = \"Fizz\";\n    } else if (i % 5 == 0) {\n      str = \"Buzz\";\n    } else {\n      str = i;\n    }\n  }\n\n  return str;\n}\n\n\nHere you have to initialize str to something, then reassign it in each if block.\n\nWith do expressions, you can do the following...\n\nfunction fizzBuzz() {\n  return do {\n    for (var i=1; i <= 20; i++) {\n      if (i % 15 == 0) {\n        \"FizzBuzz\";\n      } else if (i % 3 == 0) {\n        \"Fizz\";\n      } else if (i % 5 == 0) {\n        \"Buzz\";\n      } else {\n        i;\n      }\n    }\n  }\n}\n\n\nWith do expressions, you don't need to initialize str, you can simply return the\nentire do expression. Each if gets evaluated, and the one that ends up being\ntruthy simply returns its value out of the expression.\n\nSo, how about for a Redux reducer?\n\nWell, most Redux reducer's are written in switch statements. Not a big deal, but\nI was curious if I could use a do and some if statements since I'm not the\nbiggest fan of switch statements.\n\nFor example, this code is taken from a todomvc example...\n\nfunction todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      return [...state, {\n        id: state.reduce((maxId, todo) =>\n          Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text: action.text\n      }];\n    }\n    case DELETE_TODO: {\n      return state.filter(todo =>\n        todo.id !== action.id\n      );\n    }\n    default:\n      return state;\n  }\n}\n\n\nPretty straightforward, now check out the same reducer with if's inside of a do\nexpression...\n\nfunction todos(state = initialState, { type, text, id }) {\n  return do {\n    if (type === ADD_TODO) { \n      [...state, {\n        id: state.reduce((maxId, todo) =>\n          Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text\n      }];\n    }\n\n    if (type === DELETE_TODO) {\n      state.filter(todo => todo.id !== id);\n    }\n\n    state;\n  }\n}\n\n\nIt's nice that you don't have to see return but once, and we've gotten rid of\nthe switch. Not sure which one is better, but it's cool to have different\noptions to build reducers in.\n\nFeel free to discuss in the comments below!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"This post briefly covers the new ecmascript proprosal for do expressions, and how you can use them for building Redux reducers","author_id":"1","created_at":"2017-09-26 20:24:58","updated_at":"2017-09-26 20:59:09","published_at":"2017-09-26 20:55:35","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220575","uuid":"2f700f3d-3a53-4822-91a9-9b4bc2164bb3","title":"Why would you NOT use TypeScript?","slug":"why-would-you-not-use-typescript","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In a world where JavaScript is arguably the [most popular](https://insights.stackoverflow.com/survey/2017#technology) tool for building software these days, it seems like it's everywhere now. With node.js, it's on the backend, with Electron it's native on your machine, with React Native, it's native on your phone. There's no doubt that JavaScript is nothing but at least pervasive across so many ecosystems.\\n\\nSo, the next question I have is, if JavaScript is so popular, then TypeScript by nature of what is is, also should be popular. After all, in case you didn't realize it...\\n\\n> Any JavaScript you can possibly write which is at least ECMA stage 3 is valid TypeScript.\\n\\n![](/content/images/2017/12/itstrue.gif)\\n\\n### VSCode\\n\\nFirst and foremost, if you're not using Visual Studio Code to write JavaScript, you should be, so [go get it](https://code.visualstudio.com/), and also go get [all this stuff](http://vscodecandothat.com/) from [Burke Holland](https://twitter.com/burkeholland).\\n\\nUnder the covers, the TypeScript compiler will do a lot of amazing things for you without you even having to think twice about it. The reason it's able to do this is, VS Code is running your JavaScript through the TypeScript compiler whether you know it or not!\\n\\nhttps://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio\\n\\nOn top of that, it also uses something called Automatic Type Definitions using the phenomenal [Definitely Typed](https://github.com/DefinitelyTyped/DefinitelyTyped) library of type definitions to automatically download types for thousands of popular JavaScript libraries.\\n\\n### From JS to TS, TypeScript's got you\\nIn the following example, we're simply formatting a price string.\\n\\n```prettyprint lang-js\\nconst formatPrice = (num, symbol = \\\"$\\\") =>\\n  `${symbol}${num.toFixed(2)}`;\\n\\nformatPrice(\\\"1234\\\");\\n```\\n\\nIt could be easy to forget that if pass a string here, this function will asplode because `toFixed` doesn't exist on a string.\\n\\nSimply adding types can save you runtime bugs...\\n\\n```prettyprint lang-ts\\nconst formatPrice = (num: number, symbol = \\\"$\\\": string) =>\\n  `${symbol}${num.toFixed(2)}`;\\n\\nformatPrice(\\\"1234\\\"); // num.toFixed is not a function\\n```\\n\\nBut, there's even better news...\\n\\n![](/content/images/2018/01/jstscheckmorpheus.jpg)\\n\\nYou may or may not already be a big user of JSDoc, but if you are, you will be pleased as punch to know that as of a recent version of TypeScript, you can add `// @ts-check` to the top of a JavaScript file, and get typechcking in it!\\n\\n```\\n// @ts-check\\n\\n/**\\n * Format a price\\n * @param num {number} The price\\n * @param symbol {string} The currency symbol\\n */\\nconst formatPrice = (num, symbol = \\\"$\\\") => `${symbol}${num.toFixed(2)}`;\\n\\nformatPrice(\\\"1234\\\");\\n```\\n\\n![](/content/images/2018/01/format.png)\\n\\nHere's more info about what all you can do with JSDoc... https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript\\n\\nWith VSCode you can enable full type typechecking with the following User Settings option...\\n\\n```prettyprint lang-js\\n\\\"javascript.implicitProjectConfig.checkJs\\\": true\\n```\\n\\n### React\\nCool thing is, TypeScript also supports React out of the box by adding the following to your tsconfig...\\n\\n```prettyprint lang-json\\n{\\n  \\\"jsx\\\": \\\"react\\\"\\n}\\n```\\n\\nNow for the real fun...\\n\\n![](/content/images/2018/01/reactproptypes.jpeg)\\n\\nPropTypes are a great way to catch runtime React bugs. But the frustrating thing about them is, you don't know if something is broken generally until your app builds, the browser or hot loading reloads, and you see a cryptic red error message in the console.\\n\\nWouldn't it be nice to just catch that bug while working on the component?\\n\\n```prettyprint lang-ts\\nimport * as React from \\\"react\\\";\\nimport formatPrice from \\\"../utils/formatPrice\\\";\\n\\nexport interface IPriceProps  {\\n  num: number;\\n  symbol: \\\"$\\\" | \\\"€\\\" | \\\"£\\\";\\n}\\n\\nconst Price: React.SFC<IPriceProps> = ({\\n  num,\\n  symbol,\\n}: IPriceProps) => (\\n  <div>\\n    <h3>{formatPrice(num, symbol)}</h3>\\n  </div>\\n);\\n```\\n\\nNow, check this out...\\n\\n![](/content/images/2018/01/Screen-Capture-on-2018-01-29-at-22-52-24.gif)\\n\\nIt's amazing to be able to get intellisense on props. You can start typing, or in VSCode hit Control + Space to pull open the Intellisense menu.\\n\\nYou can even get intellisense on React classes as well...\\n\\n![](/content/images/2018/01/Screen-Shot-on-2018-01-29-at-22_55_40.png)\\n\\n### Conclusion\\nWhether or not you decide to go full on TypeScript, it's clear you can see many benefits even if you stick with pure JavaScript.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>In a world where JavaScript is arguably the <a href=\"https://insights.stackoverflow.com/survey/2017#technology\">most popular</a> tool for building software these days, it seems like it's everywhere now. With node.js, it's on the backend, with Electron it's native on your machine, with React Native, it's native on your phone. There's no doubt that JavaScript is nothing but at least pervasive across so many ecosystems.</p>\n<p>So, the next question I have is, if JavaScript is so popular, then TypeScript by nature of what is is, also should be popular. After all, in case you didn't realize it...</p>\n<blockquote>\n<p>Any JavaScript you can possibly write which is at least ECMA stage 3 is valid TypeScript.</p>\n</blockquote>\n<p><img src=\"/content/images/2017/12/itstrue.gif\" alt=\"\"></p>\n<h3 id=\"vscode\">VSCode</h3>\n<p>First and foremost, if you're not using Visual Studio Code to write JavaScript, you should be, so <a href=\"https://code.visualstudio.com/\">go get it</a>, and also go get <a href=\"http://vscodecandothat.com/\">all this stuff</a> from <a href=\"https://twitter.com/burkeholland\">Burke Holland</a>.</p>\n<p>Under the covers, the TypeScript compiler will do a lot of amazing things for you without you even having to think twice about it. The reason it's able to do this is, VS Code is running your JavaScript through the TypeScript compiler whether you know it or not!</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio\">https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio</a></p>\n<p>On top of that, it also uses something called Automatic Type Definitions using the phenomenal <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">Definitely Typed</a> library of type definitions to automatically download types for thousands of popular JavaScript libraries.</p>\n<h3 id=\"fromjstotstypescriptsgotyou\">From JS to TS, TypeScript's got you</h3>\n<p>In the following example, we're simply formatting a price string.</p>\n<pre><code class=\"language-prettyprint\">const formatPrice = (num, symbol = &quot;$&quot;) =&gt;\n  `${symbol}${num.toFixed(2)}`;\n\nformatPrice(&quot;1234&quot;);\n</code></pre>\n<p>It could be easy to forget that if pass a string here, this function will asplode because <code>toFixed</code> doesn't exist on a string.</p>\n<p>Simply adding types can save you runtime bugs...</p>\n<pre><code class=\"language-prettyprint\">const formatPrice = (num: number, symbol = &quot;$&quot;: string) =&gt;\n  `${symbol}${num.toFixed(2)}`;\n\nformatPrice(&quot;1234&quot;); // num.toFixed is not a function\n</code></pre>\n<p>But, there's even better news...</p>\n<p><img src=\"/content/images/2018/01/jstscheckmorpheus.jpg\" alt=\"\"></p>\n<p>You may or may not already be a big user of JSDoc, but if you are, you will be pleased as punch to know that as of a recent version of TypeScript, you can add <code>// @ts-check</code> to the top of a JavaScript file, and get typechcking in it!</p>\n<pre><code>// @ts-check\n\n/**\n * Format a price\n * @param num {number} The price\n * @param symbol {string} The currency symbol\n */\nconst formatPrice = (num, symbol = &quot;$&quot;) =&gt; `${symbol}${num.toFixed(2)}`;\n\nformatPrice(&quot;1234&quot;);\n</code></pre>\n<p><img src=\"/content/images/2018/01/format.png\" alt=\"\"></p>\n<p>Here's more info about what all you can do with JSDoc... <a href=\"https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript\">https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript</a></p>\n<p>With VSCode you can enable full type typechecking with the following User Settings option...</p>\n<pre><code class=\"language-prettyprint\">&quot;javascript.implicitProjectConfig.checkJs&quot;: true\n</code></pre>\n<h3 id=\"react\">React</h3>\n<p>Cool thing is, TypeScript also supports React out of the box by adding the following to your tsconfig...</p>\n<pre><code class=\"language-prettyprint\">{\n  &quot;jsx&quot;: &quot;react&quot;\n}\n</code></pre>\n<p>Now for the real fun...</p>\n<p><img src=\"/content/images/2018/01/reactproptypes.jpeg\" alt=\"\"></p>\n<p>PropTypes are a great way to catch runtime React bugs. But the frustrating thing about them is, you don't know if something is broken generally until your app builds, the browser or hot loading reloads, and you see a cryptic red error message in the console.</p>\n<p>Wouldn't it be nice to just catch that bug while working on the component?</p>\n<pre><code class=\"language-prettyprint\">import * as React from &quot;react&quot;;\nimport formatPrice from &quot;../utils/formatPrice&quot;;\n\nexport interface IPriceProps  {\n  num: number;\n  symbol: &quot;$&quot; | &quot;€&quot; | &quot;£&quot;;\n}\n\nconst Price: React.SFC&lt;IPriceProps&gt; = ({\n  num,\n  symbol,\n}: IPriceProps) =&gt; (\n  &lt;div&gt;\n    &lt;h3&gt;{formatPrice(num, symbol)}&lt;/h3&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<p>Now, check this out...</p>\n<p><img src=\"/content/images/2018/01/Screen-Capture-on-2018-01-29-at-22-52-24.gif\" alt=\"\"></p>\n<p>It's amazing to be able to get intellisense on props. You can start typing, or in VSCode hit Control + Space to pull open the Intellisense menu.</p>\n<p>You can even get intellisense on React classes as well...</p>\n<p><img src=\"/content/images/2018/01/Screen-Shot-on-2018-01-29-at-22_55_40.png\" alt=\"\"></p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Whether or not you decide to go full on TypeScript, it's clear you can see many benefits even if you stick with pure JavaScript.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"53","plaintext":"In a world where JavaScript is arguably the most popular\n[https://insights.stackoverflow.com/survey/2017#technology] tool for building\nsoftware these days, it seems like it's everywhere now. With node.js, it's on\nthe backend, with Electron it's native on your machine, with React Native, it's\nnative on your phone. There's no doubt that JavaScript is nothing but at least\npervasive across so many ecosystems.\n\nSo, the next question I have is, if JavaScript is so popular, then TypeScript by\nnature of what is is, also should be popular. After all, in case you didn't\nrealize it...\n\n> Any JavaScript you can possibly write which is at least ECMA stage 3 is valid\nTypeScript.\n\n\n\n\nVSCode\nFirst and foremost, if you're not using Visual Studio Code to write JavaScript,\nyou should be, so go get it [https://code.visualstudio.com/], and also go get \nall this stuff [http://vscodecandothat.com/] from Burke Holland\n[https://twitter.com/burkeholland].\n\nUnder the covers, the TypeScript compiler will do a lot of amazing things for\nyou without you even having to think twice about it. The reason it's able to do\nthis is, VS Code is running your JavaScript through the TypeScript compiler\nwhether you know it or not!\n\nhttps://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio\n\nOn top of that, it also uses something called Automatic Type Definitions using\nthe phenomenal Definitely Typed\n[https://github.com/DefinitelyTyped/DefinitelyTyped] library of type definitions\nto automatically download types for thousands of popular JavaScript libraries.\n\nFrom JS to TS, TypeScript's got you\nIn the following example, we're simply formatting a price string.\n\nconst formatPrice = (num, symbol = \"$\") =>\n  `${symbol}${num.toFixed(2)}`;\n\nformatPrice(\"1234\");\n\n\nIt could be easy to forget that if pass a string here, this function will\nasplode because toFixed doesn't exist on a string.\n\nSimply adding types can save you runtime bugs...\n\nconst formatPrice = (num: number, symbol = \"$\": string) =>\n  `${symbol}${num.toFixed(2)}`;\n\nformatPrice(\"1234\"); // num.toFixed is not a function\n\n\nBut, there's even better news...\n\n\n\nYou may or may not already be a big user of JSDoc, but if you are, you will be\npleased as punch to know that as of a recent version of TypeScript, you can add \n// @ts-check to the top of a JavaScript file, and get typechcking in it!\n\n// @ts-check\n\n/**\n * Format a price\n * @param num {number} The price\n * @param symbol {string} The currency symbol\n */\nconst formatPrice = (num, symbol = \"$\") => `${symbol}${num.toFixed(2)}`;\n\nformatPrice(\"1234\");\n\n\n\n\nHere's more info about what all you can do with JSDoc... \nhttps://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript\n\nWith VSCode you can enable full type typechecking with the following User\nSettings option...\n\n\"javascript.implicitProjectConfig.checkJs\": true\n\n\nReact\nCool thing is, TypeScript also supports React out of the box by adding the\nfollowing to your tsconfig...\n\n{\n  \"jsx\": \"react\"\n}\n\n\nNow for the real fun...\n\n\n\nPropTypes are a great way to catch runtime React bugs. But the frustrating thing\nabout them is, you don't know if something is broken generally until your app\nbuilds, the browser or hot loading reloads, and you see a cryptic red error\nmessage in the console.\n\nWouldn't it be nice to just catch that bug while working on the component?\n\nimport * as React from \"react\";\nimport formatPrice from \"../utils/formatPrice\";\n\nexport interface IPriceProps  {\n  num: number;\n  symbol: \"$\" | \"€\" | \"£\";\n}\n\nconst Price: React.SFC<IPriceProps> = ({\n  num,\n  symbol,\n}: IPriceProps) => (\n  <div>\n    <h3>{formatPrice(num, symbol)}</h3>\n  </div>\n);\n\n\nNow, check this out...\n\n\n\nIt's amazing to be able to get intellisense on props. You can start typing, or\nin VSCode hit Control + Space to pull open the Intellisense menu.\n\nYou can even get intellisense on React classes as well...\n\n\n\nConclusion\nWhether or not you decide to go full on TypeScript, it's clear you can see many\nbenefits even if you stick with pure JavaScript.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-22 21:56:20","updated_at":"2018-02-02 04:59:54","published_at":"2018-02-02 00:22:26","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220576","uuid":"0f7d0c56-404f-4aac-9c4a-b1549608fa5a","title":"Brite future","slug":"brite-future","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The past almost 4 years I've spent at Lonely Planet are coming to an end, and I'm excited to be joining the Front End Platform Team at Eventbrite! When I started at Lonely Planet 4 years ago. React was barely a thing, node was at version 0.10.33, and Angular was juggernaut framework everyone was learning. I've learned a ton and can't thank my team enough for the fun we've had over the last few years.\\n\\nEventbrite has a great set of values starting with...\\n\\n> Bringing the world together through live experiences\\n\\nIt'll be great to be a part of the team that helps bring not only the Eventbrite engineering team together, but also helps build a platform for anyone to enjoy experiences together.\\n\\nIt's never easy to leave a job, especially after being there almost 4 years. But, I am very excited about what the future holds and can't wait to start.\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>The past almost 4 years I've spent at Lonely Planet are coming to an end, and I'm excited to be joining the Front End Platform Team at Eventbrite! When I started at Lonely Planet 4 years ago. React was barely a thing, node was at version 0.10.33, and Angular was juggernaut framework everyone was learning. I've learned a ton and can't thank my team enough for the fun we've had over the last few years.</p>\n<p>Eventbrite has a great set of values starting with...</p>\n<blockquote>\n<p>Bringing the world together through live experiences</p>\n</blockquote>\n<p>It'll be great to be a part of the team that helps bring not only the Eventbrite engineering team together, but also helps build a platform for anyone to enjoy experiences together.</p>\n<p>It's never easy to leave a job, especially after being there almost 4 years. But, I am very excited about what the future holds and can't wait to start.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"54","plaintext":"The past almost 4 years I've spent at Lonely Planet are coming to an end, and\nI'm excited to be joining the Front End Platform Team at Eventbrite! When I\nstarted at Lonely Planet 4 years ago. React was barely a thing, node was at\nversion 0.10.33, and Angular was juggernaut framework everyone was learning.\nI've learned a ton and can't thank my team enough for the fun we've had over the\nlast few years.\n\nEventbrite has a great set of values starting with...\n\n> Bringing the world together through live experiences\n\n\nIt'll be great to be a part of the team that helps bring not only the Eventbrite\nengineering team together, but also helps build a platform for anyone to enjoy\nexperiences together.\n\nIt's never easy to leave a job, especially after being there almost 4 years.\nBut, I am very excited about what the future holds and can't wait to start.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-06-08 18:51:17","updated_at":"2018-06-08 19:09:56","published_at":"2018-06-08 19:01:18","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220577","uuid":"93e4cb93-de5e-4836-b97f-c9002b946ffe","title":"WebPack production environment is NOT the NODE_ENV or BABEL_ENV environment variable","slug":"webpack-production-environment-is-not-the-node_env-or-babel_env-environment-variable","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"A revelation came to me the other day when I was reviewing some of our bundling processes at Eventbrite.\\n\\nWe currently run production bundles like this...\\n\\n```\\nnode --max_old_space_size=4096\\\\\\n ./node_modules/.bin/webpack \\\\\\n --bail \\\\\\n --config-name node \\\\\\n --env.production \\\\\\n --config ./config/webpack.production.config.js        \\n```\\n\\nNotice the `--env.production` in there. \\n\\nWe also use the `babel-loader` along with the `babel-preset-env` plugin as any good citizen would.\\n\\nHere's what's interesting.\\n\\n> `--env.production` does NOT set `NODE_ENV=production`\\n\\nI proceeded to hover over the `environment` key on my .babelrc in VSCode, and got this little nugget.\\n\\n![](https://d.pr/i/VbEYd6+)\\n\\nI then found the exact quote from the old [62.6 docs](https://babeljs.io/docs/en/6.26.3/babelrc#env-option) (we're still on Babel 6 for now).\\n\\n> The env key will be taken from process.env.BABEL\\\\_ENV, when this is not available then it uses process.env.NODE\\\\_ENV if even that is not available then it defaults to \\\"development\\\".\\n\\nAlright so basically that means we've been running Babel as dev mode! \\n\\n![](/content/images/2019/04/doh.gif)\\n\\nWhat does that `--env.production` thing even do?\\n\\nWell, according to https://webpack.js.org/guides/environment-variables, all it does is make it so when you setup your webpack config, you actually export a function that gives you an `env`, and evidently you can also set your actual NODE_ENV like...\\n\\n```\\nwebpack --env.NODE_ENV=local --env.production --progress\\n```\\n\\nThen you you can get that `env` in the config callback.\\n\\n```\\nmodule.exports = env => {\\n  // Use env.<YOUR VARIABLE> here:\\n  console.log('NODE_ENV: ', env.NODE_ENV); // 'local'\\n  console.log('Production: ', env.production); // true\\n```\\n\\n### DefinePlugin\\nHere's the thing though, just running `NODE_ENV=production webpack` doesn't necessarily give you production bundles either. \\n\\n`NODE_ENV=production` just tells node in what mode to actually run webpack. \\n\\nMeaning, if you have code in your app which does...\\n\\n```\\nif (process.env.NODE_ENV === 'production') {\\n  // do production things\\n}\\n```\\n\\nIt will simply leave those in place.\\n\\nIn order to make your output code reflect the proper NODE_ENV you have to use either the EnvironmentPlugin or the DefinePlugin. (The EnvironmentPlugin uses Define under the covers).\\n\\nI personally prefer the explicitness of the DefinePlugin...\\n\\n```\\nnew webpack.DefinePlugin({\\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\\n});\\n```\\n\\nOr if you had passed in the `--env.production` thing, you could do like...\\n\\n```\\nnew webpack.DefinePlugin({\\n  'process.env.NODE_ENV': env.production ?\\n    JSON.stringify('production'),\\n    JSON.stringify('development'),\\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\\n});\\n```\\n\\np.s. You have to do the `JSON.stringify` thing so that in your code it'll do...\\n\\n```\\nif (process.env.NODE_ENV === 'production')\\n\\n// Converts the above to\\n\\nif ('production' === 'production')\\n```\\n\\n### webpack 4\\n\\nIn webpack 4, what's nice is, there is a webpack configuration setting called `mode`. And when you set `mode: \\\"production\\\"`, it goes ahead and sets up the DefinePlugin for you. \\n\\nHowever, you still may run into a scenario where you need to make sure that the `babel-loader` knows your `NODE_ENV=production`. So, just keep a close eye on it.\\n\\n# tldr;\\n\\nMake sure when you're doing production webpack builds involving babel, particularly in webpack 3 where you don't have the `mode` option, make sure to set `NODE_ENV=production` when you run webpack.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>A revelation came to me the other day when I was reviewing some of our bundling processes at Eventbrite.</p>\n<p>We currently run production bundles like this...</p>\n<pre><code>node --max_old_space_size=4096\\\n ./node_modules/.bin/webpack \\\n --bail \\\n --config-name node \\\n --env.production \\\n --config ./config/webpack.production.config.js        \n</code></pre>\n<p>Notice the <code>--env.production</code> in there.</p>\n<p>We also use the <code>babel-loader</code> along with the <code>babel-preset-env</code> plugin as any good citizen would.</p>\n<p>Here's what's interesting.</p>\n<blockquote>\n<p><code>--env.production</code> does NOT set <code>NODE_ENV=production</code></p>\n</blockquote>\n<p>I proceeded to hover over the <code>environment</code> key on my .babelrc in VSCode, and got this little nugget.</p>\n<p><img src=\"https://d.pr/i/VbEYd6+\" alt=\"\"></p>\n<p>I then found the exact quote from the old <a href=\"https://babeljs.io/docs/en/6.26.3/babelrc#env-option\">62.6 docs</a> (we're still on Babel 6 for now).</p>\n<blockquote>\n<p>The env key will be taken from process.env.BABEL_ENV, when this is not available then it uses process.env.NODE_ENV if even that is not available then it defaults to &quot;development&quot;.</p>\n</blockquote>\n<p>Alright so basically that means we've been running Babel as dev mode!</p>\n<p><img src=\"/content/images/2019/04/doh.gif\" alt=\"\"></p>\n<p>What does that <code>--env.production</code> thing even do?</p>\n<p>Well, according to <a href=\"https://webpack.js.org/guides/environment-variables\">https://webpack.js.org/guides/environment-variables</a>, all it does is make it so when you setup your webpack config, you actually export a function that gives you an <code>env</code>, and evidently you can also set your actual NODE_ENV like...</p>\n<pre><code>webpack --env.NODE_ENV=local --env.production --progress\n</code></pre>\n<p>Then you you can get that <code>env</code> in the config callback.</p>\n<pre><code>module.exports = env =&gt; {\n  // Use env.&lt;YOUR VARIABLE&gt; here:\n  console.log('NODE_ENV: ', env.NODE_ENV); // 'local'\n  console.log('Production: ', env.production); // true\n</code></pre>\n<h3 id=\"defineplugin\">DefinePlugin</h3>\n<p>Here's the thing though, just running <code>NODE_ENV=production webpack</code> doesn't necessarily give you production bundles either.</p>\n<p><code>NODE_ENV=production</code> just tells node in what mode to actually run webpack.</p>\n<p>Meaning, if you have code in your app which does...</p>\n<pre><code>if (process.env.NODE_ENV === 'production') {\n  // do production things\n}\n</code></pre>\n<p>It will simply leave those in place.</p>\n<p>In order to make your output code reflect the proper NODE_ENV you have to use either the EnvironmentPlugin or the DefinePlugin. (The EnvironmentPlugin uses Define under the covers).</p>\n<p>I personally prefer the explicitness of the DefinePlugin...</p>\n<pre><code>new webpack.DefinePlugin({\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\n});\n</code></pre>\n<p>Or if you had passed in the <code>--env.production</code> thing, you could do like...</p>\n<pre><code>new webpack.DefinePlugin({\n  'process.env.NODE_ENV': env.production ?\n    JSON.stringify('production'),\n    JSON.stringify('development'),\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\n});\n</code></pre>\n<p>p.s. You have to do the <code>JSON.stringify</code> thing so that in your code it'll do...</p>\n<pre><code>if (process.env.NODE_ENV === 'production')\n\n// Converts the above to\n\nif ('production' === 'production')\n</code></pre>\n<h3 id=\"webpack4\">webpack 4</h3>\n<p>In webpack 4, what's nice is, there is a webpack configuration setting called <code>mode</code>. And when you set <code>mode: &quot;production&quot;</code>, it goes ahead and sets up the DefinePlugin for you.</p>\n<p>However, you still may run into a scenario where you need to make sure that the <code>babel-loader</code> knows your <code>NODE_ENV=production</code>. So, just keep a close eye on it.</p>\n<h1 id=\"tldr\">tldr;</h1>\n<p>Make sure when you're doing production webpack builds involving babel, particularly in webpack 3 where you don't have the <code>mode</code> option, make sure to set <code>NODE_ENV=production</code> when you run webpack.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"55","plaintext":"A revelation came to me the other day when I was reviewing some of our bundling\nprocesses at Eventbrite.\n\nWe currently run production bundles like this...\n\nnode --max_old_space_size=4096\\\n ./node_modules/.bin/webpack \\\n --bail \\\n --config-name node \\\n --env.production \\\n --config ./config/webpack.production.config.js        \n\n\nNotice the --env.production in there.\n\nWe also use the babel-loader along with the babel-preset-env plugin as any good\ncitizen would.\n\nHere's what's interesting.\n\n> --env.production does NOT set NODE_ENV=production\n\n\nI proceeded to hover over the environment key on my .babelrc in VSCode, and got\nthis little nugget.\n\n\n\nI then found the exact quote from the old 62.6 docs\n[https://babeljs.io/docs/en/6.26.3/babelrc#env-option] (we're still on Babel 6\nfor now).\n\n> The env key will be taken from process.env.BABEL_ENV, when this is not available\nthen it uses process.env.NODE_ENV if even that is not available then it defaults\nto \"development\".\n\n\nAlright so basically that means we've been running Babel as dev mode!\n\n\n\nWhat does that --env.production thing even do?\n\nWell, according to https://webpack.js.org/guides/environment-variables, all it\ndoes is make it so when you setup your webpack config, you actually export a\nfunction that gives you an env, and evidently you can also set your actual\nNODE_ENV like...\n\nwebpack --env.NODE_ENV=local --env.production --progress\n\n\nThen you you can get that env in the config callback.\n\nmodule.exports = env => {\n  // Use env.<YOUR VARIABLE> here:\n  console.log('NODE_ENV: ', env.NODE_ENV); // 'local'\n  console.log('Production: ', env.production); // true\n\n\nDefinePlugin\nHere's the thing though, just running NODE_ENV=production webpack doesn't\nnecessarily give you production bundles either.\n\nNODE_ENV=production just tells node in what mode to actually run webpack.\n\nMeaning, if you have code in your app which does...\n\nif (process.env.NODE_ENV === 'production') {\n  // do production things\n}\n\n\nIt will simply leave those in place.\n\nIn order to make your output code reflect the proper NODE_ENV you have to use\neither the EnvironmentPlugin or the DefinePlugin. (The EnvironmentPlugin uses\nDefine under the covers).\n\nI personally prefer the explicitness of the DefinePlugin...\n\nnew webpack.DefinePlugin({\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\n});\n\n\nOr if you had passed in the --env.production thing, you could do like...\n\nnew webpack.DefinePlugin({\n  'process.env.NODE_ENV': env.production ?\n    JSON.stringify('production'),\n    JSON.stringify('development'),\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\n});\n\n\np.s. You have to do the JSON.stringify thing so that in your code it'll do...\n\nif (process.env.NODE_ENV === 'production')\n\n// Converts the above to\n\nif ('production' === 'production')\n\n\nwebpack 4\nIn webpack 4, what's nice is, there is a webpack configuration setting called \nmode. And when you set mode: \"production\", it goes ahead and sets up the\nDefinePlugin for you.\n\nHowever, you still may run into a scenario where you need to make sure that the \nbabel-loader knows your NODE_ENV=production. So, just keep a close eye on it.\n\ntldr;\nMake sure when you're doing production webpack builds involving babel,\nparticularly in webpack 3 where you don't have the mode option, make sure to set \nNODE_ENV=production when you run webpack.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Make sure when you're doing production webpack builds involving babel, particularly in webpack 3 where you don't have the `mode` option, make sure to set `NODE_ENV=production` when you run webpack","author_id":"1","created_at":"2019-04-12 14:42:29","updated_at":"2019-04-12 16:00:49","published_at":"2019-04-12 15:55:13","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220578","uuid":"e6d86e00-32f5-4919-a8b6-e70fa915a0ba","title":"Creating a build system inside of a monorepo","slug":"creating-a-build-system-inside-of-a-monorepo","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There are a lot of benefits to using a [monorepo](https://danluu.com/monorepo/) that you can read all about\\n\\n* https://pspdfkit.com/blog/2019/benefits-of-a-monorepo/\\n* https://dev.to/ben/why-might-a-projectcompany-use-a-monorepo-5b97\\n\\n> monorepo: all your stuff in one giant repo 😱\\n\\nThe most important part of using a monorepo structure however, is the tooling. Without good tooling the whole thing falls apart.\\n\\n### Monorepo JavaScript Libraries\\n\\nIn the JavaScript ecosystem, there are several tools to help with monorepos. [Yarn](https://github.com/yarnpkg/yarn/) itself actually supports monorepos through it's [workspaces](https://yarnpkg.com/lang/en/docs/workspaces/). Yarn only offers basic folder structure support though, and a way to execute \\\"npm scripts\\\" from each workspaces. The most common tool for monorepos because of all the utilities it offers is [Lerna](https://github.com/lerna/lerna). It has all kinds of helpful tools inside of it for managing many many packages. It was originally created to manage the [Babel](https://github.com/babel/babel) project. And another tool rising in popularity is [Bolt ⚡️](https://github.com/boltpkg/bolt). It was created to solve some additional complexities around dependency chains. Under the covers, Bolt uses yarn workspaces.\\n\\n### Repo setup\\nLet's get started with a basic yarn workspaces setup as in many cases, that's all you might need.\\n\\n```\\nnpm i -g yarn\\nmkdir -p /path/to/your/epic/monorepo && cd /path/to/your/epic/monorepo\\nyarn init -y\\nmkdir packages\\nmkdir tools\\n```\\n\\n![](/content/images/2019/05/yodawg.jpg)\\n\\nAdd a workspaces config to your `package.json`...\\n\\n```\\n\\\"private\\\": true,\\n\\\"workspaces\\\": [\\\"packages/*\\\", \\\"tools/*\\\"]\\n```\\n\\n💥you're off fo the races.\\n\\n### All your developer tools are belong to us\\nThese days, my favorite build set of developer tools is...\\n\\n* Babel for transpiling\\n* WebPack for bundling\\n* Jest for testing\\n\\n```\\n{\\n    \\\"devDependencies\\\": {\\n        \\\"@babel/cli\\\": \\\"^7.2.3\\\",\\n        \\\"@babel/core\\\": \\\"^7.2.2\\\",\\n        \\\"@babel/preset-env\\\": \\\"^7.3.1\\\",\\n        \\\"@babel/preset-react\\\": \\\"^7.0.0\\\",\\n        \\\"@babel/preset-typescript\\\": \\\"^7.1.0\\\",\\n    }\\n}\\n```\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>There are a lot of benefits to using a <a href=\"https://danluu.com/monorepo/\">monorepo</a> that you can read all about</p>\n<ul>\n<li><a href=\"https://pspdfkit.com/blog/2019/benefits-of-a-monorepo/\">https://pspdfkit.com/blog/2019/benefits-of-a-monorepo/</a></li>\n<li><a href=\"https://dev.to/ben/why-might-a-projectcompany-use-a-monorepo-5b97\">https://dev.to/ben/why-might-a-projectcompany-use-a-monorepo-5b97</a></li>\n</ul>\n<blockquote>\n<p>monorepo: all your stuff in one giant repo 😱</p>\n</blockquote>\n<p>The most important part of using a monorepo structure however, is the tooling. Without good tooling the whole thing falls apart.</p>\n<h3 id=\"monorepojavascriptlibraries\">Monorepo JavaScript Libraries</h3>\n<p>In the JavaScript ecosystem, there are several tools to help with monorepos. <a href=\"https://github.com/yarnpkg/yarn/\">Yarn</a> itself actually supports monorepos through it's <a href=\"https://yarnpkg.com/lang/en/docs/workspaces/\">workspaces</a>. Yarn only offers basic folder structure support though, and a way to execute &quot;npm scripts&quot; from each workspaces. The most common tool for monorepos because of all the utilities it offers is <a href=\"https://github.com/lerna/lerna\">Lerna</a>. It has all kinds of helpful tools inside of it for managing many many packages. It was originally created to manage the <a href=\"https://github.com/babel/babel\">Babel</a> project. And another tool rising in popularity is <a href=\"https://github.com/boltpkg/bolt\">Bolt ⚡️</a>. It was created to solve some additional complexities around dependency chains. Under the covers, Bolt uses yarn workspaces.</p>\n<h3 id=\"reposetup\">Repo setup</h3>\n<p>Let's get started with a basic yarn workspaces setup as in many cases, that's all you might need.</p>\n<pre><code>npm i -g yarn\nmkdir -p /path/to/your/epic/monorepo &amp;&amp; cd /path/to/your/epic/monorepo\nyarn init -y\nmkdir packages\nmkdir tools\n</code></pre>\n<p><img src=\"/content/images/2019/05/yodawg.jpg\" alt=\"\"></p>\n<p>Add a workspaces config to your <code>package.json</code>...</p>\n<pre><code>&quot;private&quot;: true,\n&quot;workspaces&quot;: [&quot;packages/*&quot;, &quot;tools/*&quot;]\n</code></pre>\n<p>💥you're off fo the races.</p>\n<h3 id=\"allyourdevelopertoolsarebelongtous\">All your developer tools are belong to us</h3>\n<p>These days, my favorite build set of developer tools is...</p>\n<ul>\n<li>Babel for transpiling</li>\n<li>WebPack for bundling</li>\n<li>Jest for testing</li>\n</ul>\n<pre><code>{\n    &quot;devDependencies&quot;: {\n        &quot;@babel/cli&quot;: &quot;^7.2.3&quot;,\n        &quot;@babel/core&quot;: &quot;^7.2.2&quot;,\n        &quot;@babel/preset-env&quot;: &quot;^7.3.1&quot;,\n        &quot;@babel/preset-react&quot;: &quot;^7.0.0&quot;,\n        &quot;@babel/preset-typescript&quot;: &quot;^7.1.0&quot;,\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"56","plaintext":"There are a lot of benefits to using a monorepo [https://danluu.com/monorepo/] \nthat you can read all about\n\n * https://pspdfkit.com/blog/2019/benefits-of-a-monorepo/\n * https://dev.to/ben/why-might-a-projectcompany-use-a-monorepo-5b97\n\n> monorepo: all your stuff in one giant repo 😱\n\n\nThe most important part of using a monorepo structure however, is the tooling.\nWithout good tooling the whole thing falls apart.\n\nMonorepo JavaScript Libraries\nIn the JavaScript ecosystem, there are several tools to help with monorepos. \nYarn [https://github.com/yarnpkg/yarn/] itself actually supports monorepos\nthrough it's workspaces [https://yarnpkg.com/lang/en/docs/workspaces/]. Yarn\nonly offers basic folder structure support though, and a way to execute \"npm\nscripts\" from each workspaces. The most common tool for monorepos because of all\nthe utilities it offers is Lerna [https://github.com/lerna/lerna]. It has all\nkinds of helpful tools inside of it for managing many many packages. It was\noriginally created to manage the Babel [https://github.com/babel/babel] project.\nAnd another tool rising in popularity is Bolt ⚡️\n[https://github.com/boltpkg/bolt]. It was created to solve some additional\ncomplexities around dependency chains. Under the covers, Bolt uses yarn\nworkspaces.\n\nRepo setup\nLet's get started with a basic yarn workspaces setup as in many cases, that's\nall you might need.\n\nnpm i -g yarn\nmkdir -p /path/to/your/epic/monorepo && cd /path/to/your/epic/monorepo\nyarn init -y\nmkdir packages\nmkdir tools\n\n\n\n\nAdd a workspaces config to your package.json...\n\n\"private\": true,\n\"workspaces\": [\"packages/*\", \"tools/*\"]\n\n\n💥you're off fo the races.\n\nAll your developer tools are belong to us\nThese days, my favorite build set of developer tools is...\n\n * Babel for transpiling\n * WebPack for bundling\n * Jest for testing\n\n{\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.2.3\",\n        \"@babel/core\": \"^7.2.2\",\n        \"@babel/preset-env\": \"^7.3.1\",\n        \"@babel/preset-react\": \"^7.0.0\",\n        \"@babel/preset-typescript\": \"^7.1.0\",\n    }\n}","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-05-07 00:49:12","updated_at":"2019-05-07 02:48:19","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a4220579","uuid":"f916ce41-3040-455e-9c62-1a45df37cb1c","title":"How WebPack decides what entry to load from a package.json","slug":"how-webpack-decides-what-entry-to-load-from-a-package-json","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Today I was working on creating a node.js bundle using webpack 4, and came across a fun little doozie of an error which lead me to do a bit of code spelunkery into how Webpack actually decides on what to load when you `require` something from `node_modules`.\\n\\nMost `package.json` files have a `main` in them, because it tells the \\\"requirer\\\" of the package what the entry point of the package is.\\n\\n> The main field is a module ID that is the primary entry point to your program. https://docs.npmjs.com/files/package.json#main\\n\\nWell, there's also a spec for defining other targets, namely the \\\"browser\\\" field.\\n\\nhttps://docs.npmjs.com/files/package.json#browser\\n\\nThere is even a proposal to add a \\\"module\\\" field. https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md, which some libraries are already taking advantage of, and Webpack can also understand it.\\n\\nIn terms of Webpack, the 3 most important ones are `main`, `browser`, and `module`. \\n\\n* `browser` should point to a browser compatible bundle\\n* `module` should point to a folder of ES modules\\n* `main` should point to whatever whatever you want the default entry to be\\n\\nIf the `target` of your app is `web` or a few others (which is default). It will look first at the `browser` field, and if it doesn't exist, it'll look for the `module`, and lastly `main`.\\n\\n```\\nif (\\n    options.target === \\\"web\\\" ||\\n    options.target === \\\"webworker\\\" ||\\n    options.target === \\\"electron-renderer\\\"\\n) {\\n    return [\\\"browser\\\", \\\"module\\\", \\\"main\\\"];\\n} else {\\n    return [\\\"module\\\", \\\"main\\\"];\\n}\\n```\\n\\nhttps://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336.\\n\\nIf your package is simply only meant to work in the browser, you can get away with only using `main`, but if you're looking to support both the web and node, then take advantage of the `browser` field by pointing it to your browser compatible bundle.\\n\\nFor me what was happening was, there's an import in one of our libraries for `isomorphic-fetch`. Well, since the target is `node` in the Webpack build I was working with, `node-fetch` actually got required. And `node-fetch` requires a library which can't be lazily loaded by Webpack. Aka this issue. https://github.com/andris9/encoding/issues/18. \\n\\n**tldr; if your Webpack target is `node`, it looks at the `module` and `main` for entry. Otherwise, it goes to the `browser`, then `module`, then `main`.**\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Today I was working on creating a node.js bundle using webpack 4, and came across a fun little doozie of an error which lead me to do a bit of code spelunkery into how Webpack actually decides on what to load when you <code>require</code> something from <code>node_modules</code>.</p>\n<p>Most <code>package.json</code> files have a <code>main</code> in them, because it tells the &quot;requirer&quot; of the package what the entry point of the package is.</p>\n<blockquote>\n<p>The main field is a module ID that is the primary entry point to your program. <a href=\"https://docs.npmjs.com/files/package.json#main\">https://docs.npmjs.com/files/package.json#main</a></p>\n</blockquote>\n<p>Well, there's also a spec for defining other targets, namely the &quot;browser&quot; field.</p>\n<p><a href=\"https://docs.npmjs.com/files/package.json#browser\">https://docs.npmjs.com/files/package.json#browser</a></p>\n<p>There is even a proposal to add a &quot;module&quot; field. <a href=\"https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md\">https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md</a>, which some libraries are already taking advantage of, and Webpack can also understand it.</p>\n<p>In terms of Webpack, the 3 most important ones are <code>main</code>, <code>browser</code>, and <code>module</code>.</p>\n<ul>\n<li><code>browser</code> should point to a browser compatible bundle</li>\n<li><code>module</code> should point to a folder of ES modules</li>\n<li><code>main</code> should point to whatever whatever you want the default entry to be</li>\n</ul>\n<p>If the <code>target</code> of your app is <code>web</code> or a few others (which is default). It will look first at the <code>browser</code> field, and if it doesn't exist, it'll look for the <code>module</code>, and lastly <code>main</code>.</p>\n<pre><code>if (\n    options.target === &quot;web&quot; ||\n    options.target === &quot;webworker&quot; ||\n    options.target === &quot;electron-renderer&quot;\n) {\n    return [&quot;browser&quot;, &quot;module&quot;, &quot;main&quot;];\n} else {\n    return [&quot;module&quot;, &quot;main&quot;];\n}\n</code></pre>\n<p><a href=\"https://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336\">https://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336</a>.</p>\n<p>If your package is simply only meant to work in the browser, you can get away with only using <code>main</code>, but if you're looking to support both the web and node, then take advantage of the <code>browser</code> field by pointing it to your browser compatible bundle.</p>\n<p>For me what was happening was, there's an import in one of our libraries for <code>isomorphic-fetch</code>. Well, since the target is <code>node</code> in the Webpack build I was working with, <code>node-fetch</code> actually got required. And <code>node-fetch</code> requires a library which can't be lazily loaded by Webpack. Aka this issue. <a href=\"https://github.com/andris9/encoding/issues/18\">https://github.com/andris9/encoding/issues/18</a>.</p>\n<p><strong>tldr; if your Webpack target is <code>node</code>, it looks at the <code>module</code> and <code>main</code> for entry. Otherwise, it goes to the <code>browser</code>, then <code>module</code>, then <code>main</code>.</strong></p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"57","plaintext":"Today I was working on creating a node.js bundle using webpack 4, and came\nacross a fun little doozie of an error which lead me to do a bit of code\nspelunkery into how Webpack actually decides on what to load when you require \nsomething from node_modules.\n\nMost package.json files have a main in them, because it tells the \"requirer\" of\nthe package what the entry point of the package is.\n\n> The main field is a module ID that is the primary entry point to your program. \nhttps://docs.npmjs.com/files/package.json#main\n\n\nWell, there's also a spec for defining other targets, namely the \"browser\"\nfield.\n\nhttps://docs.npmjs.com/files/package.json#browser\n\nThere is even a proposal to add a \"module\" field. \nhttps://github.com/dherman/defense-of-dot-js/blob/master/proposal.md, which some\nlibraries are already taking advantage of, and Webpack can also understand it.\n\nIn terms of Webpack, the 3 most important ones are main, browser, and module.\n\n * browser should point to a browser compatible bundle\n * module should point to a folder of ES modules\n * main should point to whatever whatever you want the default entry to be\n\nIf the target of your app is web or a few others (which is default). It will\nlook first at the browser field, and if it doesn't exist, it'll look for the \nmodule, and lastly main.\n\nif (\n    options.target === \"web\" ||\n    options.target === \"webworker\" ||\n    options.target === \"electron-renderer\"\n) {\n    return [\"browser\", \"module\", \"main\"];\n} else {\n    return [\"module\", \"main\"];\n}\n\n\nhttps://github.com/webpack/webpack/blob/52184b897f40c75560b3630e43ca642fcac7e2cf/lib/WebpackOptionsDefaulter.js#L336\n.\n\nIf your package is simply only meant to work in the browser, you can get away\nwith only using main, but if you're looking to support both the web and node,\nthen take advantage of the browser field by pointing it to your browser\ncompatible bundle.\n\nFor me what was happening was, there's an import in one of our libraries for \nisomorphic-fetch. Well, since the target is node in the Webpack build I was\nworking with, node-fetch actually got required. And node-fetch requires a\nlibrary which can't be lazily loaded by Webpack. Aka this issue. \nhttps://github.com/andris9/encoding/issues/18.\n\ntldr; if your Webpack target is node, it looks at the module and main for entry.\nOtherwise, it goes to the browser, then module, then main.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Dive into how Webpack decides which entry in a package.json to load a node module from. If target is node, module and main, otherwise browser, module, main.","author_id":"1","created_at":"2019-05-07 22:48:21","updated_at":"2019-05-08 13:04:36","published_at":"2019-05-08 13:04:36","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d67d826d5c1de39a422057a","uuid":"d53cc3f2-3301-41de-ace6-7a553125377c","title":"nick","slug":"nick","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Some of my BFF [nickfranciosi's](https://twitter.com/nickfranciosi) best work...\\n\\n![](/content/images/2019/06/805_52390485279_5156_n.jpg)\\n\\n![](/content/images/2019/06/805_52390480279_4904_n.jpg)\\n\\n![](/content/images/2019/06/805_52390500279_5867_n.jpg)\\n\\n![](/content/images/2019/06/805_52390470279_4423_n.jpg)\\n\\n![](/content/images/2019/06/805_52390490279_5362_n.jpg)\\n\\n![](/content/images/2019/06/805_52390495279_5609_n.jpg)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Some of my BFF <a href=\"https://twitter.com/nickfranciosi\">nickfranciosi's</a> best work...</p>\n<p><img src=\"/content/images/2019/06/805_52390485279_5156_n.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2019/06/805_52390480279_4904_n.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2019/06/805_52390500279_5867_n.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2019/06/805_52390470279_4423_n.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2019/06/805_52390490279_5362_n.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2019/06/805_52390495279_5609_n.jpg\" alt=\"\"></p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","comment_id":"58","plaintext":"Some of my BFF nickfranciosi's [https://twitter.com/nickfranciosi] best work...","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-06-14 19:27:22","updated_at":"2019-06-14 19:31:29","published_at":"2019-06-14 19:31:29","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null}],"users":[{"id":"1","name":"Jonathan Creamer","slug":"jonathan","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$qlws6n3oRGkqtawb1rvyfOIQJpK9aHRHduLa28UmK/vmXD3C5YYSW","email":"matrixhasyou2k4@gmail.com","profile_image":"//www.gravatar.com/avatar/982085c143104804c4ced3b61864520f?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2019-08-29 13:50:06","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:50:06"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$ut35q.SSjvZg/p87T9GZyuOZ1o6HfUMn4LTtqvRNM.MKb2K.9k0bm","email":"ghost-author@example.com","profile_image":"https://static.ghost.org/v2.0.0/images/ghost.png","cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":"https://ghost.org","location":"The Internet","facebook":"ghost","twitter":"tryghost","accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d825d5c1de39a42204d8","name":"Brandon Howard","slug":"brandon-howard","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$qvjnol9SLcoAxH54e62KZ.XzTVWmrDuPgnSa9XNVXU5MfqIKPxpK.","email":"brandon@allmywebneeds.com","profile_image":"//www.gravatar.com/avatar/9b6693b3c79f49327c6f470845785b3a?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":"http://allmywebneeds.com","location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"locked","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2014-12-04 20:35:56","created_at":"2016-12-15 03:02:31","updated_at":"2016-12-15 03:02:31"}],"posts_authors":[{"id":"5d67d70df39f3138839c4284","post_id":"5d67d70df39f3138839c4283","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c4286","post_id":"5d67d70df39f3138839c4285","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c4288","post_id":"5d67d70df39f3138839c4287","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c428a","post_id":"5d67d70df39f3138839c4289","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c428c","post_id":"5d67d70df39f3138839c428b","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c428e","post_id":"5d67d70df39f3138839c428d","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d70df39f3138839c4290","post_id":"5d67d70df39f3138839c428f","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a422057b","post_id":"5d67d826d5c1de39a422053a","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a422057d","post_id":"5d67d826d5c1de39a422053b","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a422057f","post_id":"5d67d826d5c1de39a422053c","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a4220581","post_id":"5d67d826d5c1de39a422053d","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a4220583","post_id":"5d67d826d5c1de39a422053e","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a4220585","post_id":"5d67d826d5c1de39a422053f","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a4220587","post_id":"5d67d826d5c1de39a4220540","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a4220589","post_id":"5d67d826d5c1de39a4220541","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"5d67d826d5c1de39a422058a","post_id":"5d67d826d5c1de39a4220542","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a422058e","post_id":"5d67d826d5c1de39a4220543","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a4220593","post_id":"5d67d826d5c1de39a4220544","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a4220594","post_id":"5d67d826d5c1de39a4220545","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a4220595","post_id":"5d67d826d5c1de39a4220546","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a422059c","post_id":"5d67d826d5c1de39a4220547","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a422059d","post_id":"5d67d826d5c1de39a4220548","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205a2","post_id":"5d67d826d5c1de39a4220549","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205a9","post_id":"5d67d826d5c1de39a422054a","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205ae","post_id":"5d67d826d5c1de39a422054b","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205b3","post_id":"5d67d826d5c1de39a422054c","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205b9","post_id":"5d67d826d5c1de39a422054d","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205bf","post_id":"5d67d826d5c1de39a422054e","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205c0","post_id":"5d67d826d5c1de39a422054f","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205c6","post_id":"5d67d826d5c1de39a4220550","author_id":"1","sort_order":0},{"id":"5d67d826d5c1de39a42205c9","post_id":"5d67d826d5c1de39a4220551","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205cf","post_id":"5d67d826d5c1de39a4220552","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205d0","post_id":"5d67d826d5c1de39a4220553","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205da","post_id":"5d67d826d5c1de39a4220554","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205db","post_id":"5d67d826d5c1de39a4220555","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205e2","post_id":"5d67d826d5c1de39a4220556","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205e6","post_id":"5d67d826d5c1de39a4220557","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205e7","post_id":"5d67d826d5c1de39a4220558","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205e9","post_id":"5d67d826d5c1de39a4220559","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205ea","post_id":"5d67d826d5c1de39a422055a","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205eb","post_id":"5d67d826d5c1de39a422055b","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205ec","post_id":"5d67d826d5c1de39a422055c","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205ed","post_id":"5d67d826d5c1de39a422055d","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205ee","post_id":"5d67d826d5c1de39a422055e","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205f4","post_id":"5d67d826d5c1de39a422055f","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205fd","post_id":"5d67d826d5c1de39a4220560","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205fe","post_id":"5d67d826d5c1de39a4220561","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a42205ff","post_id":"5d67d826d5c1de39a4220562","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220600","post_id":"5d67d826d5c1de39a4220563","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220605","post_id":"5d67d826d5c1de39a4220564","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220606","post_id":"5d67d826d5c1de39a4220565","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a422060b","post_id":"5d67d826d5c1de39a4220566","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a422060c","post_id":"5d67d826d5c1de39a4220567","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a422060d","post_id":"5d67d826d5c1de39a4220568","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a422060e","post_id":"5d67d826d5c1de39a4220569","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a422060f","post_id":"5d67d826d5c1de39a422056a","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220611","post_id":"5d67d826d5c1de39a422056b","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220619","post_id":"5d67d826d5c1de39a422056c","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220621","post_id":"5d67d826d5c1de39a422056d","author_id":"1","sort_order":0},{"id":"5d67d827d5c1de39a4220622","post_id":"5d67d826d5c1de39a422056e","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220627","post_id":"5d67d826d5c1de39a422056f","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220628","post_id":"5d67d826d5c1de39a4220570","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a422062c","post_id":"5d67d826d5c1de39a4220571","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220631","post_id":"5d67d826d5c1de39a4220572","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220632","post_id":"5d67d826d5c1de39a4220573","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220635","post_id":"5d67d826d5c1de39a4220574","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a422063b","post_id":"5d67d826d5c1de39a4220575","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a422063c","post_id":"5d67d826d5c1de39a4220576","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a422063f","post_id":"5d67d826d5c1de39a4220577","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220640","post_id":"5d67d826d5c1de39a4220578","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220643","post_id":"5d67d826d5c1de39a4220579","author_id":"1","sort_order":0},{"id":"5d67d828d5c1de39a4220648","post_id":"5d67d826d5c1de39a422057a","author_id":"1","sort_order":0}],"roles":[{"id":"5d67d70cf39f3138839c4232","name":"Administrator","description":"Administrators","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4233","name":"Editor","description":"Editors","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4234","name":"Author","description":"Authors","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4235","name":"Contributor","description":"Contributors","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4236","name":"Owner","description":"Blog Owner","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4237","name":"Admin Integration","description":"External Apps","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4238","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4239","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"}],"roles_users":[{"id":"5d67d70df39f3138839c4282","role_id":"5d67d70cf39f3138839c4234","user_id":"5951f5fca366002ebd5dbef7"},{"id":"5d67d70df39f3138839c436e","role_id":"5d67d70cf39f3138839c4236","user_id":"1"},{"id":"5d67d825d5c1de39a42204d9","role_id":"5d67d70cf39f3138839c4232","user_id":"5d67d825d5c1de39a42204d8"}],"permissions":[{"id":"5d67d70cf39f3138839c423a","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c423b","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c423c","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c423d","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c423e","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c423f","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4240","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4241","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4242","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4243","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4244","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4245","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4246","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4247","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4248","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4249","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424a","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424b","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424c","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424d","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424e","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c424f","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4250","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4251","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4252","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4253","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4254","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4255","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4256","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4257","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4258","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4259","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425a","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425b","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425c","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425d","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425e","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c425f","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4260","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4261","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4262","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4263","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4264","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4265","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4266","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4267","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4268","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4269","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426a","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426b","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426c","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426d","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426e","name":"Edit webhooks","object_type":"webhook","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c426f","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4270","name":"Browse integrations","object_type":"integration","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4271","name":"Read integrations","object_type":"integration","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4272","name":"Edit integrations","object_type":"integration","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4273","name":"Add integrations","object_type":"integration","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4274","name":"Delete integrations","object_type":"integration","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4275","name":"Browse API keys","object_type":"api_key","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4276","name":"Read API keys","object_type":"api_key","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4277","name":"Edit API keys","object_type":"api_key","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4278","name":"Add API keys","object_type":"api_key","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4279","name":"Delete API keys","object_type":"api_key","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427a","name":"Browse Actions","object_type":"action","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427b","name":"Browse Members","object_type":"member","action_type":"browse","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427c","name":"Read Members","object_type":"member","action_type":"read","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427d","name":"Edit Members","object_type":"member","action_type":"edit","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427e","name":"Add Members","object_type":"member","action_type":"add","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c427f","name":"Delete Members","object_type":"member","action_type":"destroy","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4280","name":"Publish posts","object_type":"post","action_type":"publish","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d70cf39f3138839c4281","name":"Backup database","object_type":"db","action_type":"backupContent","object_id":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"}],"permissions_users":[],"permissions_roles":[{"id":"5d67d70df39f3138839c4297","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423a"},{"id":"5d67d70df39f3138839c4298","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423b"},{"id":"5d67d70df39f3138839c4299","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423c"},{"id":"5d67d70df39f3138839c429a","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4281"},{"id":"5d67d70df39f3138839c429b","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423d"},{"id":"5d67d70df39f3138839c429c","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423e"},{"id":"5d67d70df39f3138839c429d","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c423f"},{"id":"5d67d70df39f3138839c429e","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4240"},{"id":"5d67d70df39f3138839c429f","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4241"},{"id":"5d67d70df39f3138839c42a3","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4245"},{"id":"5d67d70df39f3138839c42a4","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4280"},{"id":"5d67d70df39f3138839c42a1","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4243"},{"id":"5d67d70df39f3138839c42a2","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4244"},{"id":"5d67d70df39f3138839c42a0","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4242"},{"id":"5d67d70df39f3138839c42a5","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4246"},{"id":"5d67d70df39f3138839c42a6","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4247"},{"id":"5d67d70df39f3138839c42a7","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4248"},{"id":"5d67d70df39f3138839c42a8","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4249"},{"id":"5d67d70df39f3138839c42a9","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424a"},{"id":"5d67d70df39f3138839c42ad","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424e"},{"id":"5d67d70df39f3138839c42ac","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424d"},{"id":"5d67d70df39f3138839c42ab","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424c"},{"id":"5d67d70df39f3138839c42aa","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424b"},{"id":"5d67d70df39f3138839c42ae","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c424f"},{"id":"5d67d70df39f3138839c42af","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4250"},{"id":"5d67d70df39f3138839c42b2","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4253"},{"id":"5d67d70df39f3138839c42b0","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4251"},{"id":"5d67d70df39f3138839c42b3","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4254"},{"id":"5d67d70df39f3138839c42b1","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4252"},{"id":"5d67d70df39f3138839c42b4","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4255"},{"id":"5d67d70df39f3138839c42b5","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4256"},{"id":"5d67d70df39f3138839c42b6","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4257"},{"id":"5d67d70df39f3138839c42b8","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4259"},{"id":"5d67d70df39f3138839c42b7","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4258"},{"id":"5d67d70df39f3138839c42b9","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425a"},{"id":"5d67d70df39f3138839c42ba","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425b"},{"id":"5d67d70df39f3138839c42bb","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425c"},{"id":"5d67d70df39f3138839c42bc","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425d"},{"id":"5d67d70df39f3138839c42bd","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425e"},{"id":"5d67d70df39f3138839c42be","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c425f"},{"id":"5d67d70df39f3138839c42bf","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4260"},{"id":"5d67d70df39f3138839c42c0","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4261"},{"id":"5d67d70df39f3138839c42c1","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4262"},{"id":"5d67d70df39f3138839c42c4","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4265"},{"id":"5d67d70df39f3138839c42c2","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4263"},{"id":"5d67d70df39f3138839c42c3","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4264"},{"id":"5d67d70df39f3138839c42c5","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4266"},{"id":"5d67d70df39f3138839c42c6","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4267"},{"id":"5d67d70df39f3138839c42c7","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4268"},{"id":"5d67d70df39f3138839c42c8","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4269"},{"id":"5d67d70df39f3138839c42c9","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426a"},{"id":"5d67d70df39f3138839c42ca","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426b"},{"id":"5d67d70df39f3138839c42cb","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426c"},{"id":"5d67d70df39f3138839c42cc","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426d"},{"id":"5d67d70df39f3138839c42cd","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426e"},{"id":"5d67d70df39f3138839c42ce","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c426f"},{"id":"5d67d70df39f3138839c42cf","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4270"},{"id":"5d67d70df39f3138839c42d0","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4271"},{"id":"5d67d70df39f3138839c42d3","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4274"},{"id":"5d67d70df39f3138839c42d2","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4273"},{"id":"5d67d70df39f3138839c42d1","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4272"},{"id":"5d67d70df39f3138839c42d4","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4275"},{"id":"5d67d70df39f3138839c42d5","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4276"},{"id":"5d67d70df39f3138839c42d6","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4277"},{"id":"5d67d70df39f3138839c42d7","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4278"},{"id":"5d67d70df39f3138839c42d8","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c4279"},{"id":"5d67d70df39f3138839c42d9","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427a"},{"id":"5d67d70df39f3138839c42da","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427b"},{"id":"5d67d70df39f3138839c42dc","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427d"},{"id":"5d67d70df39f3138839c42dd","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427e"},{"id":"5d67d70df39f3138839c42de","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427f"},{"id":"5d67d70df39f3138839c42db","role_id":"5d67d70cf39f3138839c4232","permission_id":"5d67d70cf39f3138839c427c"},{"id":"5d67d70df39f3138839c42df","role_id":"5d67d70cf39f3138839c4238","permission_id":"5d67d70cf39f3138839c423a"},{"id":"5d67d70df39f3138839c42e1","role_id":"5d67d70cf39f3138839c4238","permission_id":"5d67d70cf39f3138839c423c"},{"id":"5d67d70df39f3138839c42e0","role_id":"5d67d70cf39f3138839c4238","permission_id":"5d67d70cf39f3138839c423b"},{"id":"5d67d70df39f3138839c42e2","role_id":"5d67d70cf39f3138839c4238","permission_id":"5d67d70cf39f3138839c4281"},{"id":"5d67d70df39f3138839c42e3","role_id":"5d67d70cf39f3138839c4239","permission_id":"5d67d70cf39f3138839c4280"},{"id":"5d67d70df39f3138839c42e4","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c423d"},{"id":"5d67d70df39f3138839c42e6","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c423f"},{"id":"5d67d70df39f3138839c42e5","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c423e"},{"id":"5d67d70df39f3138839c42e7","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4240"},{"id":"5d67d70df39f3138839c42e8","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4241"},{"id":"5d67d70df39f3138839c42e9","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4242"},{"id":"5d67d70df39f3138839c42ed","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4280"},{"id":"5d67d70df39f3138839c42ea","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4243"},{"id":"5d67d70df39f3138839c42ec","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4245"},{"id":"5d67d70df39f3138839c42eb","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4244"},{"id":"5d67d70df39f3138839c42ee","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4246"},{"id":"5d67d70df39f3138839c42ef","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4247"},{"id":"5d67d70df39f3138839c42f0","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4248"},{"id":"5d67d70df39f3138839c42f1","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4249"},{"id":"5d67d70df39f3138839c42f2","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424a"},{"id":"5d67d70df39f3138839c42f3","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424b"},{"id":"5d67d70df39f3138839c42f4","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424c"},{"id":"5d67d70df39f3138839c42f5","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424d"},{"id":"5d67d70df39f3138839c42f6","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424e"},{"id":"5d67d70df39f3138839c42f7","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c424f"},{"id":"5d67d70df39f3138839c42fa","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4252"},{"id":"5d67d70df39f3138839c42fb","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4253"},{"id":"5d67d70df39f3138839c42f8","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4250"},{"id":"5d67d70df39f3138839c42f9","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4251"},{"id":"5d67d70df39f3138839c42fc","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4254"},{"id":"5d67d70df39f3138839c42fe","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4256"},{"id":"5d67d70df39f3138839c4301","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4259"},{"id":"5d67d70df39f3138839c4300","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4258"},{"id":"5d67d70df39f3138839c42fd","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4255"},{"id":"5d67d70df39f3138839c42ff","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4257"},{"id":"5d67d70df39f3138839c4302","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425a"},{"id":"5d67d70df39f3138839c4303","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425b"},{"id":"5d67d70df39f3138839c4304","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425c"},{"id":"5d67d70df39f3138839c4305","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425d"},{"id":"5d67d70df39f3138839c4307","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425f"},{"id":"5d67d70df39f3138839c4306","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c425e"},{"id":"5d67d70df39f3138839c4308","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4260"},{"id":"5d67d70df39f3138839c4309","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4261"},{"id":"5d67d70df39f3138839c430a","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4262"},{"id":"5d67d70df39f3138839c430b","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4263"},{"id":"5d67d70df39f3138839c430c","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4264"},{"id":"5d67d70df39f3138839c430d","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4265"},{"id":"5d67d70df39f3138839c430e","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4266"},{"id":"5d67d70df39f3138839c430f","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4267"},{"id":"5d67d70df39f3138839c4310","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4268"},{"id":"5d67d70df39f3138839c4311","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c4269"},{"id":"5d67d70df39f3138839c4312","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426a"},{"id":"5d67d70df39f3138839c4313","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426b"},{"id":"5d67d70df39f3138839c4314","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426c"},{"id":"5d67d70df39f3138839c4315","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426d"},{"id":"5d67d70df39f3138839c4316","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426e"},{"id":"5d67d70df39f3138839c4317","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c426f"},{"id":"5d67d70df39f3138839c4318","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427a"},{"id":"5d67d70df39f3138839c4319","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427b"},{"id":"5d67d70df39f3138839c431a","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427c"},{"id":"5d67d70df39f3138839c431b","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427d"},{"id":"5d67d70df39f3138839c431d","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427f"},{"id":"5d67d70df39f3138839c431c","role_id":"5d67d70cf39f3138839c4237","permission_id":"5d67d70cf39f3138839c427e"},{"id":"5d67d70df39f3138839c431e","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c423e"},{"id":"5d67d70df39f3138839c431f","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c423f"},{"id":"5d67d70df39f3138839c4320","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4240"},{"id":"5d67d70df39f3138839c4321","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4241"},{"id":"5d67d70df39f3138839c4322","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4242"},{"id":"5d67d70df39f3138839c4323","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4243"},{"id":"5d67d70df39f3138839c4324","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4244"},{"id":"5d67d70df39f3138839c4325","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4245"},{"id":"5d67d70df39f3138839c4326","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4280"},{"id":"5d67d70df39f3138839c4327","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4246"},{"id":"5d67d70df39f3138839c4328","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4247"},{"id":"5d67d70df39f3138839c4329","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4249"},{"id":"5d67d70df39f3138839c432a","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424a"},{"id":"5d67d70df39f3138839c432b","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424b"},{"id":"5d67d70df39f3138839c432d","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424d"},{"id":"5d67d70df39f3138839c432c","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424c"},{"id":"5d67d70df39f3138839c432e","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424e"},{"id":"5d67d70df39f3138839c432f","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4255"},{"id":"5d67d70df39f3138839c4330","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4256"},{"id":"5d67d70df39f3138839c4331","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4257"},{"id":"5d67d70df39f3138839c4332","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4258"},{"id":"5d67d70df39f3138839c4333","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4259"},{"id":"5d67d70df39f3138839c4334","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425a"},{"id":"5d67d70df39f3138839c4335","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425b"},{"id":"5d67d70df39f3138839c4336","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425c"},{"id":"5d67d70df39f3138839c4337","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425d"},{"id":"5d67d70df39f3138839c4338","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425e"},{"id":"5d67d70df39f3138839c4339","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c425f"},{"id":"5d67d70df39f3138839c433a","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4260"},{"id":"5d67d70df39f3138839c433b","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4264"},{"id":"5d67d70df39f3138839c433c","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4266"},{"id":"5d67d70df39f3138839c433e","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4268"},{"id":"5d67d70df39f3138839c433d","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4267"},{"id":"5d67d70df39f3138839c4340","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c426a"},{"id":"5d67d70df39f3138839c433f","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c4269"},{"id":"5d67d70df39f3138839c4341","role_id":"5d67d70cf39f3138839c4233","permission_id":"5d67d70cf39f3138839c424f"},{"id":"5d67d70df39f3138839c4342","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4241"},{"id":"5d67d70df39f3138839c4343","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4242"},{"id":"5d67d70df39f3138839c4344","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4244"},{"id":"5d67d70df39f3138839c4345","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4246"},{"id":"5d67d70df39f3138839c4346","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4247"},{"id":"5d67d70df39f3138839c4347","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4249"},{"id":"5d67d70df39f3138839c4349","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c424b"},{"id":"5d67d70df39f3138839c4348","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c424a"},{"id":"5d67d70df39f3138839c434a","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c424d"},{"id":"5d67d70df39f3138839c434b","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4255"},{"id":"5d67d70df39f3138839c434c","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4256"},{"id":"5d67d70df39f3138839c434d","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c425b"},{"id":"5d67d70df39f3138839c434e","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c425c"},{"id":"5d67d70df39f3138839c434f","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c425d"},{"id":"5d67d70df39f3138839c4351","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c425f"},{"id":"5d67d70df39f3138839c4352","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4260"},{"id":"5d67d70df39f3138839c4350","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c425e"},{"id":"5d67d70df39f3138839c4353","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c4264"},{"id":"5d67d70df39f3138839c4354","role_id":"5d67d70cf39f3138839c4234","permission_id":"5d67d70cf39f3138839c424f"},{"id":"5d67d70df39f3138839c4355","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4241"},{"id":"5d67d70df39f3138839c4356","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4242"},{"id":"5d67d70df39f3138839c4357","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4244"},{"id":"5d67d70df39f3138839c4358","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4246"},{"id":"5d67d70df39f3138839c4359","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4247"},{"id":"5d67d70df39f3138839c435a","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4249"},{"id":"5d67d70df39f3138839c435b","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c424a"},{"id":"5d67d70df39f3138839c435c","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c424b"},{"id":"5d67d70df39f3138839c435d","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4255"},{"id":"5d67d70df39f3138839c435e","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4256"},{"id":"5d67d70df39f3138839c435f","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c425b"},{"id":"5d67d70df39f3138839c4360","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c425c"},{"id":"5d67d70df39f3138839c4361","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c425d"},{"id":"5d67d70df39f3138839c4362","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c425e"},{"id":"5d67d70df39f3138839c4363","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c425f"},{"id":"5d67d70df39f3138839c4364","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4260"},{"id":"5d67d70df39f3138839c4365","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c4264"},{"id":"5d67d70df39f3138839c4366","role_id":"5d67d70cf39f3138839c4235","permission_id":"5d67d70cf39f3138839c424f"}],"permissions_apps":[],"settings":[{"id":"5d67d70ef39f3138839c436f","key":"db_hash","value":"4f41b0bd-fb6e-4d40-96ad-767e8d06b349","type":"core","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4370","key":"next_update_check","value":"1567172759","type":"core","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:46:01"},{"id":"5d67d70ef39f3138839c4371","key":"notifications","value":"[]","type":"core","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4372","key":"session_secret","value":"9f712127e2059bb4bcf48ae30056aa95a208142257816ff3f6b4c94b597962e7","type":"core","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4373","key":"theme_session_secret","value":"a6da642b3f4cb313bdce9032028bda245824efde329d0a0b29a5e8c179d7c822","type":"core","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4374","key":"title","value":"Jonathan Creamer","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4375","key":"description","value":"Living, learning, developing. Write about what I do, what I love, and what I learn. Lonely Planet. JavaScript, React, Ruby, Node, Rails, C#, Microsoft MVP.","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4376","key":"logo","value":null,"type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4377","key":"cover_image","value":"/content/images/2019/03/meconnectr.jpeg","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4378","key":"icon","value":null,"type":"blog","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c4379","key":"default_locale","value":"en","type":"blog","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c437a","key":"active_timezone","value":"America/Chicago","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c437b","key":"force_i18n","value":"true","type":"blog","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c437d","key":"amp","value":"true","type":"blog","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c437e","key":"ghost_head","value":null,"type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c437f","key":"ghost_foot","value":"<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script> \n<script type=\"text/javascript\">\n\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-26344448-1']);\n    _gaq.push(['_trackPageview']);\n\n    (function() {\n        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n\n</script>","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4380","key":"facebook","value":null,"type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4381","key":"twitter","value":null,"type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4382","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4383","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"About\",\"url\":\"/about/\"},{\"label\":\"Xbox\",\"url\":\"/xbox-one-epic-clips/\"}]","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4384","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-12-15 02:58:33","updated_at":"2019-03-04 19:12:09"},{"id":"5d67d70ef39f3138839c4385","key":"unsplash","value":"{\"isActive\": true}","type":"blog","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c4386","key":"meta_title","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4387","key":"meta_description","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4388","key":"og_image","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4389","key":"og_title","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438a","key":"og_description","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438b","key":"twitter_image","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438c","key":"twitter_title","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438d","key":"twitter_description","value":null,"type":"blog","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438e","key":"active_theme","value":"casper","type":"theme","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c438f","key":"is_private","value":"false","type":"private","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4390","key":"password","value":null,"type":"private","created_at":"2019-08-29 13:45:50","updated_at":"2019-08-29 13:45:50"},{"id":"5d67d70ef39f3138839c4391","key":"public_hash","value":"42ef923990e58131bb7498bb8ee4d4","type":"private","created_at":"2019-07-20 15:18:05","updated_at":"2019-07-20 15:18:05"},{"id":"5d67d70ef39f3138839c4392","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJQQ69ncgPOeGJcr1LcgcWoP1YyE9JNlleJnGJUa/a7HI4QGG6sClOOXQCLIacqh\nFYswQyQH0SPv6iO0DbTdMnPRGheUyV+aVnqOeGtu6w0Z0Yvnd6t2jkhw2eNBJTuIUcy+4W5v\ntYwjaQ3dgV5s4MnTo4MkVNcNgPEtT/II6bJDAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"members","created_at":"2019-07-20 15:23:30","updated_at":"2019-07-20 15:23:30"},{"id":"5d67d70ef39f3138839c4393","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCUEOvZ3IDznhiXK9S3IHFqD9WMhPSTZZXiZxiVGv2uxyOEBhurApTjl0Ai\nyGnKoRWLMEMkB9Ej7+ojtA203TJz0RoXlMlfmlZ6jnhrbusNGdGL53erdo5IcNnjQSU7iFHM\nvuFub7WMI2kN3YFebODJ06ODJFTXDYDxLU/yCOmyQwIDAQABAoGAQ4Xf+M99IxxC/JWpgQXT\nktm7ukRbwOg/zSrU5BKWA+GeybN7ZKZdvdiZEAOzcwu45mvRAppp/uiHL1cKNSP2wHXLRvgV\nUVgv8wQjlp6sb1EUvKDg7yWGlWTkpFV6ru6MNNiGpJFv5KrrHgMGVBnkbYxyPIZ+r/EryI9t\nc7XI77ECQQDY7S98ZuEXUydF1qLlnBfMeng8saOroGU74aBX2BbWnW3NJHdst1g0K0rb5L18\nHIrF9OLglNDO7u1U01omN+9rAkEArrx6BANnYV1kDe0/kfnx2rTQCVMJfkleaQ6OQNdy0alg\num0HqZtl1t2LhGNxlFSokvkln+5lERkUZH/1We42iQJBALtXg/YlB2pUdwtahY5U0zzV2/dW\n1uoG+MbRYd/bkEXC6iwLvVPXt8Y+SUVE89w27iZuCm44N2kvcSob6bQuBIcCQFsXbHBtKdar\nLf7IoKxD5Z5DRnSl8jwAmZQg/220I2pDZ2aocicsGMITiqkAgnR2Uc8UzVV7nPp13Ziq0EgK\nlCkCQQDYDOPn4ZjlZEb0iUpBMu84UDlAWqghSaJAZ271zLA4+e/GO0kg5X5jeJH1l/x5t39w\ngrFSvAJBxsj0vznjArRE\n-----END RSA PRIVATE KEY-----\n","type":"members","created_at":"2019-07-20 15:23:30","updated_at":"2019-07-20 15:23:30"},{"id":"5d67d70ef39f3138839c4394","key":"members_session_secret","value":"76c9f12532ae0cc7cacc04d707b038e1c79ec7847506997b7a2f24f536cebb77","type":"members","created_at":"2019-07-20 15:23:30","updated_at":"2019-07-20 15:23:30"},{"id":"5d67d70ef39f3138839c4395","key":"members_subscription_settings","value":"{\"isPaid\":false,\"paymentProcessors\":[{\"adapter\":\"stripe\",\"config\":{\"secret_token\":\"\",\"public_token\":\"\",\"product\":{\"name\":\"Ghost Subscription\"},\"plans\":[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":\"\"},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":\"\"}]}}]}","type":"members","created_at":"2019-07-20 15:23:30","updated_at":"2019-07-20 15:23:30"}],"tags":[{"id":"5d67d70cf39f3138839c422d","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-08-29 13:45:48","updated_at":"2019-08-29 13:45:48"},{"id":"5d67d825d5c1de39a42204e0","name":"javascript","slug":"javascript","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ea","name":"events","slug":"events","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e7","name":"services","slug":"services","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204eb","name":"node","slug":"node","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ec","name":"express","slug":"express","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ed","name":"node.js","slug":"node-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ee","name":"fantasy","slug":"fantasy","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ef","name":"yahoo","slug":"yahoo","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e3","name":"Internet Explorer","slug":"internet-explorer","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e2","name":"Modern Web","slug":"modern-web","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e6","name":"mvc","slug":"mvc","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f4","name":"scope","slug":"scope","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f3","name":"rootScope","slug":"rootscope","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e5","name":"angularjs","slug":"angularjs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f1","name":"sports","slug":"sports","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e9","name":"controllers","slug":"controllers","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e4","name":"JavaScript","slug":"javascript-2","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e8","name":"factories","slug":"factories","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f5","name":"app","slug":"app-tag","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f7","name":"prototype","slug":"prototype","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f6","name":"objects","slug":"objects","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f0","name":"api","slug":"api","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f9","name":"ng","slug":"ng","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204fa","name":"directives","slug":"directives","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204fb","name":"requirejs","slug":"requirejs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204fc","name":"amd","slug":"amd","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204fd","name":"large scale","slug":"large-scale","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f8","name":"object literals","slug":"object-literals","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204e1","name":"IE","slug":"ie","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204f2","name":"angular","slug":"angular","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220501","name":"2-factor","slug":"2-factor","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204ff","name":"github","slug":"github","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220502","name":"auth","slug":"auth","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220504","name":"ios","slug":"ios","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220503","name":"authenticator","slug":"authenticator","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220505","name":"react","slug":"react","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220507","name":"flux","slug":"flux","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220500","name":"authentication","slug":"authentication","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220506","name":"android","slug":"android","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220509","name":"flux.js","slug":"flux-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a42204fe","name":"security","slug":"security","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220508","name":"react.js","slug":"react-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220511","name":"es7","slug":"es7","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422050d","name":"hadley","slug":"hadley","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422050e","name":"webpack","slug":"webpack","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220510","name":"decorators","slug":"decorators","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220513","name":"advanced","slug":"advanced","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220516","name":"critical path","slug":"critical-path","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220517","name":"critical","slug":"critical","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220512","name":"event bus","slug":"event-bus","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220514","name":"es6","slug":"es6","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220515","name":"es2015","slug":"es2015","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220519","name":"babel","slug":"babel","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422051b","name":"messaging","slug":"messaging","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422050f","name":"es2016","slug":"es2016","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422051d","name":"decouple","slug":"decouple","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220518","name":"pagespeed","slug":"pagespeed","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422051f","name":"screencast","slug":"screencast","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-17 21:34:18","updated_at":"2017-01-17 21:34:18"},{"id":"5d67d825d5c1de39a4220520","name":"fetch","slug":"fetch","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a4220521","name":"async","slug":"async","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a422051a","name":"plugin","slug":"plugin","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422051e","name":"redux","slug":"redux","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a4220527","name":"back","slug":"back","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a4220523","name":"universal","slug":"universal","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a422051c","name":"postal.js","slug":"postal-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a422050b","name":"family","slug":"family","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220528","name":"button","slug":"button","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a4220522","name":"await","slug":"await","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a422052a","name":"x-requested-with","slug":"x-requested-with","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a422050c","name":"baby","slug":"baby","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220526","name":"cache","slug":"cache","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a422052e","name":"mock","slug":"mock","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-04-13 02:53:52","updated_at":"2017-04-13 02:53:52"},{"id":"5d67d825d5c1de39a422052d","name":"jest","slug":"jest","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-04-13 02:53:52","updated_at":"2017-04-13 02:53:52"},{"id":"5d67d825d5c1de39a422052f","name":"vscode","slug":"vscode","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-09-20 14:42:00","updated_at":"2017-09-20 14:42:00"},{"id":"5d67d825d5c1de39a4220530","name":"tscheck","slug":"tscheck","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-02-02 00:22:51","updated_at":"2018-02-02 00:22:51"},{"id":"5d67d825d5c1de39a422052b","name":"typescript","slug":"typescript","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-04-13 02:53:52","updated_at":"2017-04-13 02:53:52"},{"id":"5d67d825d5c1de39a4220533","name":"drawings","slug":"drawings","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-06-14 19:31:29","updated_at":"2019-06-14 19:31:29"},{"id":"5d67d825d5c1de39a4220529","name":"chrome","slug":"chrome","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a422050a","name":"architecture","slug":"architecture","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220535","name":"MVP","slug":"mvp","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220537","name":"Microsoft","slug":"microsoft","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"},{"id":"5d67d825d5c1de39a4220532","name":"mainFields","slug":"mainfields","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-05-08 12:57:47","updated_at":"2019-05-08 12:57:47"},{"id":"5d67d825d5c1de39a4220531","name":"types","slug":"types","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-02-02 00:22:51","updated_at":"2018-02-02 00:22:51"},{"id":"5d67d825d5c1de39a4220524","name":"react-router","slug":"react-router","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-31 22:40:35","updated_at":"2017-01-31 22:40:35"},{"id":"5d67d825d5c1de39a4220538","name":"nick","slug":"nick","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-06-14 19:31:29","updated_at":"2019-06-14 19:31:29"},{"id":"5d67d825d5c1de39a4220539","name":"nickfranciosi","slug":"nickfranciosi","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-06-14 19:31:29","updated_at":"2019-06-14 19:31:29"},{"id":"5d67d825d5c1de39a4220525","name":"nodejs","slug":"nodejs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-13 22:17:22","updated_at":"2017-02-13 22:17:22"},{"id":"5d67d825d5c1de39a422052c","name":"unit testing","slug":"unit-testing","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-04-13 02:53:52","updated_at":"2017-04-13 02:53:52"},{"id":"5d67d825d5c1de39a4220534","name":"art","slug":"art","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-06-14 19:31:29","updated_at":"2019-06-14 19:31:29"},{"id":"5d67d825d5c1de39a4220536","name":"pubsub","slug":"pubsub","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-15 03:02:32","updated_at":"2016-12-15 03:02:32"}],"posts_tags":[{"id":"5d67d70df39f3138839c4367","post_id":"5d67d70df39f3138839c4283","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c4368","post_id":"5d67d70df39f3138839c4285","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c4369","post_id":"5d67d70df39f3138839c4287","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c436a","post_id":"5d67d70df39f3138839c4289","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c436b","post_id":"5d67d70df39f3138839c428b","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c436c","post_id":"5d67d70df39f3138839c428d","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d70df39f3138839c436d","post_id":"5d67d70df39f3138839c428f","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a422057c","post_id":"5d67d826d5c1de39a422053b","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a422057e","post_id":"5d67d826d5c1de39a422053c","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a4220580","post_id":"5d67d826d5c1de39a422053d","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a4220582","post_id":"5d67d826d5c1de39a422053e","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a4220584","post_id":"5d67d826d5c1de39a422053f","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a4220586","post_id":"5d67d826d5c1de39a4220540","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a4220588","post_id":"5d67d826d5c1de39a4220541","tag_id":"5d67d70cf39f3138839c422d","sort_order":0},{"id":"5d67d826d5c1de39a422058b","post_id":"5d67d826d5c1de39a4220543","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a422058c","post_id":"5d67d826d5c1de39a4220543","tag_id":"5d67d825d5c1de39a422051b","sort_order":1},{"id":"5d67d826d5c1de39a422058d","post_id":"5d67d826d5c1de39a4220543","tag_id":"5d67d825d5c1de39a4220536","sort_order":2},{"id":"5d67d826d5c1de39a422058f","post_id":"5d67d826d5c1de39a4220544","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a4220591","post_id":"5d67d826d5c1de39a4220544","tag_id":"5d67d825d5c1de39a422051c","sort_order":2},{"id":"5d67d826d5c1de39a4220590","post_id":"5d67d826d5c1de39a4220544","tag_id":"5d67d825d5c1de39a422051b","sort_order":1},{"id":"5d67d826d5c1de39a4220592","post_id":"5d67d826d5c1de39a4220544","tag_id":"5d67d825d5c1de39a422051d","sort_order":3},{"id":"5d67d826d5c1de39a4220596","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a4220535","sort_order":0},{"id":"5d67d826d5c1de39a4220597","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a4220537","sort_order":1},{"id":"5d67d826d5c1de39a4220598","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a42204e1","sort_order":2},{"id":"5d67d826d5c1de39a4220599","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a42204e2","sort_order":3},{"id":"5d67d826d5c1de39a422059a","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a42204e3","sort_order":4},{"id":"5d67d826d5c1de39a422059b","post_id":"5d67d826d5c1de39a4220547","tag_id":"5d67d825d5c1de39a42204e4","sort_order":5},{"id":"5d67d826d5c1de39a422059e","post_id":"5d67d826d5c1de39a4220549","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a42205a0","post_id":"5d67d826d5c1de39a4220549","tag_id":"5d67d825d5c1de39a42204e5","sort_order":2},{"id":"5d67d826d5c1de39a422059f","post_id":"5d67d826d5c1de39a4220549","tag_id":"5d67d825d5c1de39a422051c","sort_order":1},{"id":"5d67d826d5c1de39a42205a1","post_id":"5d67d826d5c1de39a4220549","tag_id":"5d67d825d5c1de39a42204ea","sort_order":3},{"id":"5d67d826d5c1de39a42205a3","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a42205a4","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e5","sort_order":1},{"id":"5d67d826d5c1de39a42205a8","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e9","sort_order":5},{"id":"5d67d826d5c1de39a42205a5","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e6","sort_order":2},{"id":"5d67d826d5c1de39a42205a6","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e7","sort_order":3},{"id":"5d67d826d5c1de39a42205a7","post_id":"5d67d826d5c1de39a422054a","tag_id":"5d67d825d5c1de39a42204e8","sort_order":4},{"id":"5d67d826d5c1de39a42205aa","post_id":"5d67d826d5c1de39a422054b","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d826d5c1de39a42205ab","post_id":"5d67d826d5c1de39a422054b","tag_id":"5d67d825d5c1de39a42204e5","sort_order":1},{"id":"5d67d826d5c1de39a42205ac","post_id":"5d67d826d5c1de39a422054b","tag_id":"5d67d825d5c1de39a42204e7","sort_order":2},{"id":"5d67d826d5c1de39a42205ad","post_id":"5d67d826d5c1de39a422054b","tag_id":"5d67d825d5c1de39a42204e8","sort_order":3},{"id":"5d67d826d5c1de39a42205af","post_id":"5d67d826d5c1de39a422054c","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a42205b0","post_id":"5d67d826d5c1de39a422054c","tag_id":"5d67d825d5c1de39a42204f6","sort_order":1},{"id":"5d67d826d5c1de39a42205b1","post_id":"5d67d826d5c1de39a422054c","tag_id":"5d67d825d5c1de39a42204f7","sort_order":2},{"id":"5d67d826d5c1de39a42205b2","post_id":"5d67d826d5c1de39a422054c","tag_id":"5d67d825d5c1de39a42204f8","sort_order":3},{"id":"5d67d826d5c1de39a42205b4","post_id":"5d67d826d5c1de39a422054d","tag_id":"5d67d825d5c1de39a42204f2","sort_order":0},{"id":"5d67d826d5c1de39a42205b5","post_id":"5d67d826d5c1de39a422054d","tag_id":"5d67d825d5c1de39a42204f3","sort_order":1},{"id":"5d67d826d5c1de39a42205b6","post_id":"5d67d826d5c1de39a422054d","tag_id":"5d67d825d5c1de39a42204f4","sort_order":2},{"id":"5d67d826d5c1de39a42205b7","post_id":"5d67d826d5c1de39a422054d","tag_id":"5d67d825d5c1de39a42204f9","sort_order":3},{"id":"5d67d826d5c1de39a42205b8","post_id":"5d67d826d5c1de39a422054d","tag_id":"5d67d825d5c1de39a42204f5","sort_order":4},{"id":"5d67d826d5c1de39a42205ba","post_id":"5d67d826d5c1de39a422054e","tag_id":"5d67d825d5c1de39a42204eb","sort_order":0},{"id":"5d67d826d5c1de39a42205bb","post_id":"5d67d826d5c1de39a422054e","tag_id":"5d67d825d5c1de39a42204ec","sort_order":1},{"id":"5d67d826d5c1de39a42205bc","post_id":"5d67d826d5c1de39a422054e","tag_id":"5d67d825d5c1de39a42204ee","sort_order":2},{"id":"5d67d826d5c1de39a42205bd","post_id":"5d67d826d5c1de39a422054e","tag_id":"5d67d825d5c1de39a42204ef","sort_order":3},{"id":"5d67d826d5c1de39a42205be","post_id":"5d67d826d5c1de39a422054e","tag_id":"5d67d825d5c1de39a42204f1","sort_order":4},{"id":"5d67d826d5c1de39a42205c1","post_id":"5d67d826d5c1de39a4220550","tag_id":"5d67d825d5c1de39a42204e5","sort_order":0},{"id":"5d67d826d5c1de39a42205c2","post_id":"5d67d826d5c1de39a4220550","tag_id":"5d67d825d5c1de39a42204e9","sort_order":1},{"id":"5d67d826d5c1de39a42205c3","post_id":"5d67d826d5c1de39a4220550","tag_id":"5d67d825d5c1de39a42204f3","sort_order":2},{"id":"5d67d826d5c1de39a42205c4","post_id":"5d67d826d5c1de39a4220550","tag_id":"5d67d825d5c1de39a42204f4","sort_order":3},{"id":"5d67d826d5c1de39a42205c5","post_id":"5d67d826d5c1de39a4220550","tag_id":"5d67d825d5c1de39a42204fa","sort_order":4},{"id":"5d67d826d5c1de39a42205c7","post_id":"5d67d826d5c1de39a4220551","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d826d5c1de39a42205c8","post_id":"5d67d826d5c1de39a4220551","tag_id":"5d67d825d5c1de39a42204e7","sort_order":1},{"id":"5d67d826d5c1de39a42205ca","post_id":"5d67d826d5c1de39a4220552","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d826d5c1de39a42205cc","post_id":"5d67d826d5c1de39a4220552","tag_id":"5d67d825d5c1de39a42204fb","sort_order":2},{"id":"5d67d826d5c1de39a42205cd","post_id":"5d67d826d5c1de39a4220552","tag_id":"5d67d825d5c1de39a42204fc","sort_order":3},{"id":"5d67d826d5c1de39a42205ce","post_id":"5d67d826d5c1de39a4220552","tag_id":"5d67d825d5c1de39a42204fd","sort_order":4},{"id":"5d67d826d5c1de39a42205cb","post_id":"5d67d826d5c1de39a4220552","tag_id":"5d67d825d5c1de39a42204e5","sort_order":1},{"id":"5d67d827d5c1de39a42205d1","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a42204f5","sort_order":0},{"id":"5d67d827d5c1de39a42205d3","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a42204ff","sort_order":2},{"id":"5d67d827d5c1de39a42205d2","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a42204fe","sort_order":1},{"id":"5d67d827d5c1de39a42205d5","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220501","sort_order":4},{"id":"5d67d827d5c1de39a42205d6","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220502","sort_order":5},{"id":"5d67d827d5c1de39a42205d8","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220504","sort_order":7},{"id":"5d67d827d5c1de39a42205d7","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220503","sort_order":6},{"id":"5d67d827d5c1de39a42205d9","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220506","sort_order":8},{"id":"5d67d827d5c1de39a42205d4","post_id":"5d67d826d5c1de39a4220554","tag_id":"5d67d825d5c1de39a4220500","sort_order":3},{"id":"5d67d827d5c1de39a42205dd","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a4220505","sort_order":1},{"id":"5d67d827d5c1de39a42205de","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a4220507","sort_order":2},{"id":"5d67d827d5c1de39a42205dc","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a42204e0","sort_order":0},{"id":"5d67d827d5c1de39a42205e1","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a422050a","sort_order":5},{"id":"5d67d827d5c1de39a42205df","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a4220508","sort_order":3},{"id":"5d67d827d5c1de39a42205e0","post_id":"5d67d826d5c1de39a4220556","tag_id":"5d67d825d5c1de39a4220509","sort_order":4},{"id":"5d67d827d5c1de39a42205e3","post_id":"5d67d826d5c1de39a4220557","tag_id":"5d67d825d5c1de39a422050b","sort_order":0},{"id":"5d67d827d5c1de39a42205e4","post_id":"5d67d826d5c1de39a4220557","tag_id":"5d67d825d5c1de39a422050c","sort_order":1},{"id":"5d67d827d5c1de39a42205e5","post_id":"5d67d826d5c1de39a4220557","tag_id":"5d67d825d5c1de39a422050d","sort_order":2},{"id":"5d67d827d5c1de39a42205e8","post_id":"5d67d826d5c1de39a4220559","tag_id":"5d67d825d5c1de39a422050e","sort_order":0},{"id":"5d67d827d5c1de39a42205ef","post_id":"5d67d826d5c1de39a422055f","tag_id":"5d67d825d5c1de39a422051c","sort_order":0},{"id":"5d67d827d5c1de39a42205f1","post_id":"5d67d826d5c1de39a422055f","tag_id":"5d67d825d5c1de39a4220510","sort_order":2},{"id":"5d67d827d5c1de39a42205f0","post_id":"5d67d826d5c1de39a422055f","tag_id":"5d67d825d5c1de39a422050f","sort_order":1},{"id":"5d67d827d5c1de39a42205f2","post_id":"5d67d826d5c1de39a422055f","tag_id":"5d67d825d5c1de39a4220511","sort_order":3},{"id":"5d67d827d5c1de39a42205f3","post_id":"5d67d826d5c1de39a422055f","tag_id":"5d67d825d5c1de39a4220512","sort_order":4},{"id":"5d67d827d5c1de39a42205f5","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d827d5c1de39a42205f7","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220513","sort_order":2},{"id":"5d67d827d5c1de39a42205f6","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a422050e","sort_order":1},{"id":"5d67d827d5c1de39a42205f8","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220514","sort_order":3},{"id":"5d67d827d5c1de39a42205f9","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220515","sort_order":4},{"id":"5d67d827d5c1de39a42205fa","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220516","sort_order":5},{"id":"5d67d827d5c1de39a42205fb","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220517","sort_order":6},{"id":"5d67d827d5c1de39a42205fc","post_id":"5d67d826d5c1de39a4220560","tag_id":"5d67d825d5c1de39a4220518","sort_order":7},{"id":"5d67d827d5c1de39a4220601","post_id":"5d67d826d5c1de39a4220564","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d827d5c1de39a4220602","post_id":"5d67d826d5c1de39a4220564","tag_id":"5d67d825d5c1de39a422050e","sort_order":1},{"id":"5d67d827d5c1de39a4220604","post_id":"5d67d826d5c1de39a4220564","tag_id":"5d67d825d5c1de39a4220519","sort_order":3},{"id":"5d67d827d5c1de39a4220603","post_id":"5d67d826d5c1de39a4220564","tag_id":"5d67d825d5c1de39a4220514","sort_order":2},{"id":"5d67d827d5c1de39a4220607","post_id":"5d67d826d5c1de39a4220566","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d827d5c1de39a4220609","post_id":"5d67d826d5c1de39a4220566","tag_id":"5d67d825d5c1de39a4220513","sort_order":2},{"id":"5d67d827d5c1de39a4220608","post_id":"5d67d826d5c1de39a4220566","tag_id":"5d67d825d5c1de39a422050e","sort_order":1},{"id":"5d67d827d5c1de39a422060a","post_id":"5d67d826d5c1de39a4220566","tag_id":"5d67d825d5c1de39a422051a","sort_order":3},{"id":"5d67d827d5c1de39a4220610","post_id":"5d67d826d5c1de39a422056b","tag_id":"5d67d825d5c1de39a422051f","sort_order":0},{"id":"5d67d827d5c1de39a4220612","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220505","sort_order":0},{"id":"5d67d827d5c1de39a4220613","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a422051e","sort_order":1},{"id":"5d67d827d5c1de39a4220614","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220520","sort_order":2},{"id":"5d67d827d5c1de39a4220615","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220521","sort_order":3},{"id":"5d67d827d5c1de39a4220616","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220522","sort_order":4},{"id":"5d67d827d5c1de39a4220617","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220523","sort_order":5},{"id":"5d67d827d5c1de39a4220618","post_id":"5d67d826d5c1de39a422056c","tag_id":"5d67d825d5c1de39a4220524","sort_order":6},{"id":"5d67d827d5c1de39a422061a","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a42204ec","sort_order":0},{"id":"5d67d827d5c1de39a422061b","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a4220525","sort_order":1},{"id":"5d67d827d5c1de39a422061c","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a4220526","sort_order":2},{"id":"5d67d827d5c1de39a422061d","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a4220527","sort_order":3},{"id":"5d67d827d5c1de39a422061f","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a4220529","sort_order":5},{"id":"5d67d827d5c1de39a422061e","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a4220528","sort_order":4},{"id":"5d67d827d5c1de39a4220620","post_id":"5d67d826d5c1de39a422056d","tag_id":"5d67d825d5c1de39a422052a","sort_order":6},{"id":"5d67d828d5c1de39a4220623","post_id":"5d67d826d5c1de39a422056f","tag_id":"5d67d825d5c1de39a422052b","sort_order":0},{"id":"5d67d828d5c1de39a4220624","post_id":"5d67d826d5c1de39a422056f","tag_id":"5d67d825d5c1de39a422052c","sort_order":1},{"id":"5d67d828d5c1de39a4220625","post_id":"5d67d826d5c1de39a422056f","tag_id":"5d67d825d5c1de39a422052d","sort_order":2},{"id":"5d67d828d5c1de39a4220626","post_id":"5d67d826d5c1de39a422056f","tag_id":"5d67d825d5c1de39a422052e","sort_order":3},{"id":"5d67d828d5c1de39a4220629","post_id":"5d67d826d5c1de39a4220571","tag_id":"5d67d825d5c1de39a422052b","sort_order":0},{"id":"5d67d828d5c1de39a422062b","post_id":"5d67d826d5c1de39a4220571","tag_id":"5d67d825d5c1de39a4220505","sort_order":2},{"id":"5d67d828d5c1de39a422062a","post_id":"5d67d826d5c1de39a4220571","tag_id":"5d67d825d5c1de39a422050e","sort_order":1},{"id":"5d67d828d5c1de39a422062d","post_id":"5d67d826d5c1de39a4220572","tag_id":"5d67d825d5c1de39a42204ed","sort_order":0},{"id":"5d67d828d5c1de39a422062e","post_id":"5d67d826d5c1de39a4220572","tag_id":"5d67d825d5c1de39a422052c","sort_order":1},{"id":"5d67d828d5c1de39a422062f","post_id":"5d67d826d5c1de39a4220572","tag_id":"5d67d825d5c1de39a422052d","sort_order":2},{"id":"5d67d828d5c1de39a4220630","post_id":"5d67d826d5c1de39a4220572","tag_id":"5d67d825d5c1de39a422052f","sort_order":3},{"id":"5d67d828d5c1de39a4220633","post_id":"5d67d826d5c1de39a4220574","tag_id":"5d67d825d5c1de39a42204e4","sort_order":0},{"id":"5d67d828d5c1de39a4220634","post_id":"5d67d826d5c1de39a4220574","tag_id":"5d67d825d5c1de39a4220519","sort_order":1},{"id":"5d67d828d5c1de39a4220636","post_id":"5d67d826d5c1de39a4220575","tag_id":"5d67d825d5c1de39a4220505","sort_order":0},{"id":"5d67d828d5c1de39a4220637","post_id":"5d67d826d5c1de39a4220575","tag_id":"5d67d825d5c1de39a422052b","sort_order":1},{"id":"5d67d828d5c1de39a4220638","post_id":"5d67d826d5c1de39a4220575","tag_id":"5d67d825d5c1de39a42204e4","sort_order":2},{"id":"5d67d828d5c1de39a4220639","post_id":"5d67d826d5c1de39a4220575","tag_id":"5d67d825d5c1de39a4220530","sort_order":3},{"id":"5d67d828d5c1de39a422063a","post_id":"5d67d826d5c1de39a4220575","tag_id":"5d67d825d5c1de39a4220531","sort_order":4},{"id":"5d67d828d5c1de39a422063d","post_id":"5d67d826d5c1de39a4220577","tag_id":"5d67d825d5c1de39a422050e","sort_order":0},{"id":"5d67d828d5c1de39a422063e","post_id":"5d67d826d5c1de39a4220577","tag_id":"5d67d825d5c1de39a4220519","sort_order":1},{"id":"5d67d828d5c1de39a4220641","post_id":"5d67d826d5c1de39a4220579","tag_id":"5d67d825d5c1de39a422050e","sort_order":0},{"id":"5d67d828d5c1de39a4220642","post_id":"5d67d826d5c1de39a4220579","tag_id":"5d67d825d5c1de39a4220532","sort_order":1},{"id":"5d67d828d5c1de39a4220644","post_id":"5d67d826d5c1de39a422057a","tag_id":"5d67d825d5c1de39a4220533","sort_order":0},{"id":"5d67d828d5c1de39a4220645","post_id":"5d67d826d5c1de39a422057a","tag_id":"5d67d825d5c1de39a4220534","sort_order":1},{"id":"5d67d828d5c1de39a4220646","post_id":"5d67d826d5c1de39a422057a","tag_id":"5d67d825d5c1de39a4220538","sort_order":2},{"id":"5d67d828d5c1de39a4220647","post_id":"5d67d826d5c1de39a422057a","tag_id":"5d67d825d5c1de39a4220539","sort_order":3}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[],"invites":[],"brute":[{"key":"oHUubZQTM66eOWJCFaoi+8dO/eXPG5zwBOW8P5YAuKM=","firstRequest":1567086606791,"lastRequest":1567086606791,"lifetime":1567090206795,"count":1}],"webhooks":[],"integrations":[{"id":"5d67d70df39f3138839c4291","type":"builtin","name":"Zapier","slug":"zapier","icon_image":null,"description":"Built-in Zapier integration","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49"},{"id":"5d67d70df39f3138839c4293","type":"internal","name":"Ghost Backup","slug":"ghost-backup","icon_image":null,"description":"Internal DB Backup integration","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49"},{"id":"5d67d70df39f3138839c4295","type":"internal","name":"Ghost Scheduler","slug":"ghost-scheduler","icon_image":null,"description":"Internal Scheduler integration","created_at":"2019-08-29 13:45:49","updated_at":"2019-08-29 13:45:49"}],"api_keys":[{"id":"5d67d70df39f3138839c4292","type":"admin","secret":"40ad0b6abfd1d108fb9e36570b1c2d7c7a956b1ad411986f15ea5d8e66a122a6","role_id":"5d67d70cf39f3138839c4237","integration_id":"5d67d70df39f3138839c4291","last_seen_at":null,"last_seen_version":null,"created_at":1567086349306,"updated_at":1567086349306},{"id":"5d67d70df39f3138839c4294","type":"admin","secret":"aef60dd8bf10ca45976b1b05f90a7dbaee635c703629b3eddac87e9b1354966d","role_id":"5d67d70cf39f3138839c4238","integration_id":"5d67d70df39f3138839c4293","last_seen_at":null,"last_seen_version":null,"created_at":1567086349315,"updated_at":1567086349315},{"id":"5d67d70df39f3138839c4296","type":"admin","secret":"34acd348c5d70a4c92b3a02b94752e5c30418d86d153b8a716090b5d997634d8","role_id":"5d67d70cf39f3138839c4239","integration_id":"5d67d70df39f3138839c4295","last_seen_at":null,"last_seen_version":null,"created_at":1567086349323,"updated_at":1567086349323}],"members":[],"actions":[]}}]}